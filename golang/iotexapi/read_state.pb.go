// Copyright (c) 2020 IoTeX
// This is an alpha (internal) release and is not suitable for production. This source code is provided 'as is' and no
// warranties are given as to title or non-infringement, merchantability or fitness for purpose and, to the extent
// permitted by law, all liability for your use of the code is disclaimed. This source code is governed by Apache
// License 2.0 that can be found in the LICENSE file.

// To compile the proto, run:
//      protoc -I. -I ./../types --go_out=plugins=grpc:$GOPATH/src *.proto

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.34.2
// 	protoc        v5.27.1
// source: proto/api/read_state.proto

package iotexapi

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type ReadStakingDataMethod_Name int32

const (
	ReadStakingDataMethod_INVALID              ReadStakingDataMethod_Name = 0
	ReadStakingDataMethod_BUCKETS              ReadStakingDataMethod_Name = 1
	ReadStakingDataMethod_BUCKETS_BY_VOTER     ReadStakingDataMethod_Name = 2
	ReadStakingDataMethod_BUCKETS_BY_CANDIDATE ReadStakingDataMethod_Name = 3
	ReadStakingDataMethod_CANDIDATES           ReadStakingDataMethod_Name = 4
	ReadStakingDataMethod_CANDIDATE_BY_NAME    ReadStakingDataMethod_Name = 5
	ReadStakingDataMethod_BUCKETS_BY_INDEXES   ReadStakingDataMethod_Name = 6
	ReadStakingDataMethod_CANDIDATE_BY_ADDRESS ReadStakingDataMethod_Name = 7
	ReadStakingDataMethod_TOTAL_STAKING_AMOUNT ReadStakingDataMethod_Name = 8
	ReadStakingDataMethod_BUCKETS_COUNT        ReadStakingDataMethod_Name = 9
	// 10-19 reserved for native staking
	ReadStakingDataMethod_COMPOSITE_BUCKETS              ReadStakingDataMethod_Name = 20
	ReadStakingDataMethod_COMPOSITE_BUCKETS_BY_VOTER     ReadStakingDataMethod_Name = 21
	ReadStakingDataMethod_COMPOSITE_BUCKETS_BY_CANDIDATE ReadStakingDataMethod_Name = 22
	ReadStakingDataMethod_COMPOSITE_BUCKETS_BY_INDEXES   ReadStakingDataMethod_Name = 23
	ReadStakingDataMethod_COMPOSITE_BUCKETS_COUNT        ReadStakingDataMethod_Name = 24
	ReadStakingDataMethod_COMPOSITE_TOTAL_STAKING_AMOUNT ReadStakingDataMethod_Name = 25
	ReadStakingDataMethod_CONTRACT_STAKING_BUCKET_TYPES  ReadStakingDataMethod_Name = 26
)

// Enum value maps for ReadStakingDataMethod_Name.
var (
	ReadStakingDataMethod_Name_name = map[int32]string{
		0:  "INVALID",
		1:  "BUCKETS",
		2:  "BUCKETS_BY_VOTER",
		3:  "BUCKETS_BY_CANDIDATE",
		4:  "CANDIDATES",
		5:  "CANDIDATE_BY_NAME",
		6:  "BUCKETS_BY_INDEXES",
		7:  "CANDIDATE_BY_ADDRESS",
		8:  "TOTAL_STAKING_AMOUNT",
		9:  "BUCKETS_COUNT",
		20: "COMPOSITE_BUCKETS",
		21: "COMPOSITE_BUCKETS_BY_VOTER",
		22: "COMPOSITE_BUCKETS_BY_CANDIDATE",
		23: "COMPOSITE_BUCKETS_BY_INDEXES",
		24: "COMPOSITE_BUCKETS_COUNT",
		25: "COMPOSITE_TOTAL_STAKING_AMOUNT",
		26: "CONTRACT_STAKING_BUCKET_TYPES",
	}
	ReadStakingDataMethod_Name_value = map[string]int32{
		"INVALID":                        0,
		"BUCKETS":                        1,
		"BUCKETS_BY_VOTER":               2,
		"BUCKETS_BY_CANDIDATE":           3,
		"CANDIDATES":                     4,
		"CANDIDATE_BY_NAME":              5,
		"BUCKETS_BY_INDEXES":             6,
		"CANDIDATE_BY_ADDRESS":           7,
		"TOTAL_STAKING_AMOUNT":           8,
		"BUCKETS_COUNT":                  9,
		"COMPOSITE_BUCKETS":              20,
		"COMPOSITE_BUCKETS_BY_VOTER":     21,
		"COMPOSITE_BUCKETS_BY_CANDIDATE": 22,
		"COMPOSITE_BUCKETS_BY_INDEXES":   23,
		"COMPOSITE_BUCKETS_COUNT":        24,
		"COMPOSITE_TOTAL_STAKING_AMOUNT": 25,
		"CONTRACT_STAKING_BUCKET_TYPES":  26,
	}
)

func (x ReadStakingDataMethod_Name) Enum() *ReadStakingDataMethod_Name {
	p := new(ReadStakingDataMethod_Name)
	*p = x
	return p
}

func (x ReadStakingDataMethod_Name) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ReadStakingDataMethod_Name) Descriptor() protoreflect.EnumDescriptor {
	return file_proto_api_read_state_proto_enumTypes[0].Descriptor()
}

func (ReadStakingDataMethod_Name) Type() protoreflect.EnumType {
	return &file_proto_api_read_state_proto_enumTypes[0]
}

func (x ReadStakingDataMethod_Name) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ReadStakingDataMethod_Name.Descriptor instead.
func (ReadStakingDataMethod_Name) EnumDescriptor() ([]byte, []int) {
	return file_proto_api_read_state_proto_rawDescGZIP(), []int{1, 0}
}

type PaginationParam struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Offset uint32 `protobuf:"varint,1,opt,name=offset,proto3" json:"offset,omitempty"`
	Limit  uint32 `protobuf:"varint,2,opt,name=limit,proto3" json:"limit,omitempty"`
}

func (x *PaginationParam) Reset() {
	*x = PaginationParam{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_api_read_state_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PaginationParam) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PaginationParam) ProtoMessage() {}

func (x *PaginationParam) ProtoReflect() protoreflect.Message {
	mi := &file_proto_api_read_state_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PaginationParam.ProtoReflect.Descriptor instead.
func (*PaginationParam) Descriptor() ([]byte, []int) {
	return file_proto_api_read_state_proto_rawDescGZIP(), []int{0}
}

func (x *PaginationParam) GetOffset() uint32 {
	if x != nil {
		return x.Offset
	}
	return 0
}

func (x *PaginationParam) GetLimit() uint32 {
	if x != nil {
		return x.Limit
	}
	return 0
}

type ReadStakingDataMethod struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Method ReadStakingDataMethod_Name `protobuf:"varint,1,opt,name=method,proto3,enum=iotexapi.ReadStakingDataMethod_Name" json:"method,omitempty"`
}

func (x *ReadStakingDataMethod) Reset() {
	*x = ReadStakingDataMethod{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_api_read_state_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReadStakingDataMethod) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReadStakingDataMethod) ProtoMessage() {}

func (x *ReadStakingDataMethod) ProtoReflect() protoreflect.Message {
	mi := &file_proto_api_read_state_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReadStakingDataMethod.ProtoReflect.Descriptor instead.
func (*ReadStakingDataMethod) Descriptor() ([]byte, []int) {
	return file_proto_api_read_state_proto_rawDescGZIP(), []int{1}
}

func (x *ReadStakingDataMethod) GetMethod() ReadStakingDataMethod_Name {
	if x != nil {
		return x.Method
	}
	return ReadStakingDataMethod_INVALID
}

type ReadStakingDataRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Request:
	//
	//	*ReadStakingDataRequest_Buckets
	//	*ReadStakingDataRequest_BucketsByVoter
	//	*ReadStakingDataRequest_BucketsByCandidate
	//	*ReadStakingDataRequest_Candidates_
	//	*ReadStakingDataRequest_CandidateByName_
	//	*ReadStakingDataRequest_BucketsByIndexes
	//	*ReadStakingDataRequest_CandidateByAddress_
	//	*ReadStakingDataRequest_TotalStakingAmount_
	//	*ReadStakingDataRequest_BucketsCount_
	//	*ReadStakingDataRequest_ContractStakingBucketTypes_
	Request isReadStakingDataRequest_Request `protobuf_oneof:"request"`
}

func (x *ReadStakingDataRequest) Reset() {
	*x = ReadStakingDataRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_api_read_state_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReadStakingDataRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReadStakingDataRequest) ProtoMessage() {}

func (x *ReadStakingDataRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_api_read_state_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReadStakingDataRequest.ProtoReflect.Descriptor instead.
func (*ReadStakingDataRequest) Descriptor() ([]byte, []int) {
	return file_proto_api_read_state_proto_rawDescGZIP(), []int{2}
}

func (m *ReadStakingDataRequest) GetRequest() isReadStakingDataRequest_Request {
	if m != nil {
		return m.Request
	}
	return nil
}

func (x *ReadStakingDataRequest) GetBuckets() *ReadStakingDataRequest_VoteBuckets {
	if x, ok := x.GetRequest().(*ReadStakingDataRequest_Buckets); ok {
		return x.Buckets
	}
	return nil
}

func (x *ReadStakingDataRequest) GetBucketsByVoter() *ReadStakingDataRequest_VoteBucketsByVoter {
	if x, ok := x.GetRequest().(*ReadStakingDataRequest_BucketsByVoter); ok {
		return x.BucketsByVoter
	}
	return nil
}

func (x *ReadStakingDataRequest) GetBucketsByCandidate() *ReadStakingDataRequest_VoteBucketsByCandidate {
	if x, ok := x.GetRequest().(*ReadStakingDataRequest_BucketsByCandidate); ok {
		return x.BucketsByCandidate
	}
	return nil
}

func (x *ReadStakingDataRequest) GetCandidates() *ReadStakingDataRequest_Candidates {
	if x, ok := x.GetRequest().(*ReadStakingDataRequest_Candidates_); ok {
		return x.Candidates
	}
	return nil
}

func (x *ReadStakingDataRequest) GetCandidateByName() *ReadStakingDataRequest_CandidateByName {
	if x, ok := x.GetRequest().(*ReadStakingDataRequest_CandidateByName_); ok {
		return x.CandidateByName
	}
	return nil
}

func (x *ReadStakingDataRequest) GetBucketsByIndexes() *ReadStakingDataRequest_VoteBucketsByIndexes {
	if x, ok := x.GetRequest().(*ReadStakingDataRequest_BucketsByIndexes); ok {
		return x.BucketsByIndexes
	}
	return nil
}

func (x *ReadStakingDataRequest) GetCandidateByAddress() *ReadStakingDataRequest_CandidateByAddress {
	if x, ok := x.GetRequest().(*ReadStakingDataRequest_CandidateByAddress_); ok {
		return x.CandidateByAddress
	}
	return nil
}

func (x *ReadStakingDataRequest) GetTotalStakingAmount() *ReadStakingDataRequest_TotalStakingAmount {
	if x, ok := x.GetRequest().(*ReadStakingDataRequest_TotalStakingAmount_); ok {
		return x.TotalStakingAmount
	}
	return nil
}

func (x *ReadStakingDataRequest) GetBucketsCount() *ReadStakingDataRequest_BucketsCount {
	if x, ok := x.GetRequest().(*ReadStakingDataRequest_BucketsCount_); ok {
		return x.BucketsCount
	}
	return nil
}

func (x *ReadStakingDataRequest) GetContractStakingBucketTypes() *ReadStakingDataRequest_ContractStakingBucketTypes {
	if x, ok := x.GetRequest().(*ReadStakingDataRequest_ContractStakingBucketTypes_); ok {
		return x.ContractStakingBucketTypes
	}
	return nil
}

type isReadStakingDataRequest_Request interface {
	isReadStakingDataRequest_Request()
}

type ReadStakingDataRequest_Buckets struct {
	Buckets *ReadStakingDataRequest_VoteBuckets `protobuf:"bytes,1,opt,name=buckets,proto3,oneof"`
}

type ReadStakingDataRequest_BucketsByVoter struct {
	BucketsByVoter *ReadStakingDataRequest_VoteBucketsByVoter `protobuf:"bytes,2,opt,name=bucketsByVoter,proto3,oneof"`
}

type ReadStakingDataRequest_BucketsByCandidate struct {
	BucketsByCandidate *ReadStakingDataRequest_VoteBucketsByCandidate `protobuf:"bytes,3,opt,name=bucketsByCandidate,proto3,oneof"`
}

type ReadStakingDataRequest_Candidates_ struct {
	Candidates *ReadStakingDataRequest_Candidates `protobuf:"bytes,4,opt,name=candidates,proto3,oneof"`
}

type ReadStakingDataRequest_CandidateByName_ struct {
	CandidateByName *ReadStakingDataRequest_CandidateByName `protobuf:"bytes,5,opt,name=candidateByName,proto3,oneof"`
}

type ReadStakingDataRequest_BucketsByIndexes struct {
	BucketsByIndexes *ReadStakingDataRequest_VoteBucketsByIndexes `protobuf:"bytes,6,opt,name=bucketsByIndexes,proto3,oneof"`
}

type ReadStakingDataRequest_CandidateByAddress_ struct {
	CandidateByAddress *ReadStakingDataRequest_CandidateByAddress `protobuf:"bytes,7,opt,name=candidateByAddress,proto3,oneof"`
}

type ReadStakingDataRequest_TotalStakingAmount_ struct {
	TotalStakingAmount *ReadStakingDataRequest_TotalStakingAmount `protobuf:"bytes,8,opt,name=totalStakingAmount,proto3,oneof"`
}

type ReadStakingDataRequest_BucketsCount_ struct {
	BucketsCount *ReadStakingDataRequest_BucketsCount `protobuf:"bytes,9,opt,name=bucketsCount,proto3,oneof"`
}

type ReadStakingDataRequest_ContractStakingBucketTypes_ struct {
	ContractStakingBucketTypes *ReadStakingDataRequest_ContractStakingBucketTypes `protobuf:"bytes,10,opt,name=contractStakingBucketTypes,proto3,oneof"`
}

func (*ReadStakingDataRequest_Buckets) isReadStakingDataRequest_Request() {}

func (*ReadStakingDataRequest_BucketsByVoter) isReadStakingDataRequest_Request() {}

func (*ReadStakingDataRequest_BucketsByCandidate) isReadStakingDataRequest_Request() {}

func (*ReadStakingDataRequest_Candidates_) isReadStakingDataRequest_Request() {}

func (*ReadStakingDataRequest_CandidateByName_) isReadStakingDataRequest_Request() {}

func (*ReadStakingDataRequest_BucketsByIndexes) isReadStakingDataRequest_Request() {}

func (*ReadStakingDataRequest_CandidateByAddress_) isReadStakingDataRequest_Request() {}

func (*ReadStakingDataRequest_TotalStakingAmount_) isReadStakingDataRequest_Request() {}

func (*ReadStakingDataRequest_BucketsCount_) isReadStakingDataRequest_Request() {}

func (*ReadStakingDataRequest_ContractStakingBucketTypes_) isReadStakingDataRequest_Request() {}

type ReadStakingDataRequest_VoteBuckets struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Pagination *PaginationParam `protobuf:"bytes,1,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (x *ReadStakingDataRequest_VoteBuckets) Reset() {
	*x = ReadStakingDataRequest_VoteBuckets{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_api_read_state_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReadStakingDataRequest_VoteBuckets) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReadStakingDataRequest_VoteBuckets) ProtoMessage() {}

func (x *ReadStakingDataRequest_VoteBuckets) ProtoReflect() protoreflect.Message {
	mi := &file_proto_api_read_state_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReadStakingDataRequest_VoteBuckets.ProtoReflect.Descriptor instead.
func (*ReadStakingDataRequest_VoteBuckets) Descriptor() ([]byte, []int) {
	return file_proto_api_read_state_proto_rawDescGZIP(), []int{2, 0}
}

func (x *ReadStakingDataRequest_VoteBuckets) GetPagination() *PaginationParam {
	if x != nil {
		return x.Pagination
	}
	return nil
}

type ReadStakingDataRequest_VoteBucketsByVoter struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	VoterAddress string           `protobuf:"bytes,1,opt,name=voterAddress,proto3" json:"voterAddress,omitempty"`
	Pagination   *PaginationParam `protobuf:"bytes,2,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (x *ReadStakingDataRequest_VoteBucketsByVoter) Reset() {
	*x = ReadStakingDataRequest_VoteBucketsByVoter{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_api_read_state_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReadStakingDataRequest_VoteBucketsByVoter) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReadStakingDataRequest_VoteBucketsByVoter) ProtoMessage() {}

func (x *ReadStakingDataRequest_VoteBucketsByVoter) ProtoReflect() protoreflect.Message {
	mi := &file_proto_api_read_state_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReadStakingDataRequest_VoteBucketsByVoter.ProtoReflect.Descriptor instead.
func (*ReadStakingDataRequest_VoteBucketsByVoter) Descriptor() ([]byte, []int) {
	return file_proto_api_read_state_proto_rawDescGZIP(), []int{2, 1}
}

func (x *ReadStakingDataRequest_VoteBucketsByVoter) GetVoterAddress() string {
	if x != nil {
		return x.VoterAddress
	}
	return ""
}

func (x *ReadStakingDataRequest_VoteBucketsByVoter) GetPagination() *PaginationParam {
	if x != nil {
		return x.Pagination
	}
	return nil
}

type ReadStakingDataRequest_VoteBucketsByCandidate struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CandName   string           `protobuf:"bytes,1,opt,name=candName,proto3" json:"candName,omitempty"`
	Pagination *PaginationParam `protobuf:"bytes,2,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (x *ReadStakingDataRequest_VoteBucketsByCandidate) Reset() {
	*x = ReadStakingDataRequest_VoteBucketsByCandidate{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_api_read_state_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReadStakingDataRequest_VoteBucketsByCandidate) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReadStakingDataRequest_VoteBucketsByCandidate) ProtoMessage() {}

func (x *ReadStakingDataRequest_VoteBucketsByCandidate) ProtoReflect() protoreflect.Message {
	mi := &file_proto_api_read_state_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReadStakingDataRequest_VoteBucketsByCandidate.ProtoReflect.Descriptor instead.
func (*ReadStakingDataRequest_VoteBucketsByCandidate) Descriptor() ([]byte, []int) {
	return file_proto_api_read_state_proto_rawDescGZIP(), []int{2, 2}
}

func (x *ReadStakingDataRequest_VoteBucketsByCandidate) GetCandName() string {
	if x != nil {
		return x.CandName
	}
	return ""
}

func (x *ReadStakingDataRequest_VoteBucketsByCandidate) GetPagination() *PaginationParam {
	if x != nil {
		return x.Pagination
	}
	return nil
}

type ReadStakingDataRequest_Candidates struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Pagination *PaginationParam `protobuf:"bytes,1,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (x *ReadStakingDataRequest_Candidates) Reset() {
	*x = ReadStakingDataRequest_Candidates{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_api_read_state_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReadStakingDataRequest_Candidates) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReadStakingDataRequest_Candidates) ProtoMessage() {}

func (x *ReadStakingDataRequest_Candidates) ProtoReflect() protoreflect.Message {
	mi := &file_proto_api_read_state_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReadStakingDataRequest_Candidates.ProtoReflect.Descriptor instead.
func (*ReadStakingDataRequest_Candidates) Descriptor() ([]byte, []int) {
	return file_proto_api_read_state_proto_rawDescGZIP(), []int{2, 3}
}

func (x *ReadStakingDataRequest_Candidates) GetPagination() *PaginationParam {
	if x != nil {
		return x.Pagination
	}
	return nil
}

type ReadStakingDataRequest_CandidateByName struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CandName string `protobuf:"bytes,1,opt,name=candName,proto3" json:"candName,omitempty"`
}

func (x *ReadStakingDataRequest_CandidateByName) Reset() {
	*x = ReadStakingDataRequest_CandidateByName{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_api_read_state_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReadStakingDataRequest_CandidateByName) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReadStakingDataRequest_CandidateByName) ProtoMessage() {}

func (x *ReadStakingDataRequest_CandidateByName) ProtoReflect() protoreflect.Message {
	mi := &file_proto_api_read_state_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReadStakingDataRequest_CandidateByName.ProtoReflect.Descriptor instead.
func (*ReadStakingDataRequest_CandidateByName) Descriptor() ([]byte, []int) {
	return file_proto_api_read_state_proto_rawDescGZIP(), []int{2, 4}
}

func (x *ReadStakingDataRequest_CandidateByName) GetCandName() string {
	if x != nil {
		return x.CandName
	}
	return ""
}

type ReadStakingDataRequest_VoteBucketsByIndexes struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Index []uint64 `protobuf:"varint,1,rep,packed,name=index,proto3" json:"index,omitempty"`
}

func (x *ReadStakingDataRequest_VoteBucketsByIndexes) Reset() {
	*x = ReadStakingDataRequest_VoteBucketsByIndexes{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_api_read_state_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReadStakingDataRequest_VoteBucketsByIndexes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReadStakingDataRequest_VoteBucketsByIndexes) ProtoMessage() {}

func (x *ReadStakingDataRequest_VoteBucketsByIndexes) ProtoReflect() protoreflect.Message {
	mi := &file_proto_api_read_state_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReadStakingDataRequest_VoteBucketsByIndexes.ProtoReflect.Descriptor instead.
func (*ReadStakingDataRequest_VoteBucketsByIndexes) Descriptor() ([]byte, []int) {
	return file_proto_api_read_state_proto_rawDescGZIP(), []int{2, 5}
}

func (x *ReadStakingDataRequest_VoteBucketsByIndexes) GetIndex() []uint64 {
	if x != nil {
		return x.Index
	}
	return nil
}

type ReadStakingDataRequest_CandidateByAddress struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	OwnerAddr string `protobuf:"bytes,1,opt,name=ownerAddr,proto3" json:"ownerAddr,omitempty"`
	Id        string `protobuf:"bytes,2,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *ReadStakingDataRequest_CandidateByAddress) Reset() {
	*x = ReadStakingDataRequest_CandidateByAddress{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_api_read_state_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReadStakingDataRequest_CandidateByAddress) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReadStakingDataRequest_CandidateByAddress) ProtoMessage() {}

func (x *ReadStakingDataRequest_CandidateByAddress) ProtoReflect() protoreflect.Message {
	mi := &file_proto_api_read_state_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReadStakingDataRequest_CandidateByAddress.ProtoReflect.Descriptor instead.
func (*ReadStakingDataRequest_CandidateByAddress) Descriptor() ([]byte, []int) {
	return file_proto_api_read_state_proto_rawDescGZIP(), []int{2, 6}
}

func (x *ReadStakingDataRequest_CandidateByAddress) GetOwnerAddr() string {
	if x != nil {
		return x.OwnerAddr
	}
	return ""
}

func (x *ReadStakingDataRequest_CandidateByAddress) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

type ReadStakingDataRequest_TotalStakingAmount struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *ReadStakingDataRequest_TotalStakingAmount) Reset() {
	*x = ReadStakingDataRequest_TotalStakingAmount{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_api_read_state_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReadStakingDataRequest_TotalStakingAmount) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReadStakingDataRequest_TotalStakingAmount) ProtoMessage() {}

func (x *ReadStakingDataRequest_TotalStakingAmount) ProtoReflect() protoreflect.Message {
	mi := &file_proto_api_read_state_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReadStakingDataRequest_TotalStakingAmount.ProtoReflect.Descriptor instead.
func (*ReadStakingDataRequest_TotalStakingAmount) Descriptor() ([]byte, []int) {
	return file_proto_api_read_state_proto_rawDescGZIP(), []int{2, 7}
}

type ReadStakingDataRequest_BucketsCount struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *ReadStakingDataRequest_BucketsCount) Reset() {
	*x = ReadStakingDataRequest_BucketsCount{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_api_read_state_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReadStakingDataRequest_BucketsCount) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReadStakingDataRequest_BucketsCount) ProtoMessage() {}

func (x *ReadStakingDataRequest_BucketsCount) ProtoReflect() protoreflect.Message {
	mi := &file_proto_api_read_state_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReadStakingDataRequest_BucketsCount.ProtoReflect.Descriptor instead.
func (*ReadStakingDataRequest_BucketsCount) Descriptor() ([]byte, []int) {
	return file_proto_api_read_state_proto_rawDescGZIP(), []int{2, 8}
}

type ReadStakingDataRequest_ContractStakingBucketTypes struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ContractAddress string `protobuf:"bytes,1,opt,name=contractAddress,proto3" json:"contractAddress,omitempty"`
}

func (x *ReadStakingDataRequest_ContractStakingBucketTypes) Reset() {
	*x = ReadStakingDataRequest_ContractStakingBucketTypes{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_api_read_state_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReadStakingDataRequest_ContractStakingBucketTypes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReadStakingDataRequest_ContractStakingBucketTypes) ProtoMessage() {}

func (x *ReadStakingDataRequest_ContractStakingBucketTypes) ProtoReflect() protoreflect.Message {
	mi := &file_proto_api_read_state_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReadStakingDataRequest_ContractStakingBucketTypes.ProtoReflect.Descriptor instead.
func (*ReadStakingDataRequest_ContractStakingBucketTypes) Descriptor() ([]byte, []int) {
	return file_proto_api_read_state_proto_rawDescGZIP(), []int{2, 9}
}

func (x *ReadStakingDataRequest_ContractStakingBucketTypes) GetContractAddress() string {
	if x != nil {
		return x.ContractAddress
	}
	return ""
}

var File_proto_api_read_state_proto protoreflect.FileDescriptor

var file_proto_api_read_state_proto_rawDesc = []byte{
	0x0a, 0x1a, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x72, 0x65, 0x61, 0x64,
	0x5f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x08, 0x69, 0x6f,
	0x74, 0x65, 0x78, 0x61, 0x70, 0x69, 0x22, 0x3f, 0x0a, 0x0f, 0x50, 0x61, 0x67, 0x69, 0x6e, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x12, 0x16, 0x0a, 0x06, 0x6f, 0x66, 0x66,
	0x73, 0x65, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x06, 0x6f, 0x66, 0x66, 0x73, 0x65,
	0x74, 0x12, 0x14, 0x0a, 0x05, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x05, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x22, 0x8f, 0x04, 0x0a, 0x15, 0x52, 0x65, 0x61, 0x64,
	0x53, 0x74, 0x61, 0x6b, 0x69, 0x6e, 0x67, 0x44, 0x61, 0x74, 0x61, 0x4d, 0x65, 0x74, 0x68, 0x6f,
	0x64, 0x12, 0x3c, 0x0a, 0x06, 0x6d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0e, 0x32, 0x24, 0x2e, 0x69, 0x6f, 0x74, 0x65, 0x78, 0x61, 0x70, 0x69, 0x2e, 0x52, 0x65, 0x61,
	0x64, 0x53, 0x74, 0x61, 0x6b, 0x69, 0x6e, 0x67, 0x44, 0x61, 0x74, 0x61, 0x4d, 0x65, 0x74, 0x68,
	0x6f, 0x64, 0x2e, 0x4e, 0x61, 0x6d, 0x65, 0x52, 0x06, 0x6d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x22,
	0xb7, 0x03, 0x0a, 0x04, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x0b, 0x0a, 0x07, 0x49, 0x4e, 0x56, 0x41,
	0x4c, 0x49, 0x44, 0x10, 0x00, 0x12, 0x0b, 0x0a, 0x07, 0x42, 0x55, 0x43, 0x4b, 0x45, 0x54, 0x53,
	0x10, 0x01, 0x12, 0x14, 0x0a, 0x10, 0x42, 0x55, 0x43, 0x4b, 0x45, 0x54, 0x53, 0x5f, 0x42, 0x59,
	0x5f, 0x56, 0x4f, 0x54, 0x45, 0x52, 0x10, 0x02, 0x12, 0x18, 0x0a, 0x14, 0x42, 0x55, 0x43, 0x4b,
	0x45, 0x54, 0x53, 0x5f, 0x42, 0x59, 0x5f, 0x43, 0x41, 0x4e, 0x44, 0x49, 0x44, 0x41, 0x54, 0x45,
	0x10, 0x03, 0x12, 0x0e, 0x0a, 0x0a, 0x43, 0x41, 0x4e, 0x44, 0x49, 0x44, 0x41, 0x54, 0x45, 0x53,
	0x10, 0x04, 0x12, 0x15, 0x0a, 0x11, 0x43, 0x41, 0x4e, 0x44, 0x49, 0x44, 0x41, 0x54, 0x45, 0x5f,
	0x42, 0x59, 0x5f, 0x4e, 0x41, 0x4d, 0x45, 0x10, 0x05, 0x12, 0x16, 0x0a, 0x12, 0x42, 0x55, 0x43,
	0x4b, 0x45, 0x54, 0x53, 0x5f, 0x42, 0x59, 0x5f, 0x49, 0x4e, 0x44, 0x45, 0x58, 0x45, 0x53, 0x10,
	0x06, 0x12, 0x18, 0x0a, 0x14, 0x43, 0x41, 0x4e, 0x44, 0x49, 0x44, 0x41, 0x54, 0x45, 0x5f, 0x42,
	0x59, 0x5f, 0x41, 0x44, 0x44, 0x52, 0x45, 0x53, 0x53, 0x10, 0x07, 0x12, 0x18, 0x0a, 0x14, 0x54,
	0x4f, 0x54, 0x41, 0x4c, 0x5f, 0x53, 0x54, 0x41, 0x4b, 0x49, 0x4e, 0x47, 0x5f, 0x41, 0x4d, 0x4f,
	0x55, 0x4e, 0x54, 0x10, 0x08, 0x12, 0x11, 0x0a, 0x0d, 0x42, 0x55, 0x43, 0x4b, 0x45, 0x54, 0x53,
	0x5f, 0x43, 0x4f, 0x55, 0x4e, 0x54, 0x10, 0x09, 0x12, 0x15, 0x0a, 0x11, 0x43, 0x4f, 0x4d, 0x50,
	0x4f, 0x53, 0x49, 0x54, 0x45, 0x5f, 0x42, 0x55, 0x43, 0x4b, 0x45, 0x54, 0x53, 0x10, 0x14, 0x12,
	0x1e, 0x0a, 0x1a, 0x43, 0x4f, 0x4d, 0x50, 0x4f, 0x53, 0x49, 0x54, 0x45, 0x5f, 0x42, 0x55, 0x43,
	0x4b, 0x45, 0x54, 0x53, 0x5f, 0x42, 0x59, 0x5f, 0x56, 0x4f, 0x54, 0x45, 0x52, 0x10, 0x15, 0x12,
	0x22, 0x0a, 0x1e, 0x43, 0x4f, 0x4d, 0x50, 0x4f, 0x53, 0x49, 0x54, 0x45, 0x5f, 0x42, 0x55, 0x43,
	0x4b, 0x45, 0x54, 0x53, 0x5f, 0x42, 0x59, 0x5f, 0x43, 0x41, 0x4e, 0x44, 0x49, 0x44, 0x41, 0x54,
	0x45, 0x10, 0x16, 0x12, 0x20, 0x0a, 0x1c, 0x43, 0x4f, 0x4d, 0x50, 0x4f, 0x53, 0x49, 0x54, 0x45,
	0x5f, 0x42, 0x55, 0x43, 0x4b, 0x45, 0x54, 0x53, 0x5f, 0x42, 0x59, 0x5f, 0x49, 0x4e, 0x44, 0x45,
	0x58, 0x45, 0x53, 0x10, 0x17, 0x12, 0x1b, 0x0a, 0x17, 0x43, 0x4f, 0x4d, 0x50, 0x4f, 0x53, 0x49,
	0x54, 0x45, 0x5f, 0x42, 0x55, 0x43, 0x4b, 0x45, 0x54, 0x53, 0x5f, 0x43, 0x4f, 0x55, 0x4e, 0x54,
	0x10, 0x18, 0x12, 0x22, 0x0a, 0x1e, 0x43, 0x4f, 0x4d, 0x50, 0x4f, 0x53, 0x49, 0x54, 0x45, 0x5f,
	0x54, 0x4f, 0x54, 0x41, 0x4c, 0x5f, 0x53, 0x54, 0x41, 0x4b, 0x49, 0x4e, 0x47, 0x5f, 0x41, 0x4d,
	0x4f, 0x55, 0x4e, 0x54, 0x10, 0x19, 0x12, 0x21, 0x0a, 0x1d, 0x43, 0x4f, 0x4e, 0x54, 0x52, 0x41,
	0x43, 0x54, 0x5f, 0x53, 0x54, 0x41, 0x4b, 0x49, 0x4e, 0x47, 0x5f, 0x42, 0x55, 0x43, 0x4b, 0x45,
	0x54, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x53, 0x10, 0x1a, 0x22, 0xf3, 0x0c, 0x0a, 0x16, 0x52, 0x65,
	0x61, 0x64, 0x53, 0x74, 0x61, 0x6b, 0x69, 0x6e, 0x67, 0x44, 0x61, 0x74, 0x61, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x48, 0x0a, 0x07, 0x62, 0x75, 0x63, 0x6b, 0x65, 0x74, 0x73, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2c, 0x2e, 0x69, 0x6f, 0x74, 0x65, 0x78, 0x61, 0x70, 0x69,
	0x2e, 0x52, 0x65, 0x61, 0x64, 0x53, 0x74, 0x61, 0x6b, 0x69, 0x6e, 0x67, 0x44, 0x61, 0x74, 0x61,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x56, 0x6f, 0x74, 0x65, 0x42, 0x75, 0x63, 0x6b,
	0x65, 0x74, 0x73, 0x48, 0x00, 0x52, 0x07, 0x62, 0x75, 0x63, 0x6b, 0x65, 0x74, 0x73, 0x12, 0x5d,
	0x0a, 0x0e, 0x62, 0x75, 0x63, 0x6b, 0x65, 0x74, 0x73, 0x42, 0x79, 0x56, 0x6f, 0x74, 0x65, 0x72,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x33, 0x2e, 0x69, 0x6f, 0x74, 0x65, 0x78, 0x61, 0x70,
	0x69, 0x2e, 0x52, 0x65, 0x61, 0x64, 0x53, 0x74, 0x61, 0x6b, 0x69, 0x6e, 0x67, 0x44, 0x61, 0x74,
	0x61, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x56, 0x6f, 0x74, 0x65, 0x42, 0x75, 0x63,
	0x6b, 0x65, 0x74, 0x73, 0x42, 0x79, 0x56, 0x6f, 0x74, 0x65, 0x72, 0x48, 0x00, 0x52, 0x0e, 0x62,
	0x75, 0x63, 0x6b, 0x65, 0x74, 0x73, 0x42, 0x79, 0x56, 0x6f, 0x74, 0x65, 0x72, 0x12, 0x69, 0x0a,
	0x12, 0x62, 0x75, 0x63, 0x6b, 0x65, 0x74, 0x73, 0x42, 0x79, 0x43, 0x61, 0x6e, 0x64, 0x69, 0x64,
	0x61, 0x74, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x37, 0x2e, 0x69, 0x6f, 0x74, 0x65,
	0x78, 0x61, 0x70, 0x69, 0x2e, 0x52, 0x65, 0x61, 0x64, 0x53, 0x74, 0x61, 0x6b, 0x69, 0x6e, 0x67,
	0x44, 0x61, 0x74, 0x61, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x56, 0x6f, 0x74, 0x65,
	0x42, 0x75, 0x63, 0x6b, 0x65, 0x74, 0x73, 0x42, 0x79, 0x43, 0x61, 0x6e, 0x64, 0x69, 0x64, 0x61,
	0x74, 0x65, 0x48, 0x00, 0x52, 0x12, 0x62, 0x75, 0x63, 0x6b, 0x65, 0x74, 0x73, 0x42, 0x79, 0x43,
	0x61, 0x6e, 0x64, 0x69, 0x64, 0x61, 0x74, 0x65, 0x12, 0x4d, 0x0a, 0x0a, 0x63, 0x61, 0x6e, 0x64,
	0x69, 0x64, 0x61, 0x74, 0x65, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2b, 0x2e, 0x69,
	0x6f, 0x74, 0x65, 0x78, 0x61, 0x70, 0x69, 0x2e, 0x52, 0x65, 0x61, 0x64, 0x53, 0x74, 0x61, 0x6b,
	0x69, 0x6e, 0x67, 0x44, 0x61, 0x74, 0x61, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x43,
	0x61, 0x6e, 0x64, 0x69, 0x64, 0x61, 0x74, 0x65, 0x73, 0x48, 0x00, 0x52, 0x0a, 0x63, 0x61, 0x6e,
	0x64, 0x69, 0x64, 0x61, 0x74, 0x65, 0x73, 0x12, 0x5c, 0x0a, 0x0f, 0x63, 0x61, 0x6e, 0x64, 0x69,
	0x64, 0x61, 0x74, 0x65, 0x42, 0x79, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x30, 0x2e, 0x69, 0x6f, 0x74, 0x65, 0x78, 0x61, 0x70, 0x69, 0x2e, 0x52, 0x65, 0x61, 0x64,
	0x53, 0x74, 0x61, 0x6b, 0x69, 0x6e, 0x67, 0x44, 0x61, 0x74, 0x61, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x2e, 0x43, 0x61, 0x6e, 0x64, 0x69, 0x64, 0x61, 0x74, 0x65, 0x42, 0x79, 0x4e, 0x61,
	0x6d, 0x65, 0x48, 0x00, 0x52, 0x0f, 0x63, 0x61, 0x6e, 0x64, 0x69, 0x64, 0x61, 0x74, 0x65, 0x42,
	0x79, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x63, 0x0a, 0x10, 0x62, 0x75, 0x63, 0x6b, 0x65, 0x74, 0x73,
	0x42, 0x79, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x65, 0x73, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x35, 0x2e, 0x69, 0x6f, 0x74, 0x65, 0x78, 0x61, 0x70, 0x69, 0x2e, 0x52, 0x65, 0x61, 0x64, 0x53,
	0x74, 0x61, 0x6b, 0x69, 0x6e, 0x67, 0x44, 0x61, 0x74, 0x61, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x2e, 0x56, 0x6f, 0x74, 0x65, 0x42, 0x75, 0x63, 0x6b, 0x65, 0x74, 0x73, 0x42, 0x79, 0x49,
	0x6e, 0x64, 0x65, 0x78, 0x65, 0x73, 0x48, 0x00, 0x52, 0x10, 0x62, 0x75, 0x63, 0x6b, 0x65, 0x74,
	0x73, 0x42, 0x79, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x65, 0x73, 0x12, 0x65, 0x0a, 0x12, 0x63, 0x61,
	0x6e, 0x64, 0x69, 0x64, 0x61, 0x74, 0x65, 0x42, 0x79, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73,
	0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x33, 0x2e, 0x69, 0x6f, 0x74, 0x65, 0x78, 0x61, 0x70,
	0x69, 0x2e, 0x52, 0x65, 0x61, 0x64, 0x53, 0x74, 0x61, 0x6b, 0x69, 0x6e, 0x67, 0x44, 0x61, 0x74,
	0x61, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x43, 0x61, 0x6e, 0x64, 0x69, 0x64, 0x61,
	0x74, 0x65, 0x42, 0x79, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x48, 0x00, 0x52, 0x12, 0x63,
	0x61, 0x6e, 0x64, 0x69, 0x64, 0x61, 0x74, 0x65, 0x42, 0x79, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73,
	0x73, 0x12, 0x65, 0x0a, 0x12, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x53, 0x74, 0x61, 0x6b, 0x69, 0x6e,
	0x67, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x33, 0x2e,
	0x69, 0x6f, 0x74, 0x65, 0x78, 0x61, 0x70, 0x69, 0x2e, 0x52, 0x65, 0x61, 0x64, 0x53, 0x74, 0x61,
	0x6b, 0x69, 0x6e, 0x67, 0x44, 0x61, 0x74, 0x61, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e,
	0x54, 0x6f, 0x74, 0x61, 0x6c, 0x53, 0x74, 0x61, 0x6b, 0x69, 0x6e, 0x67, 0x41, 0x6d, 0x6f, 0x75,
	0x6e, 0x74, 0x48, 0x00, 0x52, 0x12, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x53, 0x74, 0x61, 0x6b, 0x69,
	0x6e, 0x67, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x53, 0x0a, 0x0c, 0x62, 0x75, 0x63, 0x6b,
	0x65, 0x74, 0x73, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2d,
	0x2e, 0x69, 0x6f, 0x74, 0x65, 0x78, 0x61, 0x70, 0x69, 0x2e, 0x52, 0x65, 0x61, 0x64, 0x53, 0x74,
	0x61, 0x6b, 0x69, 0x6e, 0x67, 0x44, 0x61, 0x74, 0x61, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x2e, 0x42, 0x75, 0x63, 0x6b, 0x65, 0x74, 0x73, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x48, 0x00, 0x52,
	0x0c, 0x62, 0x75, 0x63, 0x6b, 0x65, 0x74, 0x73, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x7d, 0x0a,
	0x1a, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x53, 0x74, 0x61, 0x6b, 0x69, 0x6e, 0x67,
	0x42, 0x75, 0x63, 0x6b, 0x65, 0x74, 0x54, 0x79, 0x70, 0x65, 0x73, 0x18, 0x0a, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x3b, 0x2e, 0x69, 0x6f, 0x74, 0x65, 0x78, 0x61, 0x70, 0x69, 0x2e, 0x52, 0x65, 0x61,
	0x64, 0x53, 0x74, 0x61, 0x6b, 0x69, 0x6e, 0x67, 0x44, 0x61, 0x74, 0x61, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x2e, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x53, 0x74, 0x61, 0x6b,
	0x69, 0x6e, 0x67, 0x42, 0x75, 0x63, 0x6b, 0x65, 0x74, 0x54, 0x79, 0x70, 0x65, 0x73, 0x48, 0x00,
	0x52, 0x1a, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x53, 0x74, 0x61, 0x6b, 0x69, 0x6e,
	0x67, 0x42, 0x75, 0x63, 0x6b, 0x65, 0x74, 0x54, 0x79, 0x70, 0x65, 0x73, 0x1a, 0x48, 0x0a, 0x0b,
	0x56, 0x6f, 0x74, 0x65, 0x42, 0x75, 0x63, 0x6b, 0x65, 0x74, 0x73, 0x12, 0x39, 0x0a, 0x0a, 0x70,
	0x61, 0x67, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x19, 0x2e, 0x69, 0x6f, 0x74, 0x65, 0x78, 0x61, 0x70, 0x69, 0x2e, 0x50, 0x61, 0x67, 0x69, 0x6e,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x52, 0x0a, 0x70, 0x61, 0x67, 0x69,
	0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x1a, 0x73, 0x0a, 0x12, 0x56, 0x6f, 0x74, 0x65, 0x42, 0x75,
	0x63, 0x6b, 0x65, 0x74, 0x73, 0x42, 0x79, 0x56, 0x6f, 0x74, 0x65, 0x72, 0x12, 0x22, 0x0a, 0x0c,
	0x76, 0x6f, 0x74, 0x65, 0x72, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0c, 0x76, 0x6f, 0x74, 0x65, 0x72, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73,
	0x12, 0x39, 0x0a, 0x0a, 0x70, 0x61, 0x67, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x69, 0x6f, 0x74, 0x65, 0x78, 0x61, 0x70, 0x69, 0x2e,
	0x50, 0x61, 0x67, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x52,
	0x0a, 0x70, 0x61, 0x67, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x1a, 0x6f, 0x0a, 0x16, 0x56,
	0x6f, 0x74, 0x65, 0x42, 0x75, 0x63, 0x6b, 0x65, 0x74, 0x73, 0x42, 0x79, 0x43, 0x61, 0x6e, 0x64,
	0x69, 0x64, 0x61, 0x74, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x63, 0x61, 0x6e, 0x64, 0x4e, 0x61, 0x6d,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x63, 0x61, 0x6e, 0x64, 0x4e, 0x61, 0x6d,
	0x65, 0x12, 0x39, 0x0a, 0x0a, 0x70, 0x61, 0x67, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x69, 0x6f, 0x74, 0x65, 0x78, 0x61, 0x70, 0x69,
	0x2e, 0x50, 0x61, 0x67, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x61, 0x72, 0x61, 0x6d,
	0x52, 0x0a, 0x70, 0x61, 0x67, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x1a, 0x47, 0x0a, 0x0a,
	0x43, 0x61, 0x6e, 0x64, 0x69, 0x64, 0x61, 0x74, 0x65, 0x73, 0x12, 0x39, 0x0a, 0x0a, 0x70, 0x61,
	0x67, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19,
	0x2e, 0x69, 0x6f, 0x74, 0x65, 0x78, 0x61, 0x70, 0x69, 0x2e, 0x50, 0x61, 0x67, 0x69, 0x6e, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x52, 0x0a, 0x70, 0x61, 0x67, 0x69, 0x6e,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x1a, 0x2d, 0x0a, 0x0f, 0x43, 0x61, 0x6e, 0x64, 0x69, 0x64, 0x61,
	0x74, 0x65, 0x42, 0x79, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x63, 0x61, 0x6e, 0x64,
	0x4e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x63, 0x61, 0x6e, 0x64,
	0x4e, 0x61, 0x6d, 0x65, 0x1a, 0x2c, 0x0a, 0x14, 0x56, 0x6f, 0x74, 0x65, 0x42, 0x75, 0x63, 0x6b,
	0x65, 0x74, 0x73, 0x42, 0x79, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x65, 0x73, 0x12, 0x14, 0x0a, 0x05,
	0x69, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x01, 0x20, 0x03, 0x28, 0x04, 0x52, 0x05, 0x69, 0x6e, 0x64,
	0x65, 0x78, 0x1a, 0x42, 0x0a, 0x12, 0x43, 0x61, 0x6e, 0x64, 0x69, 0x64, 0x61, 0x74, 0x65, 0x42,
	0x79, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x1c, 0x0a, 0x09, 0x6f, 0x77, 0x6e, 0x65,
	0x72, 0x41, 0x64, 0x64, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x6f, 0x77, 0x6e,
	0x65, 0x72, 0x41, 0x64, 0x64, 0x72, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x1a, 0x14, 0x0a, 0x12, 0x54, 0x6f, 0x74, 0x61, 0x6c, 0x53,
	0x74, 0x61, 0x6b, 0x69, 0x6e, 0x67, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x1a, 0x0e, 0x0a, 0x0c,
	0x42, 0x75, 0x63, 0x6b, 0x65, 0x74, 0x73, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x1a, 0x46, 0x0a, 0x1a,
	0x43, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x53, 0x74, 0x61, 0x6b, 0x69, 0x6e, 0x67, 0x42,
	0x75, 0x63, 0x6b, 0x65, 0x74, 0x54, 0x79, 0x70, 0x65, 0x73, 0x12, 0x28, 0x0a, 0x0f, 0x63, 0x6f,
	0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0f, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x41, 0x64, 0x64,
	0x72, 0x65, 0x73, 0x73, 0x42, 0x09, 0x0a, 0x07, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x42,
	0x59, 0x0a, 0x20, 0x63, 0x6f, 0x6d, 0x2e, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x69, 0x6f,
	0x74, 0x65, 0x78, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x2e, 0x67, 0x72, 0x70, 0x63, 0x2e,
	0x61, 0x70, 0x69, 0x50, 0x01, 0x5a, 0x33, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f,
	0x6d, 0x2f, 0x69, 0x6f, 0x74, 0x65, 0x78, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x2f, 0x69,
	0x6f, 0x74, 0x65, 0x78, 0x2d, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x67, 0x6f, 0x6c, 0x61, 0x6e,
	0x67, 0x2f, 0x69, 0x6f, 0x74, 0x65, 0x78, 0x61, 0x70, 0x69, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x33,
}

var (
	file_proto_api_read_state_proto_rawDescOnce sync.Once
	file_proto_api_read_state_proto_rawDescData = file_proto_api_read_state_proto_rawDesc
)

func file_proto_api_read_state_proto_rawDescGZIP() []byte {
	file_proto_api_read_state_proto_rawDescOnce.Do(func() {
		file_proto_api_read_state_proto_rawDescData = protoimpl.X.CompressGZIP(file_proto_api_read_state_proto_rawDescData)
	})
	return file_proto_api_read_state_proto_rawDescData
}

var file_proto_api_read_state_proto_enumTypes = make([]protoimpl.EnumInfo, 1)
var file_proto_api_read_state_proto_msgTypes = make([]protoimpl.MessageInfo, 13)
var file_proto_api_read_state_proto_goTypes = []any{
	(ReadStakingDataMethod_Name)(0),                           // 0: iotexapi.ReadStakingDataMethod.Name
	(*PaginationParam)(nil),                                   // 1: iotexapi.PaginationParam
	(*ReadStakingDataMethod)(nil),                             // 2: iotexapi.ReadStakingDataMethod
	(*ReadStakingDataRequest)(nil),                            // 3: iotexapi.ReadStakingDataRequest
	(*ReadStakingDataRequest_VoteBuckets)(nil),                // 4: iotexapi.ReadStakingDataRequest.VoteBuckets
	(*ReadStakingDataRequest_VoteBucketsByVoter)(nil),         // 5: iotexapi.ReadStakingDataRequest.VoteBucketsByVoter
	(*ReadStakingDataRequest_VoteBucketsByCandidate)(nil),     // 6: iotexapi.ReadStakingDataRequest.VoteBucketsByCandidate
	(*ReadStakingDataRequest_Candidates)(nil),                 // 7: iotexapi.ReadStakingDataRequest.Candidates
	(*ReadStakingDataRequest_CandidateByName)(nil),            // 8: iotexapi.ReadStakingDataRequest.CandidateByName
	(*ReadStakingDataRequest_VoteBucketsByIndexes)(nil),       // 9: iotexapi.ReadStakingDataRequest.VoteBucketsByIndexes
	(*ReadStakingDataRequest_CandidateByAddress)(nil),         // 10: iotexapi.ReadStakingDataRequest.CandidateByAddress
	(*ReadStakingDataRequest_TotalStakingAmount)(nil),         // 11: iotexapi.ReadStakingDataRequest.TotalStakingAmount
	(*ReadStakingDataRequest_BucketsCount)(nil),               // 12: iotexapi.ReadStakingDataRequest.BucketsCount
	(*ReadStakingDataRequest_ContractStakingBucketTypes)(nil), // 13: iotexapi.ReadStakingDataRequest.ContractStakingBucketTypes
}
var file_proto_api_read_state_proto_depIdxs = []int32{
	0,  // 0: iotexapi.ReadStakingDataMethod.method:type_name -> iotexapi.ReadStakingDataMethod.Name
	4,  // 1: iotexapi.ReadStakingDataRequest.buckets:type_name -> iotexapi.ReadStakingDataRequest.VoteBuckets
	5,  // 2: iotexapi.ReadStakingDataRequest.bucketsByVoter:type_name -> iotexapi.ReadStakingDataRequest.VoteBucketsByVoter
	6,  // 3: iotexapi.ReadStakingDataRequest.bucketsByCandidate:type_name -> iotexapi.ReadStakingDataRequest.VoteBucketsByCandidate
	7,  // 4: iotexapi.ReadStakingDataRequest.candidates:type_name -> iotexapi.ReadStakingDataRequest.Candidates
	8,  // 5: iotexapi.ReadStakingDataRequest.candidateByName:type_name -> iotexapi.ReadStakingDataRequest.CandidateByName
	9,  // 6: iotexapi.ReadStakingDataRequest.bucketsByIndexes:type_name -> iotexapi.ReadStakingDataRequest.VoteBucketsByIndexes
	10, // 7: iotexapi.ReadStakingDataRequest.candidateByAddress:type_name -> iotexapi.ReadStakingDataRequest.CandidateByAddress
	11, // 8: iotexapi.ReadStakingDataRequest.totalStakingAmount:type_name -> iotexapi.ReadStakingDataRequest.TotalStakingAmount
	12, // 9: iotexapi.ReadStakingDataRequest.bucketsCount:type_name -> iotexapi.ReadStakingDataRequest.BucketsCount
	13, // 10: iotexapi.ReadStakingDataRequest.contractStakingBucketTypes:type_name -> iotexapi.ReadStakingDataRequest.ContractStakingBucketTypes
	1,  // 11: iotexapi.ReadStakingDataRequest.VoteBuckets.pagination:type_name -> iotexapi.PaginationParam
	1,  // 12: iotexapi.ReadStakingDataRequest.VoteBucketsByVoter.pagination:type_name -> iotexapi.PaginationParam
	1,  // 13: iotexapi.ReadStakingDataRequest.VoteBucketsByCandidate.pagination:type_name -> iotexapi.PaginationParam
	1,  // 14: iotexapi.ReadStakingDataRequest.Candidates.pagination:type_name -> iotexapi.PaginationParam
	15, // [15:15] is the sub-list for method output_type
	15, // [15:15] is the sub-list for method input_type
	15, // [15:15] is the sub-list for extension type_name
	15, // [15:15] is the sub-list for extension extendee
	0,  // [0:15] is the sub-list for field type_name
}

func init() { file_proto_api_read_state_proto_init() }
func file_proto_api_read_state_proto_init() {
	if File_proto_api_read_state_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_proto_api_read_state_proto_msgTypes[0].Exporter = func(v any, i int) any {
			switch v := v.(*PaginationParam); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_api_read_state_proto_msgTypes[1].Exporter = func(v any, i int) any {
			switch v := v.(*ReadStakingDataMethod); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_api_read_state_proto_msgTypes[2].Exporter = func(v any, i int) any {
			switch v := v.(*ReadStakingDataRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_api_read_state_proto_msgTypes[3].Exporter = func(v any, i int) any {
			switch v := v.(*ReadStakingDataRequest_VoteBuckets); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_api_read_state_proto_msgTypes[4].Exporter = func(v any, i int) any {
			switch v := v.(*ReadStakingDataRequest_VoteBucketsByVoter); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_api_read_state_proto_msgTypes[5].Exporter = func(v any, i int) any {
			switch v := v.(*ReadStakingDataRequest_VoteBucketsByCandidate); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_api_read_state_proto_msgTypes[6].Exporter = func(v any, i int) any {
			switch v := v.(*ReadStakingDataRequest_Candidates); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_api_read_state_proto_msgTypes[7].Exporter = func(v any, i int) any {
			switch v := v.(*ReadStakingDataRequest_CandidateByName); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_api_read_state_proto_msgTypes[8].Exporter = func(v any, i int) any {
			switch v := v.(*ReadStakingDataRequest_VoteBucketsByIndexes); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_api_read_state_proto_msgTypes[9].Exporter = func(v any, i int) any {
			switch v := v.(*ReadStakingDataRequest_CandidateByAddress); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_api_read_state_proto_msgTypes[10].Exporter = func(v any, i int) any {
			switch v := v.(*ReadStakingDataRequest_TotalStakingAmount); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_api_read_state_proto_msgTypes[11].Exporter = func(v any, i int) any {
			switch v := v.(*ReadStakingDataRequest_BucketsCount); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_api_read_state_proto_msgTypes[12].Exporter = func(v any, i int) any {
			switch v := v.(*ReadStakingDataRequest_ContractStakingBucketTypes); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_proto_api_read_state_proto_msgTypes[2].OneofWrappers = []any{
		(*ReadStakingDataRequest_Buckets)(nil),
		(*ReadStakingDataRequest_BucketsByVoter)(nil),
		(*ReadStakingDataRequest_BucketsByCandidate)(nil),
		(*ReadStakingDataRequest_Candidates_)(nil),
		(*ReadStakingDataRequest_CandidateByName_)(nil),
		(*ReadStakingDataRequest_BucketsByIndexes)(nil),
		(*ReadStakingDataRequest_CandidateByAddress_)(nil),
		(*ReadStakingDataRequest_TotalStakingAmount_)(nil),
		(*ReadStakingDataRequest_BucketsCount_)(nil),
		(*ReadStakingDataRequest_ContractStakingBucketTypes_)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_proto_api_read_state_proto_rawDesc,
			NumEnums:      1,
			NumMessages:   13,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_proto_api_read_state_proto_goTypes,
		DependencyIndexes: file_proto_api_read_state_proto_depIdxs,
		EnumInfos:         file_proto_api_read_state_proto_enumTypes,
		MessageInfos:      file_proto_api_read_state_proto_msgTypes,
	}.Build()
	File_proto_api_read_state_proto = out.File
	file_proto_api_read_state_proto_rawDesc = nil
	file_proto_api_read_state_proto_goTypes = nil
	file_proto_api_read_state_proto_depIdxs = nil
}
