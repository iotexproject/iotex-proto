// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package iotexapi

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// APIServiceClient is the client API for APIService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type APIServiceClient interface {
	// get the address detail of an address
	GetAccount(ctx context.Context, in *GetAccountRequest, opts ...grpc.CallOption) (*GetAccountResponse, error)
	// get the address detail of multiple addresses
	GetAccounts(ctx context.Context, in *GetAccountsRequest, opts ...grpc.CallOption) (*GetAccountsResponse, error)
	// get action(s) by:
	// 1. start index and action count
	// 2. action hash
	// 3. address with start index and action count
	// 4. get unconfirmed actions by address with start index and action count
	// 5. block hash with start index and action count
	GetActions(ctx context.Context, in *GetActionsRequest, opts ...grpc.CallOption) (*GetActionsResponse, error)
	// get block metadata(s) by:
	// 1. start index and block count
	// 2. block hash
	GetBlockMetas(ctx context.Context, in *GetBlockMetasRequest, opts ...grpc.CallOption) (*GetBlockMetasResponse, error)
	// get chain metadata
	GetChainMeta(ctx context.Context, in *GetChainMetaRequest, opts ...grpc.CallOption) (*GetChainMetaResponse, error)
	// get server version
	GetServerMeta(ctx context.Context, in *GetServerMetaRequest, opts ...grpc.CallOption) (*GetServerMetaResponse, error)
	// sendAction
	SendAction(ctx context.Context, in *SendActionRequest, opts ...grpc.CallOption) (*SendActionResponse, error)
	// get receipt by action Hash
	GetReceiptByAction(ctx context.Context, in *GetReceiptByActionRequest, opts ...grpc.CallOption) (*GetReceiptByActionResponse, error)
	// TODO: read contract
	ReadContract(ctx context.Context, in *ReadContractRequest, opts ...grpc.CallOption) (*ReadContractResponse, error)
	// suggest gas price
	SuggestGasPrice(ctx context.Context, in *SuggestGasPriceRequest, opts ...grpc.CallOption) (*SuggestGasPriceResponse, error)
	// estimate gas for action, to be deprecated
	EstimateGasForAction(ctx context.Context, in *EstimateGasForActionRequest, opts ...grpc.CallOption) (*EstimateGasForActionResponse, error)
	// estimate gas for action and transfer not sealed
	EstimateActionGasConsumption(ctx context.Context, in *EstimateActionGasConsumptionRequest, opts ...grpc.CallOption) (*EstimateActionGasConsumptionResponse, error)
	// read state from blockchain
	ReadState(ctx context.Context, in *ReadStateRequest, opts ...grpc.CallOption) (*ReadStateResponse, error)
	// get epoch metadata
	GetEpochMeta(ctx context.Context, in *GetEpochMetaRequest, opts ...grpc.CallOption) (*GetEpochMetaResponse, error)
	// get raw blocks data
	GetRawBlocks(ctx context.Context, in *GetRawBlocksRequest, opts ...grpc.CallOption) (*GetRawBlocksResponse, error)
	// get logs filtered by contract address and topics
	GetLogs(ctx context.Context, in *GetLogsRequest, opts ...grpc.CallOption) (*GetLogsResponse, error)
	GetTransactionLogByActionHash(ctx context.Context, in *GetTransactionLogByActionHashRequest, opts ...grpc.CallOption) (*GetTransactionLogByActionHashResponse, error)
	GetTransactionLogByBlockHeight(ctx context.Context, in *GetTransactionLogByBlockHeightRequest, opts ...grpc.CallOption) (*GetTransactionLogByBlockHeightResponse, error)
	// get block info in stream
	StreamBlocks(ctx context.Context, in *StreamBlocksRequest, opts ...grpc.CallOption) (APIService_StreamBlocksClient, error)
	// get logs filtered by contract address and topics in stream
	StreamLogs(ctx context.Context, in *StreamLogsRequest, opts ...grpc.CallOption) (APIService_StreamLogsClient, error)
	// get actions from act pool
	GetActPoolActions(ctx context.Context, in *GetActPoolActionsRequest, opts ...grpc.CallOption) (*GetActPoolActionsResponse, error)
	// Deprecated
	GetEvmTransfersByActionHash(ctx context.Context, in *GetEvmTransfersByActionHashRequest, opts ...grpc.CallOption) (*GetEvmTransfersByActionHashResponse, error)
	// Deprecated
	GetEvmTransfersByBlockHeight(ctx context.Context, in *GetEvmTransfersByBlockHeightRequest, opts ...grpc.CallOption) (*GetEvmTransfersByBlockHeightResponse, error)
	// Deprecated
	GetElectionBuckets(ctx context.Context, in *GetElectionBucketsRequest, opts ...grpc.CallOption) (*GetElectionBucketsResponse, error)
	ReadContractStorage(ctx context.Context, in *ReadContractStorageRequest, opts ...grpc.CallOption) (*ReadContractStorageResponse, error)
	TraceTransactionStructLogs(ctx context.Context, in *TraceTransactionStructLogsRequest, opts ...grpc.CallOption) (*TraceTransactionStructLogsResponse, error)
}

type aPIServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewAPIServiceClient(cc grpc.ClientConnInterface) APIServiceClient {
	return &aPIServiceClient{cc}
}

func (c *aPIServiceClient) GetAccount(ctx context.Context, in *GetAccountRequest, opts ...grpc.CallOption) (*GetAccountResponse, error) {
	out := new(GetAccountResponse)
	err := c.cc.Invoke(ctx, "/iotexapi.APIService/GetAccount", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *aPIServiceClient) GetAccounts(ctx context.Context, in *GetAccountsRequest, opts ...grpc.CallOption) (*GetAccountsResponse, error) {
	out := new(GetAccountsResponse)
	err := c.cc.Invoke(ctx, "/iotexapi.APIService/GetAccounts", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *aPIServiceClient) GetActions(ctx context.Context, in *GetActionsRequest, opts ...grpc.CallOption) (*GetActionsResponse, error) {
	out := new(GetActionsResponse)
	err := c.cc.Invoke(ctx, "/iotexapi.APIService/GetActions", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *aPIServiceClient) GetBlockMetas(ctx context.Context, in *GetBlockMetasRequest, opts ...grpc.CallOption) (*GetBlockMetasResponse, error) {
	out := new(GetBlockMetasResponse)
	err := c.cc.Invoke(ctx, "/iotexapi.APIService/GetBlockMetas", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *aPIServiceClient) GetChainMeta(ctx context.Context, in *GetChainMetaRequest, opts ...grpc.CallOption) (*GetChainMetaResponse, error) {
	out := new(GetChainMetaResponse)
	err := c.cc.Invoke(ctx, "/iotexapi.APIService/GetChainMeta", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *aPIServiceClient) GetServerMeta(ctx context.Context, in *GetServerMetaRequest, opts ...grpc.CallOption) (*GetServerMetaResponse, error) {
	out := new(GetServerMetaResponse)
	err := c.cc.Invoke(ctx, "/iotexapi.APIService/GetServerMeta", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *aPIServiceClient) SendAction(ctx context.Context, in *SendActionRequest, opts ...grpc.CallOption) (*SendActionResponse, error) {
	out := new(SendActionResponse)
	err := c.cc.Invoke(ctx, "/iotexapi.APIService/SendAction", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *aPIServiceClient) GetReceiptByAction(ctx context.Context, in *GetReceiptByActionRequest, opts ...grpc.CallOption) (*GetReceiptByActionResponse, error) {
	out := new(GetReceiptByActionResponse)
	err := c.cc.Invoke(ctx, "/iotexapi.APIService/GetReceiptByAction", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *aPIServiceClient) ReadContract(ctx context.Context, in *ReadContractRequest, opts ...grpc.CallOption) (*ReadContractResponse, error) {
	out := new(ReadContractResponse)
	err := c.cc.Invoke(ctx, "/iotexapi.APIService/ReadContract", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *aPIServiceClient) SuggestGasPrice(ctx context.Context, in *SuggestGasPriceRequest, opts ...grpc.CallOption) (*SuggestGasPriceResponse, error) {
	out := new(SuggestGasPriceResponse)
	err := c.cc.Invoke(ctx, "/iotexapi.APIService/SuggestGasPrice", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *aPIServiceClient) EstimateGasForAction(ctx context.Context, in *EstimateGasForActionRequest, opts ...grpc.CallOption) (*EstimateGasForActionResponse, error) {
	out := new(EstimateGasForActionResponse)
	err := c.cc.Invoke(ctx, "/iotexapi.APIService/EstimateGasForAction", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *aPIServiceClient) EstimateActionGasConsumption(ctx context.Context, in *EstimateActionGasConsumptionRequest, opts ...grpc.CallOption) (*EstimateActionGasConsumptionResponse, error) {
	out := new(EstimateActionGasConsumptionResponse)
	err := c.cc.Invoke(ctx, "/iotexapi.APIService/EstimateActionGasConsumption", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *aPIServiceClient) ReadState(ctx context.Context, in *ReadStateRequest, opts ...grpc.CallOption) (*ReadStateResponse, error) {
	out := new(ReadStateResponse)
	err := c.cc.Invoke(ctx, "/iotexapi.APIService/ReadState", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *aPIServiceClient) GetEpochMeta(ctx context.Context, in *GetEpochMetaRequest, opts ...grpc.CallOption) (*GetEpochMetaResponse, error) {
	out := new(GetEpochMetaResponse)
	err := c.cc.Invoke(ctx, "/iotexapi.APIService/GetEpochMeta", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *aPIServiceClient) GetRawBlocks(ctx context.Context, in *GetRawBlocksRequest, opts ...grpc.CallOption) (*GetRawBlocksResponse, error) {
	out := new(GetRawBlocksResponse)
	err := c.cc.Invoke(ctx, "/iotexapi.APIService/GetRawBlocks", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *aPIServiceClient) GetLogs(ctx context.Context, in *GetLogsRequest, opts ...grpc.CallOption) (*GetLogsResponse, error) {
	out := new(GetLogsResponse)
	err := c.cc.Invoke(ctx, "/iotexapi.APIService/GetLogs", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *aPIServiceClient) GetTransactionLogByActionHash(ctx context.Context, in *GetTransactionLogByActionHashRequest, opts ...grpc.CallOption) (*GetTransactionLogByActionHashResponse, error) {
	out := new(GetTransactionLogByActionHashResponse)
	err := c.cc.Invoke(ctx, "/iotexapi.APIService/GetTransactionLogByActionHash", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *aPIServiceClient) GetTransactionLogByBlockHeight(ctx context.Context, in *GetTransactionLogByBlockHeightRequest, opts ...grpc.CallOption) (*GetTransactionLogByBlockHeightResponse, error) {
	out := new(GetTransactionLogByBlockHeightResponse)
	err := c.cc.Invoke(ctx, "/iotexapi.APIService/GetTransactionLogByBlockHeight", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *aPIServiceClient) StreamBlocks(ctx context.Context, in *StreamBlocksRequest, opts ...grpc.CallOption) (APIService_StreamBlocksClient, error) {
	stream, err := c.cc.NewStream(ctx, &APIService_ServiceDesc.Streams[0], "/iotexapi.APIService/StreamBlocks", opts...)
	if err != nil {
		return nil, err
	}
	x := &aPIServiceStreamBlocksClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type APIService_StreamBlocksClient interface {
	Recv() (*StreamBlocksResponse, error)
	grpc.ClientStream
}

type aPIServiceStreamBlocksClient struct {
	grpc.ClientStream
}

func (x *aPIServiceStreamBlocksClient) Recv() (*StreamBlocksResponse, error) {
	m := new(StreamBlocksResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *aPIServiceClient) StreamLogs(ctx context.Context, in *StreamLogsRequest, opts ...grpc.CallOption) (APIService_StreamLogsClient, error) {
	stream, err := c.cc.NewStream(ctx, &APIService_ServiceDesc.Streams[1], "/iotexapi.APIService/StreamLogs", opts...)
	if err != nil {
		return nil, err
	}
	x := &aPIServiceStreamLogsClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type APIService_StreamLogsClient interface {
	Recv() (*StreamLogsResponse, error)
	grpc.ClientStream
}

type aPIServiceStreamLogsClient struct {
	grpc.ClientStream
}

func (x *aPIServiceStreamLogsClient) Recv() (*StreamLogsResponse, error) {
	m := new(StreamLogsResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *aPIServiceClient) GetActPoolActions(ctx context.Context, in *GetActPoolActionsRequest, opts ...grpc.CallOption) (*GetActPoolActionsResponse, error) {
	out := new(GetActPoolActionsResponse)
	err := c.cc.Invoke(ctx, "/iotexapi.APIService/GetActPoolActions", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *aPIServiceClient) GetEvmTransfersByActionHash(ctx context.Context, in *GetEvmTransfersByActionHashRequest, opts ...grpc.CallOption) (*GetEvmTransfersByActionHashResponse, error) {
	out := new(GetEvmTransfersByActionHashResponse)
	err := c.cc.Invoke(ctx, "/iotexapi.APIService/GetEvmTransfersByActionHash", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *aPIServiceClient) GetEvmTransfersByBlockHeight(ctx context.Context, in *GetEvmTransfersByBlockHeightRequest, opts ...grpc.CallOption) (*GetEvmTransfersByBlockHeightResponse, error) {
	out := new(GetEvmTransfersByBlockHeightResponse)
	err := c.cc.Invoke(ctx, "/iotexapi.APIService/GetEvmTransfersByBlockHeight", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *aPIServiceClient) GetElectionBuckets(ctx context.Context, in *GetElectionBucketsRequest, opts ...grpc.CallOption) (*GetElectionBucketsResponse, error) {
	out := new(GetElectionBucketsResponse)
	err := c.cc.Invoke(ctx, "/iotexapi.APIService/GetElectionBuckets", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *aPIServiceClient) ReadContractStorage(ctx context.Context, in *ReadContractStorageRequest, opts ...grpc.CallOption) (*ReadContractStorageResponse, error) {
	out := new(ReadContractStorageResponse)
	err := c.cc.Invoke(ctx, "/iotexapi.APIService/ReadContractStorage", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *aPIServiceClient) TraceTransactionStructLogs(ctx context.Context, in *TraceTransactionStructLogsRequest, opts ...grpc.CallOption) (*TraceTransactionStructLogsResponse, error) {
	out := new(TraceTransactionStructLogsResponse)
	err := c.cc.Invoke(ctx, "/iotexapi.APIService/TraceTransactionStructLogs", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// APIServiceServer is the server API for APIService service.
// All implementations should embed UnimplementedAPIServiceServer
// for forward compatibility
type APIServiceServer interface {
	// get the address detail of an address
	GetAccount(context.Context, *GetAccountRequest) (*GetAccountResponse, error)
	// get the address detail of multiple addresses
	GetAccounts(context.Context, *GetAccountsRequest) (*GetAccountsResponse, error)
	// get action(s) by:
	// 1. start index and action count
	// 2. action hash
	// 3. address with start index and action count
	// 4. get unconfirmed actions by address with start index and action count
	// 5. block hash with start index and action count
	GetActions(context.Context, *GetActionsRequest) (*GetActionsResponse, error)
	// get block metadata(s) by:
	// 1. start index and block count
	// 2. block hash
	GetBlockMetas(context.Context, *GetBlockMetasRequest) (*GetBlockMetasResponse, error)
	// get chain metadata
	GetChainMeta(context.Context, *GetChainMetaRequest) (*GetChainMetaResponse, error)
	// get server version
	GetServerMeta(context.Context, *GetServerMetaRequest) (*GetServerMetaResponse, error)
	// sendAction
	SendAction(context.Context, *SendActionRequest) (*SendActionResponse, error)
	// get receipt by action Hash
	GetReceiptByAction(context.Context, *GetReceiptByActionRequest) (*GetReceiptByActionResponse, error)
	// TODO: read contract
	ReadContract(context.Context, *ReadContractRequest) (*ReadContractResponse, error)
	// suggest gas price
	SuggestGasPrice(context.Context, *SuggestGasPriceRequest) (*SuggestGasPriceResponse, error)
	// estimate gas for action, to be deprecated
	EstimateGasForAction(context.Context, *EstimateGasForActionRequest) (*EstimateGasForActionResponse, error)
	// estimate gas for action and transfer not sealed
	EstimateActionGasConsumption(context.Context, *EstimateActionGasConsumptionRequest) (*EstimateActionGasConsumptionResponse, error)
	// read state from blockchain
	ReadState(context.Context, *ReadStateRequest) (*ReadStateResponse, error)
	// get epoch metadata
	GetEpochMeta(context.Context, *GetEpochMetaRequest) (*GetEpochMetaResponse, error)
	// get raw blocks data
	GetRawBlocks(context.Context, *GetRawBlocksRequest) (*GetRawBlocksResponse, error)
	// get logs filtered by contract address and topics
	GetLogs(context.Context, *GetLogsRequest) (*GetLogsResponse, error)
	GetTransactionLogByActionHash(context.Context, *GetTransactionLogByActionHashRequest) (*GetTransactionLogByActionHashResponse, error)
	GetTransactionLogByBlockHeight(context.Context, *GetTransactionLogByBlockHeightRequest) (*GetTransactionLogByBlockHeightResponse, error)
	// get block info in stream
	StreamBlocks(*StreamBlocksRequest, APIService_StreamBlocksServer) error
	// get logs filtered by contract address and topics in stream
	StreamLogs(*StreamLogsRequest, APIService_StreamLogsServer) error
	// get actions from act pool
	GetActPoolActions(context.Context, *GetActPoolActionsRequest) (*GetActPoolActionsResponse, error)
	// Deprecated
	GetEvmTransfersByActionHash(context.Context, *GetEvmTransfersByActionHashRequest) (*GetEvmTransfersByActionHashResponse, error)
	// Deprecated
	GetEvmTransfersByBlockHeight(context.Context, *GetEvmTransfersByBlockHeightRequest) (*GetEvmTransfersByBlockHeightResponse, error)
	// Deprecated
	GetElectionBuckets(context.Context, *GetElectionBucketsRequest) (*GetElectionBucketsResponse, error)
	ReadContractStorage(context.Context, *ReadContractStorageRequest) (*ReadContractStorageResponse, error)
	TraceTransactionStructLogs(context.Context, *TraceTransactionStructLogsRequest) (*TraceTransactionStructLogsResponse, error)
}

// UnimplementedAPIServiceServer should be embedded to have forward compatible implementations.
type UnimplementedAPIServiceServer struct {
}

func (UnimplementedAPIServiceServer) GetAccount(context.Context, *GetAccountRequest) (*GetAccountResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAccount not implemented")
}
func (UnimplementedAPIServiceServer) GetAccounts(context.Context, *GetAccountsRequest) (*GetAccountsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAccounts not implemented")
}
func (UnimplementedAPIServiceServer) GetActions(context.Context, *GetActionsRequest) (*GetActionsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetActions not implemented")
}
func (UnimplementedAPIServiceServer) GetBlockMetas(context.Context, *GetBlockMetasRequest) (*GetBlockMetasResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetBlockMetas not implemented")
}
func (UnimplementedAPIServiceServer) GetChainMeta(context.Context, *GetChainMetaRequest) (*GetChainMetaResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetChainMeta not implemented")
}
func (UnimplementedAPIServiceServer) GetServerMeta(context.Context, *GetServerMetaRequest) (*GetServerMetaResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetServerMeta not implemented")
}
func (UnimplementedAPIServiceServer) SendAction(context.Context, *SendActionRequest) (*SendActionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SendAction not implemented")
}
func (UnimplementedAPIServiceServer) GetReceiptByAction(context.Context, *GetReceiptByActionRequest) (*GetReceiptByActionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetReceiptByAction not implemented")
}
func (UnimplementedAPIServiceServer) ReadContract(context.Context, *ReadContractRequest) (*ReadContractResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ReadContract not implemented")
}
func (UnimplementedAPIServiceServer) SuggestGasPrice(context.Context, *SuggestGasPriceRequest) (*SuggestGasPriceResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SuggestGasPrice not implemented")
}
func (UnimplementedAPIServiceServer) EstimateGasForAction(context.Context, *EstimateGasForActionRequest) (*EstimateGasForActionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method EstimateGasForAction not implemented")
}
func (UnimplementedAPIServiceServer) EstimateActionGasConsumption(context.Context, *EstimateActionGasConsumptionRequest) (*EstimateActionGasConsumptionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method EstimateActionGasConsumption not implemented")
}
func (UnimplementedAPIServiceServer) ReadState(context.Context, *ReadStateRequest) (*ReadStateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ReadState not implemented")
}
func (UnimplementedAPIServiceServer) GetEpochMeta(context.Context, *GetEpochMetaRequest) (*GetEpochMetaResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetEpochMeta not implemented")
}
func (UnimplementedAPIServiceServer) GetRawBlocks(context.Context, *GetRawBlocksRequest) (*GetRawBlocksResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetRawBlocks not implemented")
}
func (UnimplementedAPIServiceServer) GetLogs(context.Context, *GetLogsRequest) (*GetLogsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetLogs not implemented")
}
func (UnimplementedAPIServiceServer) GetTransactionLogByActionHash(context.Context, *GetTransactionLogByActionHashRequest) (*GetTransactionLogByActionHashResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetTransactionLogByActionHash not implemented")
}
func (UnimplementedAPIServiceServer) GetTransactionLogByBlockHeight(context.Context, *GetTransactionLogByBlockHeightRequest) (*GetTransactionLogByBlockHeightResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetTransactionLogByBlockHeight not implemented")
}
func (UnimplementedAPIServiceServer) StreamBlocks(*StreamBlocksRequest, APIService_StreamBlocksServer) error {
	return status.Errorf(codes.Unimplemented, "method StreamBlocks not implemented")
}
func (UnimplementedAPIServiceServer) StreamLogs(*StreamLogsRequest, APIService_StreamLogsServer) error {
	return status.Errorf(codes.Unimplemented, "method StreamLogs not implemented")
}
func (UnimplementedAPIServiceServer) GetActPoolActions(context.Context, *GetActPoolActionsRequest) (*GetActPoolActionsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetActPoolActions not implemented")
}
func (UnimplementedAPIServiceServer) GetEvmTransfersByActionHash(context.Context, *GetEvmTransfersByActionHashRequest) (*GetEvmTransfersByActionHashResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetEvmTransfersByActionHash not implemented")
}
func (UnimplementedAPIServiceServer) GetEvmTransfersByBlockHeight(context.Context, *GetEvmTransfersByBlockHeightRequest) (*GetEvmTransfersByBlockHeightResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetEvmTransfersByBlockHeight not implemented")
}
func (UnimplementedAPIServiceServer) GetElectionBuckets(context.Context, *GetElectionBucketsRequest) (*GetElectionBucketsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetElectionBuckets not implemented")
}
func (UnimplementedAPIServiceServer) ReadContractStorage(context.Context, *ReadContractStorageRequest) (*ReadContractStorageResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ReadContractStorage not implemented")
}
func (UnimplementedAPIServiceServer) TraceTransactionStructLogs(context.Context, *TraceTransactionStructLogsRequest) (*TraceTransactionStructLogsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method TraceTransactionStructLogs not implemented")
}

// UnsafeAPIServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to APIServiceServer will
// result in compilation errors.
type UnsafeAPIServiceServer interface {
	mustEmbedUnimplementedAPIServiceServer()
}

func RegisterAPIServiceServer(s grpc.ServiceRegistrar, srv APIServiceServer) {
	s.RegisterService(&APIService_ServiceDesc, srv)
}

func _APIService_GetAccount_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetAccountRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(APIServiceServer).GetAccount(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/iotexapi.APIService/GetAccount",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(APIServiceServer).GetAccount(ctx, req.(*GetAccountRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _APIService_GetAccounts_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetAccountsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(APIServiceServer).GetAccounts(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/iotexapi.APIService/GetAccounts",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(APIServiceServer).GetAccounts(ctx, req.(*GetAccountsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _APIService_GetActions_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetActionsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(APIServiceServer).GetActions(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/iotexapi.APIService/GetActions",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(APIServiceServer).GetActions(ctx, req.(*GetActionsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _APIService_GetBlockMetas_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetBlockMetasRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(APIServiceServer).GetBlockMetas(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/iotexapi.APIService/GetBlockMetas",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(APIServiceServer).GetBlockMetas(ctx, req.(*GetBlockMetasRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _APIService_GetChainMeta_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetChainMetaRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(APIServiceServer).GetChainMeta(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/iotexapi.APIService/GetChainMeta",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(APIServiceServer).GetChainMeta(ctx, req.(*GetChainMetaRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _APIService_GetServerMeta_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetServerMetaRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(APIServiceServer).GetServerMeta(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/iotexapi.APIService/GetServerMeta",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(APIServiceServer).GetServerMeta(ctx, req.(*GetServerMetaRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _APIService_SendAction_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SendActionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(APIServiceServer).SendAction(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/iotexapi.APIService/SendAction",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(APIServiceServer).SendAction(ctx, req.(*SendActionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _APIService_GetReceiptByAction_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetReceiptByActionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(APIServiceServer).GetReceiptByAction(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/iotexapi.APIService/GetReceiptByAction",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(APIServiceServer).GetReceiptByAction(ctx, req.(*GetReceiptByActionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _APIService_ReadContract_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReadContractRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(APIServiceServer).ReadContract(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/iotexapi.APIService/ReadContract",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(APIServiceServer).ReadContract(ctx, req.(*ReadContractRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _APIService_SuggestGasPrice_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SuggestGasPriceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(APIServiceServer).SuggestGasPrice(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/iotexapi.APIService/SuggestGasPrice",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(APIServiceServer).SuggestGasPrice(ctx, req.(*SuggestGasPriceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _APIService_EstimateGasForAction_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EstimateGasForActionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(APIServiceServer).EstimateGasForAction(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/iotexapi.APIService/EstimateGasForAction",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(APIServiceServer).EstimateGasForAction(ctx, req.(*EstimateGasForActionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _APIService_EstimateActionGasConsumption_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EstimateActionGasConsumptionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(APIServiceServer).EstimateActionGasConsumption(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/iotexapi.APIService/EstimateActionGasConsumption",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(APIServiceServer).EstimateActionGasConsumption(ctx, req.(*EstimateActionGasConsumptionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _APIService_ReadState_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReadStateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(APIServiceServer).ReadState(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/iotexapi.APIService/ReadState",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(APIServiceServer).ReadState(ctx, req.(*ReadStateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _APIService_GetEpochMeta_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetEpochMetaRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(APIServiceServer).GetEpochMeta(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/iotexapi.APIService/GetEpochMeta",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(APIServiceServer).GetEpochMeta(ctx, req.(*GetEpochMetaRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _APIService_GetRawBlocks_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetRawBlocksRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(APIServiceServer).GetRawBlocks(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/iotexapi.APIService/GetRawBlocks",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(APIServiceServer).GetRawBlocks(ctx, req.(*GetRawBlocksRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _APIService_GetLogs_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetLogsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(APIServiceServer).GetLogs(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/iotexapi.APIService/GetLogs",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(APIServiceServer).GetLogs(ctx, req.(*GetLogsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _APIService_GetTransactionLogByActionHash_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetTransactionLogByActionHashRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(APIServiceServer).GetTransactionLogByActionHash(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/iotexapi.APIService/GetTransactionLogByActionHash",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(APIServiceServer).GetTransactionLogByActionHash(ctx, req.(*GetTransactionLogByActionHashRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _APIService_GetTransactionLogByBlockHeight_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetTransactionLogByBlockHeightRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(APIServiceServer).GetTransactionLogByBlockHeight(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/iotexapi.APIService/GetTransactionLogByBlockHeight",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(APIServiceServer).GetTransactionLogByBlockHeight(ctx, req.(*GetTransactionLogByBlockHeightRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _APIService_StreamBlocks_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(StreamBlocksRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(APIServiceServer).StreamBlocks(m, &aPIServiceStreamBlocksServer{stream})
}

type APIService_StreamBlocksServer interface {
	Send(*StreamBlocksResponse) error
	grpc.ServerStream
}

type aPIServiceStreamBlocksServer struct {
	grpc.ServerStream
}

func (x *aPIServiceStreamBlocksServer) Send(m *StreamBlocksResponse) error {
	return x.ServerStream.SendMsg(m)
}

func _APIService_StreamLogs_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(StreamLogsRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(APIServiceServer).StreamLogs(m, &aPIServiceStreamLogsServer{stream})
}

type APIService_StreamLogsServer interface {
	Send(*StreamLogsResponse) error
	grpc.ServerStream
}

type aPIServiceStreamLogsServer struct {
	grpc.ServerStream
}

func (x *aPIServiceStreamLogsServer) Send(m *StreamLogsResponse) error {
	return x.ServerStream.SendMsg(m)
}

func _APIService_GetActPoolActions_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetActPoolActionsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(APIServiceServer).GetActPoolActions(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/iotexapi.APIService/GetActPoolActions",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(APIServiceServer).GetActPoolActions(ctx, req.(*GetActPoolActionsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _APIService_GetEvmTransfersByActionHash_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetEvmTransfersByActionHashRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(APIServiceServer).GetEvmTransfersByActionHash(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/iotexapi.APIService/GetEvmTransfersByActionHash",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(APIServiceServer).GetEvmTransfersByActionHash(ctx, req.(*GetEvmTransfersByActionHashRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _APIService_GetEvmTransfersByBlockHeight_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetEvmTransfersByBlockHeightRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(APIServiceServer).GetEvmTransfersByBlockHeight(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/iotexapi.APIService/GetEvmTransfersByBlockHeight",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(APIServiceServer).GetEvmTransfersByBlockHeight(ctx, req.(*GetEvmTransfersByBlockHeightRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _APIService_GetElectionBuckets_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetElectionBucketsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(APIServiceServer).GetElectionBuckets(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/iotexapi.APIService/GetElectionBuckets",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(APIServiceServer).GetElectionBuckets(ctx, req.(*GetElectionBucketsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _APIService_ReadContractStorage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReadContractStorageRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(APIServiceServer).ReadContractStorage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/iotexapi.APIService/ReadContractStorage",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(APIServiceServer).ReadContractStorage(ctx, req.(*ReadContractStorageRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _APIService_TraceTransactionStructLogs_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TraceTransactionStructLogsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(APIServiceServer).TraceTransactionStructLogs(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/iotexapi.APIService/TraceTransactionStructLogs",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(APIServiceServer).TraceTransactionStructLogs(ctx, req.(*TraceTransactionStructLogsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// APIService_ServiceDesc is the grpc.ServiceDesc for APIService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var APIService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "iotexapi.APIService",
	HandlerType: (*APIServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetAccount",
			Handler:    _APIService_GetAccount_Handler,
		},
		{
			MethodName: "GetAccounts",
			Handler:    _APIService_GetAccounts_Handler,
		},
		{
			MethodName: "GetActions",
			Handler:    _APIService_GetActions_Handler,
		},
		{
			MethodName: "GetBlockMetas",
			Handler:    _APIService_GetBlockMetas_Handler,
		},
		{
			MethodName: "GetChainMeta",
			Handler:    _APIService_GetChainMeta_Handler,
		},
		{
			MethodName: "GetServerMeta",
			Handler:    _APIService_GetServerMeta_Handler,
		},
		{
			MethodName: "SendAction",
			Handler:    _APIService_SendAction_Handler,
		},
		{
			MethodName: "GetReceiptByAction",
			Handler:    _APIService_GetReceiptByAction_Handler,
		},
		{
			MethodName: "ReadContract",
			Handler:    _APIService_ReadContract_Handler,
		},
		{
			MethodName: "SuggestGasPrice",
			Handler:    _APIService_SuggestGasPrice_Handler,
		},
		{
			MethodName: "EstimateGasForAction",
			Handler:    _APIService_EstimateGasForAction_Handler,
		},
		{
			MethodName: "EstimateActionGasConsumption",
			Handler:    _APIService_EstimateActionGasConsumption_Handler,
		},
		{
			MethodName: "ReadState",
			Handler:    _APIService_ReadState_Handler,
		},
		{
			MethodName: "GetEpochMeta",
			Handler:    _APIService_GetEpochMeta_Handler,
		},
		{
			MethodName: "GetRawBlocks",
			Handler:    _APIService_GetRawBlocks_Handler,
		},
		{
			MethodName: "GetLogs",
			Handler:    _APIService_GetLogs_Handler,
		},
		{
			MethodName: "GetTransactionLogByActionHash",
			Handler:    _APIService_GetTransactionLogByActionHash_Handler,
		},
		{
			MethodName: "GetTransactionLogByBlockHeight",
			Handler:    _APIService_GetTransactionLogByBlockHeight_Handler,
		},
		{
			MethodName: "GetActPoolActions",
			Handler:    _APIService_GetActPoolActions_Handler,
		},
		{
			MethodName: "GetEvmTransfersByActionHash",
			Handler:    _APIService_GetEvmTransfersByActionHash_Handler,
		},
		{
			MethodName: "GetEvmTransfersByBlockHeight",
			Handler:    _APIService_GetEvmTransfersByBlockHeight_Handler,
		},
		{
			MethodName: "GetElectionBuckets",
			Handler:    _APIService_GetElectionBuckets_Handler,
		},
		{
			MethodName: "ReadContractStorage",
			Handler:    _APIService_ReadContractStorage_Handler,
		},
		{
			MethodName: "TraceTransactionStructLogs",
			Handler:    _APIService_TraceTransactionStructLogs_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "StreamBlocks",
			Handler:       _APIService_StreamBlocks_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "StreamLogs",
			Handler:       _APIService_StreamLogs_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "proto/api/api.proto",
}

// TransactionLogServiceClient is the client API for TransactionLogService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type TransactionLogServiceClient interface {
	GetTransactionLogByActionHash(ctx context.Context, in *GetTransactionLogByActionHashRequest, opts ...grpc.CallOption) (*GetTransactionLogByActionHashResponse, error)
	GetTransactionLogByBlockHeight(ctx context.Context, in *GetTransactionLogByBlockHeightRequest, opts ...grpc.CallOption) (*GetTransactionLogByBlockHeightResponse, error)
}

type transactionLogServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewTransactionLogServiceClient(cc grpc.ClientConnInterface) TransactionLogServiceClient {
	return &transactionLogServiceClient{cc}
}

func (c *transactionLogServiceClient) GetTransactionLogByActionHash(ctx context.Context, in *GetTransactionLogByActionHashRequest, opts ...grpc.CallOption) (*GetTransactionLogByActionHashResponse, error) {
	out := new(GetTransactionLogByActionHashResponse)
	err := c.cc.Invoke(ctx, "/iotexapi.TransactionLogService/GetTransactionLogByActionHash", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *transactionLogServiceClient) GetTransactionLogByBlockHeight(ctx context.Context, in *GetTransactionLogByBlockHeightRequest, opts ...grpc.CallOption) (*GetTransactionLogByBlockHeightResponse, error) {
	out := new(GetTransactionLogByBlockHeightResponse)
	err := c.cc.Invoke(ctx, "/iotexapi.TransactionLogService/GetTransactionLogByBlockHeight", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// TransactionLogServiceServer is the server API for TransactionLogService service.
// All implementations should embed UnimplementedTransactionLogServiceServer
// for forward compatibility
type TransactionLogServiceServer interface {
	GetTransactionLogByActionHash(context.Context, *GetTransactionLogByActionHashRequest) (*GetTransactionLogByActionHashResponse, error)
	GetTransactionLogByBlockHeight(context.Context, *GetTransactionLogByBlockHeightRequest) (*GetTransactionLogByBlockHeightResponse, error)
}

// UnimplementedTransactionLogServiceServer should be embedded to have forward compatible implementations.
type UnimplementedTransactionLogServiceServer struct {
}

func (UnimplementedTransactionLogServiceServer) GetTransactionLogByActionHash(context.Context, *GetTransactionLogByActionHashRequest) (*GetTransactionLogByActionHashResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetTransactionLogByActionHash not implemented")
}
func (UnimplementedTransactionLogServiceServer) GetTransactionLogByBlockHeight(context.Context, *GetTransactionLogByBlockHeightRequest) (*GetTransactionLogByBlockHeightResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetTransactionLogByBlockHeight not implemented")
}

// UnsafeTransactionLogServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to TransactionLogServiceServer will
// result in compilation errors.
type UnsafeTransactionLogServiceServer interface {
	mustEmbedUnimplementedTransactionLogServiceServer()
}

func RegisterTransactionLogServiceServer(s grpc.ServiceRegistrar, srv TransactionLogServiceServer) {
	s.RegisterService(&TransactionLogService_ServiceDesc, srv)
}

func _TransactionLogService_GetTransactionLogByActionHash_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetTransactionLogByActionHashRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TransactionLogServiceServer).GetTransactionLogByActionHash(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/iotexapi.TransactionLogService/GetTransactionLogByActionHash",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TransactionLogServiceServer).GetTransactionLogByActionHash(ctx, req.(*GetTransactionLogByActionHashRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TransactionLogService_GetTransactionLogByBlockHeight_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetTransactionLogByBlockHeightRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TransactionLogServiceServer).GetTransactionLogByBlockHeight(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/iotexapi.TransactionLogService/GetTransactionLogByBlockHeight",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TransactionLogServiceServer).GetTransactionLogByBlockHeight(ctx, req.(*GetTransactionLogByBlockHeightRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// TransactionLogService_ServiceDesc is the grpc.ServiceDesc for TransactionLogService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var TransactionLogService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "iotexapi.TransactionLogService",
	HandlerType: (*TransactionLogServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetTransactionLogByActionHash",
			Handler:    _TransactionLogService_GetTransactionLogByActionHash_Handler,
		},
		{
			MethodName: "GetTransactionLogByBlockHeight",
			Handler:    _TransactionLogService_GetTransactionLogByBlockHeight_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/api/api.proto",
}
