// Copyright (c) 2019 IoTeX
// This is an alpha (internal) release and is not suitable for production. This source code is provided 'as is' and no
// warranties are given as to title or non-infringement, merchantability or fitness for purpose and, to the extent
// permitted by law, all liability for your use of the code is disclaimed. This source code is governed by Apache
// License 2.0 that can be found in the LICENSE file.

// To compile the proto, run:
//      protoc -I. -I ./../types --go_out=plugins=grpc:$GOPATH/src *.proto

// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.0
// - protoc             v5.27.1
// source: proto/api/api.proto

package iotexapi

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	APIService_GetAccount_FullMethodName                     = "/iotexapi.APIService/GetAccount"
	APIService_GetActions_FullMethodName                     = "/iotexapi.APIService/GetActions"
	APIService_GetBlockMetas_FullMethodName                  = "/iotexapi.APIService/GetBlockMetas"
	APIService_GetChainMeta_FullMethodName                   = "/iotexapi.APIService/GetChainMeta"
	APIService_GetServerMeta_FullMethodName                  = "/iotexapi.APIService/GetServerMeta"
	APIService_SendAction_FullMethodName                     = "/iotexapi.APIService/SendAction"
	APIService_GetReceiptByAction_FullMethodName             = "/iotexapi.APIService/GetReceiptByAction"
	APIService_ReadContract_FullMethodName                   = "/iotexapi.APIService/ReadContract"
	APIService_SuggestGasPrice_FullMethodName                = "/iotexapi.APIService/SuggestGasPrice"
	APIService_EstimateGasForAction_FullMethodName           = "/iotexapi.APIService/EstimateGasForAction"
	APIService_EstimateActionGasConsumption_FullMethodName   = "/iotexapi.APIService/EstimateActionGasConsumption"
	APIService_ReadState_FullMethodName                      = "/iotexapi.APIService/ReadState"
	APIService_GetEpochMeta_FullMethodName                   = "/iotexapi.APIService/GetEpochMeta"
	APIService_GetRawBlocks_FullMethodName                   = "/iotexapi.APIService/GetRawBlocks"
	APIService_GetLogs_FullMethodName                        = "/iotexapi.APIService/GetLogs"
	APIService_GetTransactionLogByActionHash_FullMethodName  = "/iotexapi.APIService/GetTransactionLogByActionHash"
	APIService_GetTransactionLogByBlockHeight_FullMethodName = "/iotexapi.APIService/GetTransactionLogByBlockHeight"
	APIService_StreamBlocks_FullMethodName                   = "/iotexapi.APIService/StreamBlocks"
	APIService_StreamLogs_FullMethodName                     = "/iotexapi.APIService/StreamLogs"
	APIService_GetActPoolActions_FullMethodName              = "/iotexapi.APIService/GetActPoolActions"
	APIService_GetEvmTransfersByActionHash_FullMethodName    = "/iotexapi.APIService/GetEvmTransfersByActionHash"
	APIService_GetEvmTransfersByBlockHeight_FullMethodName   = "/iotexapi.APIService/GetEvmTransfersByBlockHeight"
	APIService_GetElectionBuckets_FullMethodName             = "/iotexapi.APIService/GetElectionBuckets"
	APIService_ReadContractStorage_FullMethodName            = "/iotexapi.APIService/ReadContractStorage"
	APIService_TraceTransactionStructLogs_FullMethodName     = "/iotexapi.APIService/TraceTransactionStructLogs"
)

// APIServiceClient is the client API for APIService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type APIServiceClient interface {
	// get the address detail of an address
	GetAccount(ctx context.Context, in *GetAccountRequest, opts ...grpc.CallOption) (*GetAccountResponse, error)
	// get action(s) by:
	// 1. start index and action count
	// 2. action hash
	// 3. address with start index and action count
	// 4. get unconfirmed actions by address with start index and action count
	// 5. block hash with start index and action count
	GetActions(ctx context.Context, in *GetActionsRequest, opts ...grpc.CallOption) (*GetActionsResponse, error)
	// get block metadata(s) by:
	// 1. start index and block count
	// 2. block hash
	GetBlockMetas(ctx context.Context, in *GetBlockMetasRequest, opts ...grpc.CallOption) (*GetBlockMetasResponse, error)
	// get chain metadata
	GetChainMeta(ctx context.Context, in *GetChainMetaRequest, opts ...grpc.CallOption) (*GetChainMetaResponse, error)
	// get server version
	GetServerMeta(ctx context.Context, in *GetServerMetaRequest, opts ...grpc.CallOption) (*GetServerMetaResponse, error)
	// sendAction
	SendAction(ctx context.Context, in *SendActionRequest, opts ...grpc.CallOption) (*SendActionResponse, error)
	// get receipt by action Hash
	GetReceiptByAction(ctx context.Context, in *GetReceiptByActionRequest, opts ...grpc.CallOption) (*GetReceiptByActionResponse, error)
	// TODO: read contract
	ReadContract(ctx context.Context, in *ReadContractRequest, opts ...grpc.CallOption) (*ReadContractResponse, error)
	// suggest gas price
	SuggestGasPrice(ctx context.Context, in *SuggestGasPriceRequest, opts ...grpc.CallOption) (*SuggestGasPriceResponse, error)
	// estimate gas for action, to be deprecated
	EstimateGasForAction(ctx context.Context, in *EstimateGasForActionRequest, opts ...grpc.CallOption) (*EstimateGasForActionResponse, error)
	// estimate gas for action and transfer not sealed
	EstimateActionGasConsumption(ctx context.Context, in *EstimateActionGasConsumptionRequest, opts ...grpc.CallOption) (*EstimateActionGasConsumptionResponse, error)
	// read state from blockchain
	ReadState(ctx context.Context, in *ReadStateRequest, opts ...grpc.CallOption) (*ReadStateResponse, error)
	// get epoch metadata
	GetEpochMeta(ctx context.Context, in *GetEpochMetaRequest, opts ...grpc.CallOption) (*GetEpochMetaResponse, error)
	// get raw blocks data
	GetRawBlocks(ctx context.Context, in *GetRawBlocksRequest, opts ...grpc.CallOption) (*GetRawBlocksResponse, error)
	// get logs filtered by contract address and topics
	GetLogs(ctx context.Context, in *GetLogsRequest, opts ...grpc.CallOption) (*GetLogsResponse, error)
	GetTransactionLogByActionHash(ctx context.Context, in *GetTransactionLogByActionHashRequest, opts ...grpc.CallOption) (*GetTransactionLogByActionHashResponse, error)
	GetTransactionLogByBlockHeight(ctx context.Context, in *GetTransactionLogByBlockHeightRequest, opts ...grpc.CallOption) (*GetTransactionLogByBlockHeightResponse, error)
	// get block info in stream
	StreamBlocks(ctx context.Context, in *StreamBlocksRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[StreamBlocksResponse], error)
	// get logs filtered by contract address and topics in stream
	StreamLogs(ctx context.Context, in *StreamLogsRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[StreamLogsResponse], error)
	// get actions from act pool
	GetActPoolActions(ctx context.Context, in *GetActPoolActionsRequest, opts ...grpc.CallOption) (*GetActPoolActionsResponse, error)
	// Deprecated
	GetEvmTransfersByActionHash(ctx context.Context, in *GetEvmTransfersByActionHashRequest, opts ...grpc.CallOption) (*GetEvmTransfersByActionHashResponse, error)
	// Deprecated
	GetEvmTransfersByBlockHeight(ctx context.Context, in *GetEvmTransfersByBlockHeightRequest, opts ...grpc.CallOption) (*GetEvmTransfersByBlockHeightResponse, error)
	// Deprecated
	GetElectionBuckets(ctx context.Context, in *GetElectionBucketsRequest, opts ...grpc.CallOption) (*GetElectionBucketsResponse, error)
	ReadContractStorage(ctx context.Context, in *ReadContractStorageRequest, opts ...grpc.CallOption) (*ReadContractStorageResponse, error)
	TraceTransactionStructLogs(ctx context.Context, in *TraceTransactionStructLogsRequest, opts ...grpc.CallOption) (*TraceTransactionStructLogsResponse, error)
}

type aPIServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewAPIServiceClient(cc grpc.ClientConnInterface) APIServiceClient {
	return &aPIServiceClient{cc}
}

func (c *aPIServiceClient) GetAccount(ctx context.Context, in *GetAccountRequest, opts ...grpc.CallOption) (*GetAccountResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetAccountResponse)
	err := c.cc.Invoke(ctx, APIService_GetAccount_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *aPIServiceClient) GetActions(ctx context.Context, in *GetActionsRequest, opts ...grpc.CallOption) (*GetActionsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetActionsResponse)
	err := c.cc.Invoke(ctx, APIService_GetActions_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *aPIServiceClient) GetBlockMetas(ctx context.Context, in *GetBlockMetasRequest, opts ...grpc.CallOption) (*GetBlockMetasResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetBlockMetasResponse)
	err := c.cc.Invoke(ctx, APIService_GetBlockMetas_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *aPIServiceClient) GetChainMeta(ctx context.Context, in *GetChainMetaRequest, opts ...grpc.CallOption) (*GetChainMetaResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetChainMetaResponse)
	err := c.cc.Invoke(ctx, APIService_GetChainMeta_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *aPIServiceClient) GetServerMeta(ctx context.Context, in *GetServerMetaRequest, opts ...grpc.CallOption) (*GetServerMetaResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetServerMetaResponse)
	err := c.cc.Invoke(ctx, APIService_GetServerMeta_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *aPIServiceClient) SendAction(ctx context.Context, in *SendActionRequest, opts ...grpc.CallOption) (*SendActionResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SendActionResponse)
	err := c.cc.Invoke(ctx, APIService_SendAction_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *aPIServiceClient) GetReceiptByAction(ctx context.Context, in *GetReceiptByActionRequest, opts ...grpc.CallOption) (*GetReceiptByActionResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetReceiptByActionResponse)
	err := c.cc.Invoke(ctx, APIService_GetReceiptByAction_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *aPIServiceClient) ReadContract(ctx context.Context, in *ReadContractRequest, opts ...grpc.CallOption) (*ReadContractResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ReadContractResponse)
	err := c.cc.Invoke(ctx, APIService_ReadContract_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *aPIServiceClient) SuggestGasPrice(ctx context.Context, in *SuggestGasPriceRequest, opts ...grpc.CallOption) (*SuggestGasPriceResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SuggestGasPriceResponse)
	err := c.cc.Invoke(ctx, APIService_SuggestGasPrice_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *aPIServiceClient) EstimateGasForAction(ctx context.Context, in *EstimateGasForActionRequest, opts ...grpc.CallOption) (*EstimateGasForActionResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(EstimateGasForActionResponse)
	err := c.cc.Invoke(ctx, APIService_EstimateGasForAction_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *aPIServiceClient) EstimateActionGasConsumption(ctx context.Context, in *EstimateActionGasConsumptionRequest, opts ...grpc.CallOption) (*EstimateActionGasConsumptionResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(EstimateActionGasConsumptionResponse)
	err := c.cc.Invoke(ctx, APIService_EstimateActionGasConsumption_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *aPIServiceClient) ReadState(ctx context.Context, in *ReadStateRequest, opts ...grpc.CallOption) (*ReadStateResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ReadStateResponse)
	err := c.cc.Invoke(ctx, APIService_ReadState_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *aPIServiceClient) GetEpochMeta(ctx context.Context, in *GetEpochMetaRequest, opts ...grpc.CallOption) (*GetEpochMetaResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetEpochMetaResponse)
	err := c.cc.Invoke(ctx, APIService_GetEpochMeta_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *aPIServiceClient) GetRawBlocks(ctx context.Context, in *GetRawBlocksRequest, opts ...grpc.CallOption) (*GetRawBlocksResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetRawBlocksResponse)
	err := c.cc.Invoke(ctx, APIService_GetRawBlocks_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *aPIServiceClient) GetLogs(ctx context.Context, in *GetLogsRequest, opts ...grpc.CallOption) (*GetLogsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetLogsResponse)
	err := c.cc.Invoke(ctx, APIService_GetLogs_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *aPIServiceClient) GetTransactionLogByActionHash(ctx context.Context, in *GetTransactionLogByActionHashRequest, opts ...grpc.CallOption) (*GetTransactionLogByActionHashResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetTransactionLogByActionHashResponse)
	err := c.cc.Invoke(ctx, APIService_GetTransactionLogByActionHash_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *aPIServiceClient) GetTransactionLogByBlockHeight(ctx context.Context, in *GetTransactionLogByBlockHeightRequest, opts ...grpc.CallOption) (*GetTransactionLogByBlockHeightResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetTransactionLogByBlockHeightResponse)
	err := c.cc.Invoke(ctx, APIService_GetTransactionLogByBlockHeight_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *aPIServiceClient) StreamBlocks(ctx context.Context, in *StreamBlocksRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[StreamBlocksResponse], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &APIService_ServiceDesc.Streams[0], APIService_StreamBlocks_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[StreamBlocksRequest, StreamBlocksResponse]{ClientStream: stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type APIService_StreamBlocksClient = grpc.ServerStreamingClient[StreamBlocksResponse]

func (c *aPIServiceClient) StreamLogs(ctx context.Context, in *StreamLogsRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[StreamLogsResponse], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &APIService_ServiceDesc.Streams[1], APIService_StreamLogs_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[StreamLogsRequest, StreamLogsResponse]{ClientStream: stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type APIService_StreamLogsClient = grpc.ServerStreamingClient[StreamLogsResponse]

func (c *aPIServiceClient) GetActPoolActions(ctx context.Context, in *GetActPoolActionsRequest, opts ...grpc.CallOption) (*GetActPoolActionsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetActPoolActionsResponse)
	err := c.cc.Invoke(ctx, APIService_GetActPoolActions_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *aPIServiceClient) GetEvmTransfersByActionHash(ctx context.Context, in *GetEvmTransfersByActionHashRequest, opts ...grpc.CallOption) (*GetEvmTransfersByActionHashResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetEvmTransfersByActionHashResponse)
	err := c.cc.Invoke(ctx, APIService_GetEvmTransfersByActionHash_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *aPIServiceClient) GetEvmTransfersByBlockHeight(ctx context.Context, in *GetEvmTransfersByBlockHeightRequest, opts ...grpc.CallOption) (*GetEvmTransfersByBlockHeightResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetEvmTransfersByBlockHeightResponse)
	err := c.cc.Invoke(ctx, APIService_GetEvmTransfersByBlockHeight_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *aPIServiceClient) GetElectionBuckets(ctx context.Context, in *GetElectionBucketsRequest, opts ...grpc.CallOption) (*GetElectionBucketsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetElectionBucketsResponse)
	err := c.cc.Invoke(ctx, APIService_GetElectionBuckets_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *aPIServiceClient) ReadContractStorage(ctx context.Context, in *ReadContractStorageRequest, opts ...grpc.CallOption) (*ReadContractStorageResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ReadContractStorageResponse)
	err := c.cc.Invoke(ctx, APIService_ReadContractStorage_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *aPIServiceClient) TraceTransactionStructLogs(ctx context.Context, in *TraceTransactionStructLogsRequest, opts ...grpc.CallOption) (*TraceTransactionStructLogsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(TraceTransactionStructLogsResponse)
	err := c.cc.Invoke(ctx, APIService_TraceTransactionStructLogs_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// APIServiceServer is the server API for APIService service.
// All implementations should embed UnimplementedAPIServiceServer
// for forward compatibility.
type APIServiceServer interface {
	// get the address detail of an address
	GetAccount(context.Context, *GetAccountRequest) (*GetAccountResponse, error)
	// get action(s) by:
	// 1. start index and action count
	// 2. action hash
	// 3. address with start index and action count
	// 4. get unconfirmed actions by address with start index and action count
	// 5. block hash with start index and action count
	GetActions(context.Context, *GetActionsRequest) (*GetActionsResponse, error)
	// get block metadata(s) by:
	// 1. start index and block count
	// 2. block hash
	GetBlockMetas(context.Context, *GetBlockMetasRequest) (*GetBlockMetasResponse, error)
	// get chain metadata
	GetChainMeta(context.Context, *GetChainMetaRequest) (*GetChainMetaResponse, error)
	// get server version
	GetServerMeta(context.Context, *GetServerMetaRequest) (*GetServerMetaResponse, error)
	// sendAction
	SendAction(context.Context, *SendActionRequest) (*SendActionResponse, error)
	// get receipt by action Hash
	GetReceiptByAction(context.Context, *GetReceiptByActionRequest) (*GetReceiptByActionResponse, error)
	// TODO: read contract
	ReadContract(context.Context, *ReadContractRequest) (*ReadContractResponse, error)
	// suggest gas price
	SuggestGasPrice(context.Context, *SuggestGasPriceRequest) (*SuggestGasPriceResponse, error)
	// estimate gas for action, to be deprecated
	EstimateGasForAction(context.Context, *EstimateGasForActionRequest) (*EstimateGasForActionResponse, error)
	// estimate gas for action and transfer not sealed
	EstimateActionGasConsumption(context.Context, *EstimateActionGasConsumptionRequest) (*EstimateActionGasConsumptionResponse, error)
	// read state from blockchain
	ReadState(context.Context, *ReadStateRequest) (*ReadStateResponse, error)
	// get epoch metadata
	GetEpochMeta(context.Context, *GetEpochMetaRequest) (*GetEpochMetaResponse, error)
	// get raw blocks data
	GetRawBlocks(context.Context, *GetRawBlocksRequest) (*GetRawBlocksResponse, error)
	// get logs filtered by contract address and topics
	GetLogs(context.Context, *GetLogsRequest) (*GetLogsResponse, error)
	GetTransactionLogByActionHash(context.Context, *GetTransactionLogByActionHashRequest) (*GetTransactionLogByActionHashResponse, error)
	GetTransactionLogByBlockHeight(context.Context, *GetTransactionLogByBlockHeightRequest) (*GetTransactionLogByBlockHeightResponse, error)
	// get block info in stream
	StreamBlocks(*StreamBlocksRequest, grpc.ServerStreamingServer[StreamBlocksResponse]) error
	// get logs filtered by contract address and topics in stream
	StreamLogs(*StreamLogsRequest, grpc.ServerStreamingServer[StreamLogsResponse]) error
	// get actions from act pool
	GetActPoolActions(context.Context, *GetActPoolActionsRequest) (*GetActPoolActionsResponse, error)
	// Deprecated
	GetEvmTransfersByActionHash(context.Context, *GetEvmTransfersByActionHashRequest) (*GetEvmTransfersByActionHashResponse, error)
	// Deprecated
	GetEvmTransfersByBlockHeight(context.Context, *GetEvmTransfersByBlockHeightRequest) (*GetEvmTransfersByBlockHeightResponse, error)
	// Deprecated
	GetElectionBuckets(context.Context, *GetElectionBucketsRequest) (*GetElectionBucketsResponse, error)
	ReadContractStorage(context.Context, *ReadContractStorageRequest) (*ReadContractStorageResponse, error)
	TraceTransactionStructLogs(context.Context, *TraceTransactionStructLogsRequest) (*TraceTransactionStructLogsResponse, error)
}

// UnimplementedAPIServiceServer should be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedAPIServiceServer struct{}

func (UnimplementedAPIServiceServer) GetAccount(context.Context, *GetAccountRequest) (*GetAccountResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAccount not implemented")
}
func (UnimplementedAPIServiceServer) GetActions(context.Context, *GetActionsRequest) (*GetActionsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetActions not implemented")
}
func (UnimplementedAPIServiceServer) GetBlockMetas(context.Context, *GetBlockMetasRequest) (*GetBlockMetasResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetBlockMetas not implemented")
}
func (UnimplementedAPIServiceServer) GetChainMeta(context.Context, *GetChainMetaRequest) (*GetChainMetaResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetChainMeta not implemented")
}
func (UnimplementedAPIServiceServer) GetServerMeta(context.Context, *GetServerMetaRequest) (*GetServerMetaResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetServerMeta not implemented")
}
func (UnimplementedAPIServiceServer) SendAction(context.Context, *SendActionRequest) (*SendActionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SendAction not implemented")
}
func (UnimplementedAPIServiceServer) GetReceiptByAction(context.Context, *GetReceiptByActionRequest) (*GetReceiptByActionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetReceiptByAction not implemented")
}
func (UnimplementedAPIServiceServer) ReadContract(context.Context, *ReadContractRequest) (*ReadContractResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ReadContract not implemented")
}
func (UnimplementedAPIServiceServer) SuggestGasPrice(context.Context, *SuggestGasPriceRequest) (*SuggestGasPriceResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SuggestGasPrice not implemented")
}
func (UnimplementedAPIServiceServer) EstimateGasForAction(context.Context, *EstimateGasForActionRequest) (*EstimateGasForActionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method EstimateGasForAction not implemented")
}
func (UnimplementedAPIServiceServer) EstimateActionGasConsumption(context.Context, *EstimateActionGasConsumptionRequest) (*EstimateActionGasConsumptionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method EstimateActionGasConsumption not implemented")
}
func (UnimplementedAPIServiceServer) ReadState(context.Context, *ReadStateRequest) (*ReadStateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ReadState not implemented")
}
func (UnimplementedAPIServiceServer) GetEpochMeta(context.Context, *GetEpochMetaRequest) (*GetEpochMetaResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetEpochMeta not implemented")
}
func (UnimplementedAPIServiceServer) GetRawBlocks(context.Context, *GetRawBlocksRequest) (*GetRawBlocksResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetRawBlocks not implemented")
}
func (UnimplementedAPIServiceServer) GetLogs(context.Context, *GetLogsRequest) (*GetLogsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetLogs not implemented")
}
func (UnimplementedAPIServiceServer) GetTransactionLogByActionHash(context.Context, *GetTransactionLogByActionHashRequest) (*GetTransactionLogByActionHashResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetTransactionLogByActionHash not implemented")
}
func (UnimplementedAPIServiceServer) GetTransactionLogByBlockHeight(context.Context, *GetTransactionLogByBlockHeightRequest) (*GetTransactionLogByBlockHeightResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetTransactionLogByBlockHeight not implemented")
}
func (UnimplementedAPIServiceServer) StreamBlocks(*StreamBlocksRequest, grpc.ServerStreamingServer[StreamBlocksResponse]) error {
	return status.Errorf(codes.Unimplemented, "method StreamBlocks not implemented")
}
func (UnimplementedAPIServiceServer) StreamLogs(*StreamLogsRequest, grpc.ServerStreamingServer[StreamLogsResponse]) error {
	return status.Errorf(codes.Unimplemented, "method StreamLogs not implemented")
}
func (UnimplementedAPIServiceServer) GetActPoolActions(context.Context, *GetActPoolActionsRequest) (*GetActPoolActionsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetActPoolActions not implemented")
}
func (UnimplementedAPIServiceServer) GetEvmTransfersByActionHash(context.Context, *GetEvmTransfersByActionHashRequest) (*GetEvmTransfersByActionHashResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetEvmTransfersByActionHash not implemented")
}
func (UnimplementedAPIServiceServer) GetEvmTransfersByBlockHeight(context.Context, *GetEvmTransfersByBlockHeightRequest) (*GetEvmTransfersByBlockHeightResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetEvmTransfersByBlockHeight not implemented")
}
func (UnimplementedAPIServiceServer) GetElectionBuckets(context.Context, *GetElectionBucketsRequest) (*GetElectionBucketsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetElectionBuckets not implemented")
}
func (UnimplementedAPIServiceServer) ReadContractStorage(context.Context, *ReadContractStorageRequest) (*ReadContractStorageResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ReadContractStorage not implemented")
}
func (UnimplementedAPIServiceServer) TraceTransactionStructLogs(context.Context, *TraceTransactionStructLogsRequest) (*TraceTransactionStructLogsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method TraceTransactionStructLogs not implemented")
}
func (UnimplementedAPIServiceServer) testEmbeddedByValue() {}

// UnsafeAPIServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to APIServiceServer will
// result in compilation errors.
type UnsafeAPIServiceServer interface {
	mustEmbedUnimplementedAPIServiceServer()
}

func RegisterAPIServiceServer(s grpc.ServiceRegistrar, srv APIServiceServer) {
	// If the following call pancis, it indicates UnimplementedAPIServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&APIService_ServiceDesc, srv)
}

func _APIService_GetAccount_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetAccountRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(APIServiceServer).GetAccount(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: APIService_GetAccount_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(APIServiceServer).GetAccount(ctx, req.(*GetAccountRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _APIService_GetActions_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetActionsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(APIServiceServer).GetActions(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: APIService_GetActions_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(APIServiceServer).GetActions(ctx, req.(*GetActionsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _APIService_GetBlockMetas_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetBlockMetasRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(APIServiceServer).GetBlockMetas(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: APIService_GetBlockMetas_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(APIServiceServer).GetBlockMetas(ctx, req.(*GetBlockMetasRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _APIService_GetChainMeta_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetChainMetaRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(APIServiceServer).GetChainMeta(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: APIService_GetChainMeta_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(APIServiceServer).GetChainMeta(ctx, req.(*GetChainMetaRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _APIService_GetServerMeta_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetServerMetaRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(APIServiceServer).GetServerMeta(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: APIService_GetServerMeta_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(APIServiceServer).GetServerMeta(ctx, req.(*GetServerMetaRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _APIService_SendAction_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SendActionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(APIServiceServer).SendAction(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: APIService_SendAction_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(APIServiceServer).SendAction(ctx, req.(*SendActionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _APIService_GetReceiptByAction_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetReceiptByActionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(APIServiceServer).GetReceiptByAction(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: APIService_GetReceiptByAction_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(APIServiceServer).GetReceiptByAction(ctx, req.(*GetReceiptByActionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _APIService_ReadContract_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReadContractRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(APIServiceServer).ReadContract(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: APIService_ReadContract_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(APIServiceServer).ReadContract(ctx, req.(*ReadContractRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _APIService_SuggestGasPrice_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SuggestGasPriceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(APIServiceServer).SuggestGasPrice(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: APIService_SuggestGasPrice_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(APIServiceServer).SuggestGasPrice(ctx, req.(*SuggestGasPriceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _APIService_EstimateGasForAction_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EstimateGasForActionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(APIServiceServer).EstimateGasForAction(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: APIService_EstimateGasForAction_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(APIServiceServer).EstimateGasForAction(ctx, req.(*EstimateGasForActionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _APIService_EstimateActionGasConsumption_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EstimateActionGasConsumptionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(APIServiceServer).EstimateActionGasConsumption(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: APIService_EstimateActionGasConsumption_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(APIServiceServer).EstimateActionGasConsumption(ctx, req.(*EstimateActionGasConsumptionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _APIService_ReadState_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReadStateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(APIServiceServer).ReadState(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: APIService_ReadState_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(APIServiceServer).ReadState(ctx, req.(*ReadStateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _APIService_GetEpochMeta_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetEpochMetaRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(APIServiceServer).GetEpochMeta(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: APIService_GetEpochMeta_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(APIServiceServer).GetEpochMeta(ctx, req.(*GetEpochMetaRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _APIService_GetRawBlocks_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetRawBlocksRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(APIServiceServer).GetRawBlocks(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: APIService_GetRawBlocks_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(APIServiceServer).GetRawBlocks(ctx, req.(*GetRawBlocksRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _APIService_GetLogs_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetLogsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(APIServiceServer).GetLogs(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: APIService_GetLogs_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(APIServiceServer).GetLogs(ctx, req.(*GetLogsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _APIService_GetTransactionLogByActionHash_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetTransactionLogByActionHashRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(APIServiceServer).GetTransactionLogByActionHash(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: APIService_GetTransactionLogByActionHash_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(APIServiceServer).GetTransactionLogByActionHash(ctx, req.(*GetTransactionLogByActionHashRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _APIService_GetTransactionLogByBlockHeight_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetTransactionLogByBlockHeightRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(APIServiceServer).GetTransactionLogByBlockHeight(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: APIService_GetTransactionLogByBlockHeight_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(APIServiceServer).GetTransactionLogByBlockHeight(ctx, req.(*GetTransactionLogByBlockHeightRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _APIService_StreamBlocks_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(StreamBlocksRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(APIServiceServer).StreamBlocks(m, &grpc.GenericServerStream[StreamBlocksRequest, StreamBlocksResponse]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type APIService_StreamBlocksServer = grpc.ServerStreamingServer[StreamBlocksResponse]

func _APIService_StreamLogs_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(StreamLogsRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(APIServiceServer).StreamLogs(m, &grpc.GenericServerStream[StreamLogsRequest, StreamLogsResponse]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type APIService_StreamLogsServer = grpc.ServerStreamingServer[StreamLogsResponse]

func _APIService_GetActPoolActions_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetActPoolActionsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(APIServiceServer).GetActPoolActions(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: APIService_GetActPoolActions_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(APIServiceServer).GetActPoolActions(ctx, req.(*GetActPoolActionsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _APIService_GetEvmTransfersByActionHash_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetEvmTransfersByActionHashRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(APIServiceServer).GetEvmTransfersByActionHash(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: APIService_GetEvmTransfersByActionHash_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(APIServiceServer).GetEvmTransfersByActionHash(ctx, req.(*GetEvmTransfersByActionHashRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _APIService_GetEvmTransfersByBlockHeight_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetEvmTransfersByBlockHeightRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(APIServiceServer).GetEvmTransfersByBlockHeight(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: APIService_GetEvmTransfersByBlockHeight_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(APIServiceServer).GetEvmTransfersByBlockHeight(ctx, req.(*GetEvmTransfersByBlockHeightRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _APIService_GetElectionBuckets_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetElectionBucketsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(APIServiceServer).GetElectionBuckets(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: APIService_GetElectionBuckets_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(APIServiceServer).GetElectionBuckets(ctx, req.(*GetElectionBucketsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _APIService_ReadContractStorage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReadContractStorageRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(APIServiceServer).ReadContractStorage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: APIService_ReadContractStorage_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(APIServiceServer).ReadContractStorage(ctx, req.(*ReadContractStorageRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _APIService_TraceTransactionStructLogs_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TraceTransactionStructLogsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(APIServiceServer).TraceTransactionStructLogs(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: APIService_TraceTransactionStructLogs_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(APIServiceServer).TraceTransactionStructLogs(ctx, req.(*TraceTransactionStructLogsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// APIService_ServiceDesc is the grpc.ServiceDesc for APIService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var APIService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "iotexapi.APIService",
	HandlerType: (*APIServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetAccount",
			Handler:    _APIService_GetAccount_Handler,
		},
		{
			MethodName: "GetActions",
			Handler:    _APIService_GetActions_Handler,
		},
		{
			MethodName: "GetBlockMetas",
			Handler:    _APIService_GetBlockMetas_Handler,
		},
		{
			MethodName: "GetChainMeta",
			Handler:    _APIService_GetChainMeta_Handler,
		},
		{
			MethodName: "GetServerMeta",
			Handler:    _APIService_GetServerMeta_Handler,
		},
		{
			MethodName: "SendAction",
			Handler:    _APIService_SendAction_Handler,
		},
		{
			MethodName: "GetReceiptByAction",
			Handler:    _APIService_GetReceiptByAction_Handler,
		},
		{
			MethodName: "ReadContract",
			Handler:    _APIService_ReadContract_Handler,
		},
		{
			MethodName: "SuggestGasPrice",
			Handler:    _APIService_SuggestGasPrice_Handler,
		},
		{
			MethodName: "EstimateGasForAction",
			Handler:    _APIService_EstimateGasForAction_Handler,
		},
		{
			MethodName: "EstimateActionGasConsumption",
			Handler:    _APIService_EstimateActionGasConsumption_Handler,
		},
		{
			MethodName: "ReadState",
			Handler:    _APIService_ReadState_Handler,
		},
		{
			MethodName: "GetEpochMeta",
			Handler:    _APIService_GetEpochMeta_Handler,
		},
		{
			MethodName: "GetRawBlocks",
			Handler:    _APIService_GetRawBlocks_Handler,
		},
		{
			MethodName: "GetLogs",
			Handler:    _APIService_GetLogs_Handler,
		},
		{
			MethodName: "GetTransactionLogByActionHash",
			Handler:    _APIService_GetTransactionLogByActionHash_Handler,
		},
		{
			MethodName: "GetTransactionLogByBlockHeight",
			Handler:    _APIService_GetTransactionLogByBlockHeight_Handler,
		},
		{
			MethodName: "GetActPoolActions",
			Handler:    _APIService_GetActPoolActions_Handler,
		},
		{
			MethodName: "GetEvmTransfersByActionHash",
			Handler:    _APIService_GetEvmTransfersByActionHash_Handler,
		},
		{
			MethodName: "GetEvmTransfersByBlockHeight",
			Handler:    _APIService_GetEvmTransfersByBlockHeight_Handler,
		},
		{
			MethodName: "GetElectionBuckets",
			Handler:    _APIService_GetElectionBuckets_Handler,
		},
		{
			MethodName: "ReadContractStorage",
			Handler:    _APIService_ReadContractStorage_Handler,
		},
		{
			MethodName: "TraceTransactionStructLogs",
			Handler:    _APIService_TraceTransactionStructLogs_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "StreamBlocks",
			Handler:       _APIService_StreamBlocks_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "StreamLogs",
			Handler:       _APIService_StreamLogs_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "proto/api/api.proto",
}

const (
	TransactionLogService_GetTransactionLogByActionHash_FullMethodName  = "/iotexapi.TransactionLogService/GetTransactionLogByActionHash"
	TransactionLogService_GetTransactionLogByBlockHeight_FullMethodName = "/iotexapi.TransactionLogService/GetTransactionLogByBlockHeight"
)

// TransactionLogServiceClient is the client API for TransactionLogService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// experiment
type TransactionLogServiceClient interface {
	GetTransactionLogByActionHash(ctx context.Context, in *GetTransactionLogByActionHashRequest, opts ...grpc.CallOption) (*GetTransactionLogByActionHashResponse, error)
	GetTransactionLogByBlockHeight(ctx context.Context, in *GetTransactionLogByBlockHeightRequest, opts ...grpc.CallOption) (*GetTransactionLogByBlockHeightResponse, error)
}

type transactionLogServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewTransactionLogServiceClient(cc grpc.ClientConnInterface) TransactionLogServiceClient {
	return &transactionLogServiceClient{cc}
}

func (c *transactionLogServiceClient) GetTransactionLogByActionHash(ctx context.Context, in *GetTransactionLogByActionHashRequest, opts ...grpc.CallOption) (*GetTransactionLogByActionHashResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetTransactionLogByActionHashResponse)
	err := c.cc.Invoke(ctx, TransactionLogService_GetTransactionLogByActionHash_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *transactionLogServiceClient) GetTransactionLogByBlockHeight(ctx context.Context, in *GetTransactionLogByBlockHeightRequest, opts ...grpc.CallOption) (*GetTransactionLogByBlockHeightResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetTransactionLogByBlockHeightResponse)
	err := c.cc.Invoke(ctx, TransactionLogService_GetTransactionLogByBlockHeight_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// TransactionLogServiceServer is the server API for TransactionLogService service.
// All implementations should embed UnimplementedTransactionLogServiceServer
// for forward compatibility.
//
// experiment
type TransactionLogServiceServer interface {
	GetTransactionLogByActionHash(context.Context, *GetTransactionLogByActionHashRequest) (*GetTransactionLogByActionHashResponse, error)
	GetTransactionLogByBlockHeight(context.Context, *GetTransactionLogByBlockHeightRequest) (*GetTransactionLogByBlockHeightResponse, error)
}

// UnimplementedTransactionLogServiceServer should be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedTransactionLogServiceServer struct{}

func (UnimplementedTransactionLogServiceServer) GetTransactionLogByActionHash(context.Context, *GetTransactionLogByActionHashRequest) (*GetTransactionLogByActionHashResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetTransactionLogByActionHash not implemented")
}
func (UnimplementedTransactionLogServiceServer) GetTransactionLogByBlockHeight(context.Context, *GetTransactionLogByBlockHeightRequest) (*GetTransactionLogByBlockHeightResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetTransactionLogByBlockHeight not implemented")
}
func (UnimplementedTransactionLogServiceServer) testEmbeddedByValue() {}

// UnsafeTransactionLogServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to TransactionLogServiceServer will
// result in compilation errors.
type UnsafeTransactionLogServiceServer interface {
	mustEmbedUnimplementedTransactionLogServiceServer()
}

func RegisterTransactionLogServiceServer(s grpc.ServiceRegistrar, srv TransactionLogServiceServer) {
	// If the following call pancis, it indicates UnimplementedTransactionLogServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&TransactionLogService_ServiceDesc, srv)
}

func _TransactionLogService_GetTransactionLogByActionHash_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetTransactionLogByActionHashRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TransactionLogServiceServer).GetTransactionLogByActionHash(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TransactionLogService_GetTransactionLogByActionHash_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TransactionLogServiceServer).GetTransactionLogByActionHash(ctx, req.(*GetTransactionLogByActionHashRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TransactionLogService_GetTransactionLogByBlockHeight_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetTransactionLogByBlockHeightRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TransactionLogServiceServer).GetTransactionLogByBlockHeight(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TransactionLogService_GetTransactionLogByBlockHeight_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TransactionLogServiceServer).GetTransactionLogByBlockHeight(ctx, req.(*GetTransactionLogByBlockHeightRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// TransactionLogService_ServiceDesc is the grpc.ServiceDesc for TransactionLogService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var TransactionLogService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "iotexapi.TransactionLogService",
	HandlerType: (*TransactionLogServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetTransactionLogByActionHash",
			Handler:    _TransactionLogService_GetTransactionLogByActionHash_Handler,
		},
		{
			MethodName: "GetTransactionLogByBlockHeight",
			Handler:    _TransactionLogService_GetTransactionLogByBlockHeight_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/api/api.proto",
}
