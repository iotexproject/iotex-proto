// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/iotexproject/iotex-proto/golang/iotexapi (interfaces: APIServiceServer)

// Package mock_iotexapi is a generated GoMock package.
package mock_iotexapi

import (
	context "context"
	gomock "github.com/golang/mock/gomock"
	iotexapi "github.com/iotexproject/iotex-proto/golang/iotexapi"
	reflect "reflect"
)

// MockAPIServiceServer is a mock of APIServiceServer interface
type MockAPIServiceServer struct {
	ctrl     *gomock.Controller
	recorder *MockAPIServiceServerMockRecorder
}

// MockAPIServiceServerMockRecorder is the mock recorder for MockAPIServiceServer
type MockAPIServiceServerMockRecorder struct {
	mock *MockAPIServiceServer
}

// NewMockAPIServiceServer creates a new mock instance
func NewMockAPIServiceServer(ctrl *gomock.Controller) *MockAPIServiceServer {
	mock := &MockAPIServiceServer{ctrl: ctrl}
	mock.recorder = &MockAPIServiceServerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockAPIServiceServer) EXPECT() *MockAPIServiceServerMockRecorder {
	return m.recorder
}

// EstimateActionGasConsumption mocks base method
func (m *MockAPIServiceServer) EstimateActionGasConsumption(arg0 context.Context, arg1 *iotexapi.EstimateActionGasConsumptionRequest) (*iotexapi.EstimateActionGasConsumptionResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "EstimateActionGasConsumption", arg0, arg1)
	ret0, _ := ret[0].(*iotexapi.EstimateActionGasConsumptionResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// EstimateActionGasConsumption indicates an expected call of EstimateActionGasConsumption
func (mr *MockAPIServiceServerMockRecorder) EstimateActionGasConsumption(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "EstimateActionGasConsumption", reflect.TypeOf((*MockAPIServiceServer)(nil).EstimateActionGasConsumption), arg0, arg1)
}

// EstimateGasForAction mocks base method
func (m *MockAPIServiceServer) EstimateGasForAction(arg0 context.Context, arg1 *iotexapi.EstimateGasForActionRequest) (*iotexapi.EstimateGasForActionResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "EstimateGasForAction", arg0, arg1)
	ret0, _ := ret[0].(*iotexapi.EstimateGasForActionResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// EstimateGasForAction indicates an expected call of EstimateGasForAction
func (mr *MockAPIServiceServerMockRecorder) EstimateGasForAction(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "EstimateGasForAction", reflect.TypeOf((*MockAPIServiceServer)(nil).EstimateGasForAction), arg0, arg1)
}

// GetAccount mocks base method
func (m *MockAPIServiceServer) GetAccount(arg0 context.Context, arg1 *iotexapi.GetAccountRequest) (*iotexapi.GetAccountResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAccount", arg0, arg1)
	ret0, _ := ret[0].(*iotexapi.GetAccountResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAccount indicates an expected call of GetAccount
func (mr *MockAPIServiceServerMockRecorder) GetAccount(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAccount", reflect.TypeOf((*MockAPIServiceServer)(nil).GetAccount), arg0, arg1)
}

// GetActions mocks base method
func (m *MockAPIServiceServer) GetActions(arg0 context.Context, arg1 *iotexapi.GetActionsRequest) (*iotexapi.GetActionsResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetActions", arg0, arg1)
	ret0, _ := ret[0].(*iotexapi.GetActionsResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetActions indicates an expected call of GetActions
func (mr *MockAPIServiceServerMockRecorder) GetActions(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetActions", reflect.TypeOf((*MockAPIServiceServer)(nil).GetActions), arg0, arg1)
}

// GetBlockMetas mocks base method
func (m *MockAPIServiceServer) GetBlockMetas(arg0 context.Context, arg1 *iotexapi.GetBlockMetasRequest) (*iotexapi.GetBlockMetasResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetBlockMetas", arg0, arg1)
	ret0, _ := ret[0].(*iotexapi.GetBlockMetasResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetBlockMetas indicates an expected call of GetBlockMetas
func (mr *MockAPIServiceServerMockRecorder) GetBlockMetas(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetBlockMetas", reflect.TypeOf((*MockAPIServiceServer)(nil).GetBlockMetas), arg0, arg1)
}

// GetChainMeta mocks base method
func (m *MockAPIServiceServer) GetChainMeta(arg0 context.Context, arg1 *iotexapi.GetChainMetaRequest) (*iotexapi.GetChainMetaResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetChainMeta", arg0, arg1)
	ret0, _ := ret[0].(*iotexapi.GetChainMetaResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetChainMeta indicates an expected call of GetChainMeta
func (mr *MockAPIServiceServerMockRecorder) GetChainMeta(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetChainMeta", reflect.TypeOf((*MockAPIServiceServer)(nil).GetChainMeta), arg0, arg1)
}

// GetElectionBuckets mocks base method
func (m *MockAPIServiceServer) GetElectionBuckets(arg0 context.Context, arg1 *iotexapi.GetElectionBucketsRequest) (*iotexapi.GetElectionBucketsResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetElectionBuckets", arg0, arg1)
	ret0, _ := ret[0].(*iotexapi.GetElectionBucketsResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetElectionBuckets indicates an expected call of GetElectionBuckets
func (mr *MockAPIServiceServerMockRecorder) GetElectionBuckets(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetElectionBuckets", reflect.TypeOf((*MockAPIServiceServer)(nil).GetElectionBuckets), arg0, arg1)
}

// GetEpochMeta mocks base method
func (m *MockAPIServiceServer) GetEpochMeta(arg0 context.Context, arg1 *iotexapi.GetEpochMetaRequest) (*iotexapi.GetEpochMetaResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetEpochMeta", arg0, arg1)
	ret0, _ := ret[0].(*iotexapi.GetEpochMetaResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetEpochMeta indicates an expected call of GetEpochMeta
func (mr *MockAPIServiceServerMockRecorder) GetEpochMeta(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetEpochMeta", reflect.TypeOf((*MockAPIServiceServer)(nil).GetEpochMeta), arg0, arg1)
}

// GetEvmTransfersByActionHash mocks base method
func (m *MockAPIServiceServer) GetEvmTransfersByActionHash(arg0 context.Context, arg1 *iotexapi.GetEvmTransfersByActionHashRequest) (*iotexapi.GetEvmTransfersByActionHashResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetEvmTransfersByActionHash", arg0, arg1)
	ret0, _ := ret[0].(*iotexapi.GetEvmTransfersByActionHashResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetEvmTransfersByActionHash indicates an expected call of GetEvmTransfersByActionHash
func (mr *MockAPIServiceServerMockRecorder) GetEvmTransfersByActionHash(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetEvmTransfersByActionHash", reflect.TypeOf((*MockAPIServiceServer)(nil).GetEvmTransfersByActionHash), arg0, arg1)
}

// GetEvmTransfersByBlockHeight mocks base method
func (m *MockAPIServiceServer) GetEvmTransfersByBlockHeight(arg0 context.Context, arg1 *iotexapi.GetEvmTransfersByBlockHeightRequest) (*iotexapi.GetEvmTransfersByBlockHeightResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetEvmTransfersByBlockHeight", arg0, arg1)
	ret0, _ := ret[0].(*iotexapi.GetEvmTransfersByBlockHeightResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetEvmTransfersByBlockHeight indicates an expected call of GetEvmTransfersByBlockHeight
func (mr *MockAPIServiceServerMockRecorder) GetEvmTransfersByBlockHeight(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetEvmTransfersByBlockHeight", reflect.TypeOf((*MockAPIServiceServer)(nil).GetEvmTransfersByBlockHeight), arg0, arg1)
}

// GetLogs mocks base method
func (m *MockAPIServiceServer) GetLogs(arg0 context.Context, arg1 *iotexapi.GetLogsRequest) (*iotexapi.GetLogsResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetLogs", arg0, arg1)
	ret0, _ := ret[0].(*iotexapi.GetLogsResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetLogs indicates an expected call of GetLogs
func (mr *MockAPIServiceServerMockRecorder) GetLogs(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetLogs", reflect.TypeOf((*MockAPIServiceServer)(nil).GetLogs), arg0, arg1)
}

// GetRawBlocks mocks base method
func (m *MockAPIServiceServer) GetRawBlocks(arg0 context.Context, arg1 *iotexapi.GetRawBlocksRequest) (*iotexapi.GetRawBlocksResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetRawBlocks", arg0, arg1)
	ret0, _ := ret[0].(*iotexapi.GetRawBlocksResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetRawBlocks indicates an expected call of GetRawBlocks
func (mr *MockAPIServiceServerMockRecorder) GetRawBlocks(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetRawBlocks", reflect.TypeOf((*MockAPIServiceServer)(nil).GetRawBlocks), arg0, arg1)
}

// GetReceiptByAction mocks base method
func (m *MockAPIServiceServer) GetReceiptByAction(arg0 context.Context, arg1 *iotexapi.GetReceiptByActionRequest) (*iotexapi.GetReceiptByActionResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetReceiptByAction", arg0, arg1)
	ret0, _ := ret[0].(*iotexapi.GetReceiptByActionResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetReceiptByAction indicates an expected call of GetReceiptByAction
func (mr *MockAPIServiceServerMockRecorder) GetReceiptByAction(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetReceiptByAction", reflect.TypeOf((*MockAPIServiceServer)(nil).GetReceiptByAction), arg0, arg1)
}

// GetServerMeta mocks base method
func (m *MockAPIServiceServer) GetServerMeta(arg0 context.Context, arg1 *iotexapi.GetServerMetaRequest) (*iotexapi.GetServerMetaResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetServerMeta", arg0, arg1)
	ret0, _ := ret[0].(*iotexapi.GetServerMetaResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetServerMeta indicates an expected call of GetServerMeta
func (mr *MockAPIServiceServerMockRecorder) GetServerMeta(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetServerMeta", reflect.TypeOf((*MockAPIServiceServer)(nil).GetServerMeta), arg0, arg1)
}

// GetTransactionLogByActionHash mocks base method
func (m *MockAPIServiceServer) GetTransactionLogByActionHash(arg0 context.Context, arg1 *iotexapi.GetTransactionLogByActionHashRequest) (*iotexapi.GetTransactionLogByActionHashResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTransactionLogByActionHash", arg0, arg1)
	ret0, _ := ret[0].(*iotexapi.GetTransactionLogByActionHashResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetTransactionLogByActionHash indicates an expected call of GetTransactionLogByActionHash
func (mr *MockAPIServiceServerMockRecorder) GetTransactionLogByActionHash(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTransactionLogByActionHash", reflect.TypeOf((*MockAPIServiceServer)(nil).GetTransactionLogByActionHash), arg0, arg1)
}

// GetTransactionLogByBlockHeight mocks base method
func (m *MockAPIServiceServer) GetTransactionLogByBlockHeight(arg0 context.Context, arg1 *iotexapi.GetTransactionLogByBlockHeightRequest) (*iotexapi.GetTransactionLogByBlockHeightResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTransactionLogByBlockHeight", arg0, arg1)
	ret0, _ := ret[0].(*iotexapi.GetTransactionLogByBlockHeightResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetTransactionLogByBlockHeight indicates an expected call of GetTransactionLogByBlockHeight
func (mr *MockAPIServiceServerMockRecorder) GetTransactionLogByBlockHeight(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTransactionLogByBlockHeight", reflect.TypeOf((*MockAPIServiceServer)(nil).GetTransactionLogByBlockHeight), arg0, arg1)
}

// ReadContract mocks base method
func (m *MockAPIServiceServer) ReadContract(arg0 context.Context, arg1 *iotexapi.ReadContractRequest) (*iotexapi.ReadContractResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ReadContract", arg0, arg1)
	ret0, _ := ret[0].(*iotexapi.ReadContractResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ReadContract indicates an expected call of ReadContract
func (mr *MockAPIServiceServerMockRecorder) ReadContract(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReadContract", reflect.TypeOf((*MockAPIServiceServer)(nil).ReadContract), arg0, arg1)
}

// ReadState mocks base method
func (m *MockAPIServiceServer) ReadState(arg0 context.Context, arg1 *iotexapi.ReadStateRequest) (*iotexapi.ReadStateResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ReadState", arg0, arg1)
	ret0, _ := ret[0].(*iotexapi.ReadStateResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ReadState indicates an expected call of ReadState
func (mr *MockAPIServiceServerMockRecorder) ReadState(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReadState", reflect.TypeOf((*MockAPIServiceServer)(nil).ReadState), arg0, arg1)
}

// SendAction mocks base method
func (m *MockAPIServiceServer) SendAction(arg0 context.Context, arg1 *iotexapi.SendActionRequest) (*iotexapi.SendActionResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SendAction", arg0, arg1)
	ret0, _ := ret[0].(*iotexapi.SendActionResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SendAction indicates an expected call of SendAction
func (mr *MockAPIServiceServerMockRecorder) SendAction(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendAction", reflect.TypeOf((*MockAPIServiceServer)(nil).SendAction), arg0, arg1)
}

// StreamBlocks mocks base method
func (m *MockAPIServiceServer) StreamBlocks(arg0 *iotexapi.StreamBlocksRequest, arg1 iotexapi.APIService_StreamBlocksServer) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "StreamBlocks", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// StreamBlocks indicates an expected call of StreamBlocks
func (mr *MockAPIServiceServerMockRecorder) StreamBlocks(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StreamBlocks", reflect.TypeOf((*MockAPIServiceServer)(nil).StreamBlocks), arg0, arg1)
}

// StreamLogs mocks base method
func (m *MockAPIServiceServer) StreamLogs(arg0 *iotexapi.StreamLogsRequest, arg1 iotexapi.APIService_StreamLogsServer) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "StreamLogs", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// StreamLogs indicates an expected call of StreamLogs
func (mr *MockAPIServiceServerMockRecorder) StreamLogs(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StreamLogs", reflect.TypeOf((*MockAPIServiceServer)(nil).StreamLogs), arg0, arg1)
}

// SuggestGasPrice mocks base method
func (m *MockAPIServiceServer) SuggestGasPrice(arg0 context.Context, arg1 *iotexapi.SuggestGasPriceRequest) (*iotexapi.SuggestGasPriceResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SuggestGasPrice", arg0, arg1)
	ret0, _ := ret[0].(*iotexapi.SuggestGasPriceResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SuggestGasPrice indicates an expected call of SuggestGasPrice
func (mr *MockAPIServiceServerMockRecorder) SuggestGasPrice(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SuggestGasPrice", reflect.TypeOf((*MockAPIServiceServer)(nil).SuggestGasPrice), arg0, arg1)
}
