// Copyright (c) 2018 IoTeX
// This is an alpha (internal) release and is not suitable for production. This source code is provided 'as is' and no
// warranties are given as to title or non-infringement, merchantability or fitness for purpose and, to the extent
// permitted by law, all liability for your use of the code is disclaimed. This source code is governed by Apache
// License 2.0 that can be found in the LICENSE file.

// To compile the proto, run:
//      protoc --go_out=plugins=grpc:$GOPATH/src *.proto

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.34.2
// 	protoc        v5.27.1
// source: proto/types/action.proto

package iotextypes

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type Encoding int32

const (
	Encoding_IOTEX_PROTOBUF       Encoding = 0
	Encoding_ETHEREUM_EIP155      Encoding = 1
	Encoding_ETHEREUM_RLP         Encoding = 1
	Encoding_ETHEREUM_UNPROTECTED Encoding = 2
	Encoding_TX_CONTAINER         Encoding = 128
)

// Enum value maps for Encoding.
var (
	Encoding_name = map[int32]string{
		0: "IOTEX_PROTOBUF",
		1: "ETHEREUM_EIP155",
		// Duplicate value: 1: "ETHEREUM_RLP",
		2:   "ETHEREUM_UNPROTECTED",
		128: "TX_CONTAINER",
	}
	Encoding_value = map[string]int32{
		"IOTEX_PROTOBUF":       0,
		"ETHEREUM_EIP155":      1,
		"ETHEREUM_RLP":         1,
		"ETHEREUM_UNPROTECTED": 2,
		"TX_CONTAINER":         128,
	}
)

func (x Encoding) Enum() *Encoding {
	p := new(Encoding)
	*p = x
	return p
}

func (x Encoding) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Encoding) Descriptor() protoreflect.EnumDescriptor {
	return file_proto_types_action_proto_enumTypes[0].Descriptor()
}

func (Encoding) Type() protoreflect.EnumType {
	return &file_proto_types_action_proto_enumTypes[0]
}

func (x Encoding) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Encoding.Descriptor instead.
func (Encoding) EnumDescriptor() ([]byte, []int) {
	return file_proto_types_action_proto_rawDescGZIP(), []int{0}
}

type RewardType int32

const (
	RewardType_BlockReward RewardType = 0
	RewardType_EpochReward RewardType = 1
)

// Enum value maps for RewardType.
var (
	RewardType_name = map[int32]string{
		0: "BlockReward",
		1: "EpochReward",
	}
	RewardType_value = map[string]int32{
		"BlockReward": 0,
		"EpochReward": 1,
	}
)

func (x RewardType) Enum() *RewardType {
	p := new(RewardType)
	*p = x
	return p
}

func (x RewardType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (RewardType) Descriptor() protoreflect.EnumDescriptor {
	return file_proto_types_action_proto_enumTypes[1].Descriptor()
}

func (RewardType) Type() protoreflect.EnumType {
	return &file_proto_types_action_proto_enumTypes[1]
}

func (x RewardType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use RewardType.Descriptor instead.
func (RewardType) EnumDescriptor() ([]byte, []int) {
	return file_proto_types_action_proto_rawDescGZIP(), []int{1}
}

type Transfer struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// used by state-based model
	Amount    string `protobuf:"bytes,1,opt,name=amount,proto3" json:"amount,omitempty"`
	Recipient string `protobuf:"bytes,2,opt,name=recipient,proto3" json:"recipient,omitempty"`
	Payload   []byte `protobuf:"bytes,3,opt,name=payload,proto3" json:"payload,omitempty"`
}

func (x *Transfer) Reset() {
	*x = Transfer{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_types_action_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Transfer) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Transfer) ProtoMessage() {}

func (x *Transfer) ProtoReflect() protoreflect.Message {
	mi := &file_proto_types_action_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Transfer.ProtoReflect.Descriptor instead.
func (*Transfer) Descriptor() ([]byte, []int) {
	return file_proto_types_action_proto_rawDescGZIP(), []int{0}
}

func (x *Transfer) GetAmount() string {
	if x != nil {
		return x.Amount
	}
	return ""
}

func (x *Transfer) GetRecipient() string {
	if x != nil {
		return x.Recipient
	}
	return ""
}

func (x *Transfer) GetPayload() []byte {
	if x != nil {
		return x.Payload
	}
	return nil
}

// Candidates and list of candidates
type Candidate struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Address       string `protobuf:"bytes,1,opt,name=address,proto3" json:"address,omitempty"`
	Votes         []byte `protobuf:"bytes,2,opt,name=votes,proto3" json:"votes,omitempty"`
	PubKey        []byte `protobuf:"bytes,3,opt,name=pubKey,proto3" json:"pubKey,omitempty"`
	RewardAddress string `protobuf:"bytes,4,opt,name=rewardAddress,proto3" json:"rewardAddress,omitempty"`
}

func (x *Candidate) Reset() {
	*x = Candidate{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_types_action_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Candidate) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Candidate) ProtoMessage() {}

func (x *Candidate) ProtoReflect() protoreflect.Message {
	mi := &file_proto_types_action_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Candidate.ProtoReflect.Descriptor instead.
func (*Candidate) Descriptor() ([]byte, []int) {
	return file_proto_types_action_proto_rawDescGZIP(), []int{1}
}

func (x *Candidate) GetAddress() string {
	if x != nil {
		return x.Address
	}
	return ""
}

func (x *Candidate) GetVotes() []byte {
	if x != nil {
		return x.Votes
	}
	return nil
}

func (x *Candidate) GetPubKey() []byte {
	if x != nil {
		return x.PubKey
	}
	return nil
}

func (x *Candidate) GetRewardAddress() string {
	if x != nil {
		return x.RewardAddress
	}
	return ""
}

type CandidateList struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Candidates []*Candidate `protobuf:"bytes,1,rep,name=candidates,proto3" json:"candidates,omitempty"`
}

func (x *CandidateList) Reset() {
	*x = CandidateList{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_types_action_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CandidateList) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CandidateList) ProtoMessage() {}

func (x *CandidateList) ProtoReflect() protoreflect.Message {
	mi := &file_proto_types_action_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CandidateList.ProtoReflect.Descriptor instead.
func (*CandidateList) Descriptor() ([]byte, []int) {
	return file_proto_types_action_proto_rawDescGZIP(), []int{2}
}

func (x *CandidateList) GetCandidates() []*Candidate {
	if x != nil {
		return x.Candidates
	}
	return nil
}

type PutPollResult struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Height     uint64         `protobuf:"varint,1,opt,name=height,proto3" json:"height,omitempty"`
	Candidates *CandidateList `protobuf:"bytes,2,opt,name=candidates,proto3" json:"candidates,omitempty"`
}

func (x *PutPollResult) Reset() {
	*x = PutPollResult{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_types_action_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PutPollResult) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PutPollResult) ProtoMessage() {}

func (x *PutPollResult) ProtoReflect() protoreflect.Message {
	mi := &file_proto_types_action_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PutPollResult.ProtoReflect.Descriptor instead.
func (*PutPollResult) Descriptor() ([]byte, []int) {
	return file_proto_types_action_proto_rawDescGZIP(), []int{3}
}

func (x *PutPollResult) GetHeight() uint64 {
	if x != nil {
		return x.Height
	}
	return 0
}

func (x *PutPollResult) GetCandidates() *CandidateList {
	if x != nil {
		return x.Candidates
	}
	return nil
}

type TxContainer struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Raw []byte `protobuf:"bytes,1,opt,name=raw,proto3" json:"raw,omitempty"`
}

func (x *TxContainer) Reset() {
	*x = TxContainer{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_types_action_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TxContainer) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TxContainer) ProtoMessage() {}

func (x *TxContainer) ProtoReflect() protoreflect.Message {
	mi := &file_proto_types_action_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TxContainer.ProtoReflect.Descriptor instead.
func (*TxContainer) Descriptor() ([]byte, []int) {
	return file_proto_types_action_proto_rawDescGZIP(), []int{4}
}

func (x *TxContainer) GetRaw() []byte {
	if x != nil {
		return x.Raw
	}
	return nil
}

type Execution struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Amount   string `protobuf:"bytes,1,opt,name=amount,proto3" json:"amount,omitempty"`
	Contract string `protobuf:"bytes,2,opt,name=contract,proto3" json:"contract,omitempty"`
	Data     []byte `protobuf:"bytes,3,opt,name=data,proto3" json:"data,omitempty"`
}

func (x *Execution) Reset() {
	*x = Execution{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_types_action_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Execution) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Execution) ProtoMessage() {}

func (x *Execution) ProtoReflect() protoreflect.Message {
	mi := &file_proto_types_action_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Execution.ProtoReflect.Descriptor instead.
func (*Execution) Descriptor() ([]byte, []int) {
	return file_proto_types_action_proto_rawDescGZIP(), []int{5}
}

func (x *Execution) GetAmount() string {
	if x != nil {
		return x.Amount
	}
	return ""
}

func (x *Execution) GetContract() string {
	if x != nil {
		return x.Contract
	}
	return ""
}

func (x *Execution) GetData() []byte {
	if x != nil {
		return x.Data
	}
	return nil
}

type AccessTuple struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Address     string   `protobuf:"bytes,1,opt,name=address,proto3" json:"address,omitempty"`
	StorageKeys []string `protobuf:"bytes,2,rep,name=storageKeys,proto3" json:"storageKeys,omitempty"`
}

func (x *AccessTuple) Reset() {
	*x = AccessTuple{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_types_action_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AccessTuple) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AccessTuple) ProtoMessage() {}

func (x *AccessTuple) ProtoReflect() protoreflect.Message {
	mi := &file_proto_types_action_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AccessTuple.ProtoReflect.Descriptor instead.
func (*AccessTuple) Descriptor() ([]byte, []int) {
	return file_proto_types_action_proto_rawDescGZIP(), []int{6}
}

func (x *AccessTuple) GetAddress() string {
	if x != nil {
		return x.Address
	}
	return ""
}

func (x *AccessTuple) GetStorageKeys() []string {
	if x != nil {
		return x.StorageKeys
	}
	return nil
}

type BlobTxSidecar struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Blobs       [][]byte `protobuf:"bytes,1,rep,name=blobs,proto3" json:"blobs,omitempty"`             // Blobs needed by the blob pool
	Commitments [][]byte `protobuf:"bytes,2,rep,name=commitments,proto3" json:"commitments,omitempty"` // Commitments needed by the blob pool
	Proofs      [][]byte `protobuf:"bytes,3,rep,name=proofs,proto3" json:"proofs,omitempty"`           // Proofs needed by the blob pool
}

func (x *BlobTxSidecar) Reset() {
	*x = BlobTxSidecar{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_types_action_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BlobTxSidecar) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BlobTxSidecar) ProtoMessage() {}

func (x *BlobTxSidecar) ProtoReflect() protoreflect.Message {
	mi := &file_proto_types_action_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BlobTxSidecar.ProtoReflect.Descriptor instead.
func (*BlobTxSidecar) Descriptor() ([]byte, []int) {
	return file_proto_types_action_proto_rawDescGZIP(), []int{7}
}

func (x *BlobTxSidecar) GetBlobs() [][]byte {
	if x != nil {
		return x.Blobs
	}
	return nil
}

func (x *BlobTxSidecar) GetCommitments() [][]byte {
	if x != nil {
		return x.Commitments
	}
	return nil
}

func (x *BlobTxSidecar) GetProofs() [][]byte {
	if x != nil {
		return x.Proofs
	}
	return nil
}

type BlobTxData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BlobFeeCap    string         `protobuf:"bytes,1,opt,name=blobFeeCap,proto3" json:"blobFeeCap,omitempty"`
	BlobHashes    [][]byte       `protobuf:"bytes,2,rep,name=blobHashes,proto3" json:"blobHashes,omitempty"`
	BlobTxSidecar *BlobTxSidecar `protobuf:"bytes,3,opt,name=blobTxSidecar,proto3" json:"blobTxSidecar,omitempty"`
}

func (x *BlobTxData) Reset() {
	*x = BlobTxData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_types_action_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BlobTxData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BlobTxData) ProtoMessage() {}

func (x *BlobTxData) ProtoReflect() protoreflect.Message {
	mi := &file_proto_types_action_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BlobTxData.ProtoReflect.Descriptor instead.
func (*BlobTxData) Descriptor() ([]byte, []int) {
	return file_proto_types_action_proto_rawDescGZIP(), []int{8}
}

func (x *BlobTxData) GetBlobFeeCap() string {
	if x != nil {
		return x.BlobFeeCap
	}
	return ""
}

func (x *BlobTxData) GetBlobHashes() [][]byte {
	if x != nil {
		return x.BlobHashes
	}
	return nil
}

func (x *BlobTxData) GetBlobTxSidecar() *BlobTxSidecar {
	if x != nil {
		return x.BlobTxSidecar
	}
	return nil
}

type BlobTxSidecars struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TxHash   [][]byte         `protobuf:"bytes,1,rep,name=txHash,proto3" json:"txHash,omitempty"`
	Sidecars []*BlobTxSidecar `protobuf:"bytes,2,rep,name=sidecars,proto3" json:"sidecars,omitempty"`
}

func (x *BlobTxSidecars) Reset() {
	*x = BlobTxSidecars{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_types_action_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BlobTxSidecars) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BlobTxSidecars) ProtoMessage() {}

func (x *BlobTxSidecars) ProtoReflect() protoreflect.Message {
	mi := &file_proto_types_action_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BlobTxSidecars.ProtoReflect.Descriptor instead.
func (*BlobTxSidecars) Descriptor() ([]byte, []int) {
	return file_proto_types_action_proto_rawDescGZIP(), []int{9}
}

func (x *BlobTxSidecars) GetTxHash() [][]byte {
	if x != nil {
		return x.TxHash
	}
	return nil
}

func (x *BlobTxSidecars) GetSidecars() []*BlobTxSidecar {
	if x != nil {
		return x.Sidecars
	}
	return nil
}

// create stake
type StakeCreate struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CandidateName  string `protobuf:"bytes,1,opt,name=candidateName,proto3" json:"candidateName,omitempty"`
	StakedAmount   string `protobuf:"bytes,2,opt,name=stakedAmount,proto3" json:"stakedAmount,omitempty"`
	StakedDuration uint32 `protobuf:"varint,3,opt,name=stakedDuration,proto3" json:"stakedDuration,omitempty"`
	AutoStake      bool   `protobuf:"varint,4,opt,name=autoStake,proto3" json:"autoStake,omitempty"`
	Payload        []byte `protobuf:"bytes,5,opt,name=payload,proto3" json:"payload,omitempty"`
}

func (x *StakeCreate) Reset() {
	*x = StakeCreate{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_types_action_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StakeCreate) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StakeCreate) ProtoMessage() {}

func (x *StakeCreate) ProtoReflect() protoreflect.Message {
	mi := &file_proto_types_action_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StakeCreate.ProtoReflect.Descriptor instead.
func (*StakeCreate) Descriptor() ([]byte, []int) {
	return file_proto_types_action_proto_rawDescGZIP(), []int{10}
}

func (x *StakeCreate) GetCandidateName() string {
	if x != nil {
		return x.CandidateName
	}
	return ""
}

func (x *StakeCreate) GetStakedAmount() string {
	if x != nil {
		return x.StakedAmount
	}
	return ""
}

func (x *StakeCreate) GetStakedDuration() uint32 {
	if x != nil {
		return x.StakedDuration
	}
	return 0
}

func (x *StakeCreate) GetAutoStake() bool {
	if x != nil {
		return x.AutoStake
	}
	return false
}

func (x *StakeCreate) GetPayload() []byte {
	if x != nil {
		return x.Payload
	}
	return nil
}

// migrate stake
type StakeMigrate struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BucketIndex uint64 `protobuf:"varint,1,opt,name=bucketIndex,proto3" json:"bucketIndex,omitempty"`
}

func (x *StakeMigrate) Reset() {
	*x = StakeMigrate{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_types_action_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StakeMigrate) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StakeMigrate) ProtoMessage() {}

func (x *StakeMigrate) ProtoReflect() protoreflect.Message {
	mi := &file_proto_types_action_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StakeMigrate.ProtoReflect.Descriptor instead.
func (*StakeMigrate) Descriptor() ([]byte, []int) {
	return file_proto_types_action_proto_rawDescGZIP(), []int{11}
}

func (x *StakeMigrate) GetBucketIndex() uint64 {
	if x != nil {
		return x.BucketIndex
	}
	return 0
}

// unstake or withdraw
type StakeReclaim struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BucketIndex uint64 `protobuf:"varint,1,opt,name=bucketIndex,proto3" json:"bucketIndex,omitempty"`
	Payload     []byte `protobuf:"bytes,2,opt,name=payload,proto3" json:"payload,omitempty"`
}

func (x *StakeReclaim) Reset() {
	*x = StakeReclaim{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_types_action_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StakeReclaim) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StakeReclaim) ProtoMessage() {}

func (x *StakeReclaim) ProtoReflect() protoreflect.Message {
	mi := &file_proto_types_action_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StakeReclaim.ProtoReflect.Descriptor instead.
func (*StakeReclaim) Descriptor() ([]byte, []int) {
	return file_proto_types_action_proto_rawDescGZIP(), []int{12}
}

func (x *StakeReclaim) GetBucketIndex() uint64 {
	if x != nil {
		return x.BucketIndex
	}
	return 0
}

func (x *StakeReclaim) GetPayload() []byte {
	if x != nil {
		return x.Payload
	}
	return nil
}

// add the amount of bucket
type StakeAddDeposit struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BucketIndex uint64 `protobuf:"varint,1,opt,name=bucketIndex,proto3" json:"bucketIndex,omitempty"`
	Amount      string `protobuf:"bytes,2,opt,name=amount,proto3" json:"amount,omitempty"`
	Payload     []byte `protobuf:"bytes,3,opt,name=payload,proto3" json:"payload,omitempty"`
}

func (x *StakeAddDeposit) Reset() {
	*x = StakeAddDeposit{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_types_action_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StakeAddDeposit) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StakeAddDeposit) ProtoMessage() {}

func (x *StakeAddDeposit) ProtoReflect() protoreflect.Message {
	mi := &file_proto_types_action_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StakeAddDeposit.ProtoReflect.Descriptor instead.
func (*StakeAddDeposit) Descriptor() ([]byte, []int) {
	return file_proto_types_action_proto_rawDescGZIP(), []int{13}
}

func (x *StakeAddDeposit) GetBucketIndex() uint64 {
	if x != nil {
		return x.BucketIndex
	}
	return 0
}

func (x *StakeAddDeposit) GetAmount() string {
	if x != nil {
		return x.Amount
	}
	return ""
}

func (x *StakeAddDeposit) GetPayload() []byte {
	if x != nil {
		return x.Payload
	}
	return nil
}

// restake the duration and autoStake flag of bucket
type StakeRestake struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BucketIndex    uint64 `protobuf:"varint,1,opt,name=bucketIndex,proto3" json:"bucketIndex,omitempty"`
	StakedDuration uint32 `protobuf:"varint,2,opt,name=stakedDuration,proto3" json:"stakedDuration,omitempty"`
	AutoStake      bool   `protobuf:"varint,3,opt,name=autoStake,proto3" json:"autoStake,omitempty"`
	Payload        []byte `protobuf:"bytes,4,opt,name=payload,proto3" json:"payload,omitempty"`
}

func (x *StakeRestake) Reset() {
	*x = StakeRestake{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_types_action_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StakeRestake) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StakeRestake) ProtoMessage() {}

func (x *StakeRestake) ProtoReflect() protoreflect.Message {
	mi := &file_proto_types_action_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StakeRestake.ProtoReflect.Descriptor instead.
func (*StakeRestake) Descriptor() ([]byte, []int) {
	return file_proto_types_action_proto_rawDescGZIP(), []int{14}
}

func (x *StakeRestake) GetBucketIndex() uint64 {
	if x != nil {
		return x.BucketIndex
	}
	return 0
}

func (x *StakeRestake) GetStakedDuration() uint32 {
	if x != nil {
		return x.StakedDuration
	}
	return 0
}

func (x *StakeRestake) GetAutoStake() bool {
	if x != nil {
		return x.AutoStake
	}
	return false
}

func (x *StakeRestake) GetPayload() []byte {
	if x != nil {
		return x.Payload
	}
	return nil
}

// move the bucket to vote for another candidate or transfer the ownership of bucket to another voters
type StakeChangeCandidate struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BucketIndex   uint64 `protobuf:"varint,1,opt,name=bucketIndex,proto3" json:"bucketIndex,omitempty"`
	CandidateName string `protobuf:"bytes,2,opt,name=candidateName,proto3" json:"candidateName,omitempty"`
	Payload       []byte `protobuf:"bytes,3,opt,name=payload,proto3" json:"payload,omitempty"`
}

func (x *StakeChangeCandidate) Reset() {
	*x = StakeChangeCandidate{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_types_action_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StakeChangeCandidate) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StakeChangeCandidate) ProtoMessage() {}

func (x *StakeChangeCandidate) ProtoReflect() protoreflect.Message {
	mi := &file_proto_types_action_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StakeChangeCandidate.ProtoReflect.Descriptor instead.
func (*StakeChangeCandidate) Descriptor() ([]byte, []int) {
	return file_proto_types_action_proto_rawDescGZIP(), []int{15}
}

func (x *StakeChangeCandidate) GetBucketIndex() uint64 {
	if x != nil {
		return x.BucketIndex
	}
	return 0
}

func (x *StakeChangeCandidate) GetCandidateName() string {
	if x != nil {
		return x.CandidateName
	}
	return ""
}

func (x *StakeChangeCandidate) GetPayload() []byte {
	if x != nil {
		return x.Payload
	}
	return nil
}

type StakeTransferOwnership struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BucketIndex  uint64 `protobuf:"varint,1,opt,name=bucketIndex,proto3" json:"bucketIndex,omitempty"`
	VoterAddress string `protobuf:"bytes,2,opt,name=voterAddress,proto3" json:"voterAddress,omitempty"`
	Payload      []byte `protobuf:"bytes,3,opt,name=payload,proto3" json:"payload,omitempty"`
}

func (x *StakeTransferOwnership) Reset() {
	*x = StakeTransferOwnership{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_types_action_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StakeTransferOwnership) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StakeTransferOwnership) ProtoMessage() {}

func (x *StakeTransferOwnership) ProtoReflect() protoreflect.Message {
	mi := &file_proto_types_action_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StakeTransferOwnership.ProtoReflect.Descriptor instead.
func (*StakeTransferOwnership) Descriptor() ([]byte, []int) {
	return file_proto_types_action_proto_rawDescGZIP(), []int{16}
}

func (x *StakeTransferOwnership) GetBucketIndex() uint64 {
	if x != nil {
		return x.BucketIndex
	}
	return 0
}

func (x *StakeTransferOwnership) GetVoterAddress() string {
	if x != nil {
		return x.VoterAddress
	}
	return ""
}

func (x *StakeTransferOwnership) GetPayload() []byte {
	if x != nil {
		return x.Payload
	}
	return nil
}

type CandidateBasicInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name            string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	OperatorAddress string `protobuf:"bytes,2,opt,name=operatorAddress,proto3" json:"operatorAddress,omitempty"`
	RewardAddress   string `protobuf:"bytes,3,opt,name=rewardAddress,proto3" json:"rewardAddress,omitempty"`
}

func (x *CandidateBasicInfo) Reset() {
	*x = CandidateBasicInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_types_action_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CandidateBasicInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CandidateBasicInfo) ProtoMessage() {}

func (x *CandidateBasicInfo) ProtoReflect() protoreflect.Message {
	mi := &file_proto_types_action_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CandidateBasicInfo.ProtoReflect.Descriptor instead.
func (*CandidateBasicInfo) Descriptor() ([]byte, []int) {
	return file_proto_types_action_proto_rawDescGZIP(), []int{17}
}

func (x *CandidateBasicInfo) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *CandidateBasicInfo) GetOperatorAddress() string {
	if x != nil {
		return x.OperatorAddress
	}
	return ""
}

func (x *CandidateBasicInfo) GetRewardAddress() string {
	if x != nil {
		return x.RewardAddress
	}
	return ""
}

type CandidateRegister struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Candidate      *CandidateBasicInfo `protobuf:"bytes,1,opt,name=candidate,proto3" json:"candidate,omitempty"`
	StakedAmount   string              `protobuf:"bytes,2,opt,name=stakedAmount,proto3" json:"stakedAmount,omitempty"`
	StakedDuration uint32              `protobuf:"varint,3,opt,name=stakedDuration,proto3" json:"stakedDuration,omitempty"`
	AutoStake      bool                `protobuf:"varint,4,opt,name=autoStake,proto3" json:"autoStake,omitempty"`
	OwnerAddress   string              `protobuf:"bytes,5,opt,name=ownerAddress,proto3" json:"ownerAddress,omitempty"` // if ownerAddress is absent, owner of candidate is the sender
	Payload        []byte              `protobuf:"bytes,6,opt,name=payload,proto3" json:"payload,omitempty"`
}

func (x *CandidateRegister) Reset() {
	*x = CandidateRegister{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_types_action_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CandidateRegister) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CandidateRegister) ProtoMessage() {}

func (x *CandidateRegister) ProtoReflect() protoreflect.Message {
	mi := &file_proto_types_action_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CandidateRegister.ProtoReflect.Descriptor instead.
func (*CandidateRegister) Descriptor() ([]byte, []int) {
	return file_proto_types_action_proto_rawDescGZIP(), []int{18}
}

func (x *CandidateRegister) GetCandidate() *CandidateBasicInfo {
	if x != nil {
		return x.Candidate
	}
	return nil
}

func (x *CandidateRegister) GetStakedAmount() string {
	if x != nil {
		return x.StakedAmount
	}
	return ""
}

func (x *CandidateRegister) GetStakedDuration() uint32 {
	if x != nil {
		return x.StakedDuration
	}
	return 0
}

func (x *CandidateRegister) GetAutoStake() bool {
	if x != nil {
		return x.AutoStake
	}
	return false
}

func (x *CandidateRegister) GetOwnerAddress() string {
	if x != nil {
		return x.OwnerAddress
	}
	return ""
}

func (x *CandidateRegister) GetPayload() []byte {
	if x != nil {
		return x.Payload
	}
	return nil
}

type CandidateTransferOwnership struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	NewOwnerAddress string `protobuf:"bytes,1,opt,name=newOwnerAddress,proto3" json:"newOwnerAddress,omitempty"`
	Payload         []byte `protobuf:"bytes,2,opt,name=payload,proto3" json:"payload,omitempty"`
}

func (x *CandidateTransferOwnership) Reset() {
	*x = CandidateTransferOwnership{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_types_action_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CandidateTransferOwnership) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CandidateTransferOwnership) ProtoMessage() {}

func (x *CandidateTransferOwnership) ProtoReflect() protoreflect.Message {
	mi := &file_proto_types_action_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CandidateTransferOwnership.ProtoReflect.Descriptor instead.
func (*CandidateTransferOwnership) Descriptor() ([]byte, []int) {
	return file_proto_types_action_proto_rawDescGZIP(), []int{19}
}

func (x *CandidateTransferOwnership) GetNewOwnerAddress() string {
	if x != nil {
		return x.NewOwnerAddress
	}
	return ""
}

func (x *CandidateTransferOwnership) GetPayload() []byte {
	if x != nil {
		return x.Payload
	}
	return nil
}

type CandidateActivate struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BucketIndex uint64 `protobuf:"varint,1,opt,name=bucketIndex,proto3" json:"bucketIndex,omitempty"`
}

func (x *CandidateActivate) Reset() {
	*x = CandidateActivate{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_types_action_proto_msgTypes[20]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CandidateActivate) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CandidateActivate) ProtoMessage() {}

func (x *CandidateActivate) ProtoReflect() protoreflect.Message {
	mi := &file_proto_types_action_proto_msgTypes[20]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CandidateActivate.ProtoReflect.Descriptor instead.
func (*CandidateActivate) Descriptor() ([]byte, []int) {
	return file_proto_types_action_proto_rawDescGZIP(), []int{20}
}

func (x *CandidateActivate) GetBucketIndex() uint64 {
	if x != nil {
		return x.BucketIndex
	}
	return 0
}

type CandidateEndorsement struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BucketIndex uint64 `protobuf:"varint,1,opt,name=bucketIndex,proto3" json:"bucketIndex,omitempty"`
	Endorse     bool   `protobuf:"varint,2,opt,name=endorse,proto3" json:"endorse,omitempty"` // deprecated
	Op          uint32 `protobuf:"varint,3,opt,name=op,proto3" json:"op,omitempty"`
}

func (x *CandidateEndorsement) Reset() {
	*x = CandidateEndorsement{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_types_action_proto_msgTypes[21]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CandidateEndorsement) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CandidateEndorsement) ProtoMessage() {}

func (x *CandidateEndorsement) ProtoReflect() protoreflect.Message {
	mi := &file_proto_types_action_proto_msgTypes[21]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CandidateEndorsement.ProtoReflect.Descriptor instead.
func (*CandidateEndorsement) Descriptor() ([]byte, []int) {
	return file_proto_types_action_proto_rawDescGZIP(), []int{21}
}

func (x *CandidateEndorsement) GetBucketIndex() uint64 {
	if x != nil {
		return x.BucketIndex
	}
	return 0
}

func (x *CandidateEndorsement) GetEndorse() bool {
	if x != nil {
		return x.Endorse
	}
	return false
}

func (x *CandidateEndorsement) GetOp() uint32 {
	if x != nil {
		return x.Op
	}
	return 0
}

type StartSubChain struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// TODO: chainID chould be assigned by system and returned via a receipt
	ChainID            uint32 `protobuf:"varint,1,opt,name=chainID,proto3" json:"chainID,omitempty"`
	SecurityDeposit    string `protobuf:"bytes,2,opt,name=securityDeposit,proto3" json:"securityDeposit,omitempty"`
	OperationDeposit   string `protobuf:"bytes,3,opt,name=operationDeposit,proto3" json:"operationDeposit,omitempty"`
	StartHeight        uint64 `protobuf:"varint,4,opt,name=startHeight,proto3" json:"startHeight,omitempty"`
	ParentHeightOffset uint64 `protobuf:"varint,5,opt,name=parentHeightOffset,proto3" json:"parentHeightOffset,omitempty"`
}

func (x *StartSubChain) Reset() {
	*x = StartSubChain{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_types_action_proto_msgTypes[22]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StartSubChain) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StartSubChain) ProtoMessage() {}

func (x *StartSubChain) ProtoReflect() protoreflect.Message {
	mi := &file_proto_types_action_proto_msgTypes[22]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StartSubChain.ProtoReflect.Descriptor instead.
func (*StartSubChain) Descriptor() ([]byte, []int) {
	return file_proto_types_action_proto_rawDescGZIP(), []int{22}
}

func (x *StartSubChain) GetChainID() uint32 {
	if x != nil {
		return x.ChainID
	}
	return 0
}

func (x *StartSubChain) GetSecurityDeposit() string {
	if x != nil {
		return x.SecurityDeposit
	}
	return ""
}

func (x *StartSubChain) GetOperationDeposit() string {
	if x != nil {
		return x.OperationDeposit
	}
	return ""
}

func (x *StartSubChain) GetStartHeight() uint64 {
	if x != nil {
		return x.StartHeight
	}
	return 0
}

func (x *StartSubChain) GetParentHeightOffset() uint64 {
	if x != nil {
		return x.ParentHeightOffset
	}
	return 0
}

type StopSubChain struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ChainID         uint32 `protobuf:"varint,1,opt,name=chainID,proto3" json:"chainID,omitempty"`
	StopHeight      uint64 `protobuf:"varint,2,opt,name=stopHeight,proto3" json:"stopHeight,omitempty"`
	SubChainAddress string `protobuf:"bytes,3,opt,name=subChainAddress,proto3" json:"subChainAddress,omitempty"`
}

func (x *StopSubChain) Reset() {
	*x = StopSubChain{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_types_action_proto_msgTypes[23]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StopSubChain) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StopSubChain) ProtoMessage() {}

func (x *StopSubChain) ProtoReflect() protoreflect.Message {
	mi := &file_proto_types_action_proto_msgTypes[23]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StopSubChain.ProtoReflect.Descriptor instead.
func (*StopSubChain) Descriptor() ([]byte, []int) {
	return file_proto_types_action_proto_rawDescGZIP(), []int{23}
}

func (x *StopSubChain) GetChainID() uint32 {
	if x != nil {
		return x.ChainID
	}
	return 0
}

func (x *StopSubChain) GetStopHeight() uint64 {
	if x != nil {
		return x.StopHeight
	}
	return 0
}

func (x *StopSubChain) GetSubChainAddress() string {
	if x != nil {
		return x.SubChainAddress
	}
	return ""
}

type MerkleRoot struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name  string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Value []byte `protobuf:"bytes,2,opt,name=value,proto3" json:"value,omitempty"`
}

func (x *MerkleRoot) Reset() {
	*x = MerkleRoot{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_types_action_proto_msgTypes[24]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MerkleRoot) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MerkleRoot) ProtoMessage() {}

func (x *MerkleRoot) ProtoReflect() protoreflect.Message {
	mi := &file_proto_types_action_proto_msgTypes[24]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MerkleRoot.ProtoReflect.Descriptor instead.
func (*MerkleRoot) Descriptor() ([]byte, []int) {
	return file_proto_types_action_proto_rawDescGZIP(), []int{24}
}

func (x *MerkleRoot) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *MerkleRoot) GetValue() []byte {
	if x != nil {
		return x.Value
	}
	return nil
}

type PutBlock struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SubChainAddress string        `protobuf:"bytes,1,opt,name=subChainAddress,proto3" json:"subChainAddress,omitempty"`
	Height          uint64        `protobuf:"varint,2,opt,name=height,proto3" json:"height,omitempty"`
	Roots           []*MerkleRoot `protobuf:"bytes,3,rep,name=roots,proto3" json:"roots,omitempty"`
}

func (x *PutBlock) Reset() {
	*x = PutBlock{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_types_action_proto_msgTypes[25]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PutBlock) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PutBlock) ProtoMessage() {}

func (x *PutBlock) ProtoReflect() protoreflect.Message {
	mi := &file_proto_types_action_proto_msgTypes[25]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PutBlock.ProtoReflect.Descriptor instead.
func (*PutBlock) Descriptor() ([]byte, []int) {
	return file_proto_types_action_proto_rawDescGZIP(), []int{25}
}

func (x *PutBlock) GetSubChainAddress() string {
	if x != nil {
		return x.SubChainAddress
	}
	return ""
}

func (x *PutBlock) GetHeight() uint64 {
	if x != nil {
		return x.Height
	}
	return 0
}

func (x *PutBlock) GetRoots() []*MerkleRoot {
	if x != nil {
		return x.Roots
	}
	return nil
}

type CreateDeposit struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ChainID   uint32 `protobuf:"varint,1,opt,name=chainID,proto3" json:"chainID,omitempty"`
	Amount    string `protobuf:"bytes,2,opt,name=amount,proto3" json:"amount,omitempty"`
	Recipient string `protobuf:"bytes,3,opt,name=recipient,proto3" json:"recipient,omitempty"`
}

func (x *CreateDeposit) Reset() {
	*x = CreateDeposit{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_types_action_proto_msgTypes[26]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateDeposit) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateDeposit) ProtoMessage() {}

func (x *CreateDeposit) ProtoReflect() protoreflect.Message {
	mi := &file_proto_types_action_proto_msgTypes[26]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateDeposit.ProtoReflect.Descriptor instead.
func (*CreateDeposit) Descriptor() ([]byte, []int) {
	return file_proto_types_action_proto_rawDescGZIP(), []int{26}
}

func (x *CreateDeposit) GetChainID() uint32 {
	if x != nil {
		return x.ChainID
	}
	return 0
}

func (x *CreateDeposit) GetAmount() string {
	if x != nil {
		return x.Amount
	}
	return ""
}

func (x *CreateDeposit) GetRecipient() string {
	if x != nil {
		return x.Recipient
	}
	return ""
}

type SettleDeposit struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Amount    string `protobuf:"bytes,1,opt,name=amount,proto3" json:"amount,omitempty"`
	Recipient string `protobuf:"bytes,2,opt,name=recipient,proto3" json:"recipient,omitempty"`
	Index     uint64 `protobuf:"varint,3,opt,name=index,proto3" json:"index,omitempty"`
}

func (x *SettleDeposit) Reset() {
	*x = SettleDeposit{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_types_action_proto_msgTypes[27]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SettleDeposit) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SettleDeposit) ProtoMessage() {}

func (x *SettleDeposit) ProtoReflect() protoreflect.Message {
	mi := &file_proto_types_action_proto_msgTypes[27]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SettleDeposit.ProtoReflect.Descriptor instead.
func (*SettleDeposit) Descriptor() ([]byte, []int) {
	return file_proto_types_action_proto_rawDescGZIP(), []int{27}
}

func (x *SettleDeposit) GetAmount() string {
	if x != nil {
		return x.Amount
	}
	return ""
}

func (x *SettleDeposit) GetRecipient() string {
	if x != nil {
		return x.Recipient
	}
	return ""
}

func (x *SettleDeposit) GetIndex() uint64 {
	if x != nil {
		return x.Index
	}
	return 0
}

// plum main chain APIs
type CreatePlumChain struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *CreatePlumChain) Reset() {
	*x = CreatePlumChain{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_types_action_proto_msgTypes[28]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreatePlumChain) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreatePlumChain) ProtoMessage() {}

func (x *CreatePlumChain) ProtoReflect() protoreflect.Message {
	mi := &file_proto_types_action_proto_msgTypes[28]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreatePlumChain.ProtoReflect.Descriptor instead.
func (*CreatePlumChain) Descriptor() ([]byte, []int) {
	return file_proto_types_action_proto_rawDescGZIP(), []int{28}
}

type TerminatePlumChain struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SubChainAddress string `protobuf:"bytes,1,opt,name=subChainAddress,proto3" json:"subChainAddress,omitempty"`
}

func (x *TerminatePlumChain) Reset() {
	*x = TerminatePlumChain{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_types_action_proto_msgTypes[29]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TerminatePlumChain) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TerminatePlumChain) ProtoMessage() {}

func (x *TerminatePlumChain) ProtoReflect() protoreflect.Message {
	mi := &file_proto_types_action_proto_msgTypes[29]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TerminatePlumChain.ProtoReflect.Descriptor instead.
func (*TerminatePlumChain) Descriptor() ([]byte, []int) {
	return file_proto_types_action_proto_rawDescGZIP(), []int{29}
}

func (x *TerminatePlumChain) GetSubChainAddress() string {
	if x != nil {
		return x.SubChainAddress
	}
	return ""
}

type PlumPutBlock struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SubChainAddress string            `protobuf:"bytes,1,opt,name=subChainAddress,proto3" json:"subChainAddress,omitempty"`
	Height          uint64            `protobuf:"varint,2,opt,name=height,proto3" json:"height,omitempty"`
	Roots           map[string][]byte `protobuf:"bytes,3,rep,name=roots,proto3" json:"roots,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *PlumPutBlock) Reset() {
	*x = PlumPutBlock{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_types_action_proto_msgTypes[30]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PlumPutBlock) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PlumPutBlock) ProtoMessage() {}

func (x *PlumPutBlock) ProtoReflect() protoreflect.Message {
	mi := &file_proto_types_action_proto_msgTypes[30]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PlumPutBlock.ProtoReflect.Descriptor instead.
func (*PlumPutBlock) Descriptor() ([]byte, []int) {
	return file_proto_types_action_proto_rawDescGZIP(), []int{30}
}

func (x *PlumPutBlock) GetSubChainAddress() string {
	if x != nil {
		return x.SubChainAddress
	}
	return ""
}

func (x *PlumPutBlock) GetHeight() uint64 {
	if x != nil {
		return x.Height
	}
	return 0
}

func (x *PlumPutBlock) GetRoots() map[string][]byte {
	if x != nil {
		return x.Roots
	}
	return nil
}

type PlumCreateDeposit struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SubChainAddress string `protobuf:"bytes,1,opt,name=subChainAddress,proto3" json:"subChainAddress,omitempty"`
	Amount          string `protobuf:"bytes,2,opt,name=amount,proto3" json:"amount,omitempty"`
	Recipient       string `protobuf:"bytes,3,opt,name=recipient,proto3" json:"recipient,omitempty"`
}

func (x *PlumCreateDeposit) Reset() {
	*x = PlumCreateDeposit{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_types_action_proto_msgTypes[31]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PlumCreateDeposit) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PlumCreateDeposit) ProtoMessage() {}

func (x *PlumCreateDeposit) ProtoReflect() protoreflect.Message {
	mi := &file_proto_types_action_proto_msgTypes[31]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PlumCreateDeposit.ProtoReflect.Descriptor instead.
func (*PlumCreateDeposit) Descriptor() ([]byte, []int) {
	return file_proto_types_action_proto_rawDescGZIP(), []int{31}
}

func (x *PlumCreateDeposit) GetSubChainAddress() string {
	if x != nil {
		return x.SubChainAddress
	}
	return ""
}

func (x *PlumCreateDeposit) GetAmount() string {
	if x != nil {
		return x.Amount
	}
	return ""
}

func (x *PlumCreateDeposit) GetRecipient() string {
	if x != nil {
		return x.Recipient
	}
	return ""
}

type PlumStartExit struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SubChainAddress             string `protobuf:"bytes,1,opt,name=subChainAddress,proto3" json:"subChainAddress,omitempty"`
	PreviousTransfer            []byte `protobuf:"bytes,2,opt,name=previousTransfer,proto3" json:"previousTransfer,omitempty"`
	PreviousTransferBlockProof  []byte `protobuf:"bytes,3,opt,name=previousTransferBlockProof,proto3" json:"previousTransferBlockProof,omitempty"`
	PreviousTransferBlockHeight uint64 `protobuf:"varint,4,opt,name=previousTransferBlockHeight,proto3" json:"previousTransferBlockHeight,omitempty"`
	ExitTransfer                []byte `protobuf:"bytes,5,opt,name=exitTransfer,proto3" json:"exitTransfer,omitempty"`
	ExitTransferBlockProof      []byte `protobuf:"bytes,6,opt,name=exitTransferBlockProof,proto3" json:"exitTransferBlockProof,omitempty"`
	ExitTransferBlockHeight     uint64 `protobuf:"varint,7,opt,name=exitTransferBlockHeight,proto3" json:"exitTransferBlockHeight,omitempty"`
}

func (x *PlumStartExit) Reset() {
	*x = PlumStartExit{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_types_action_proto_msgTypes[32]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PlumStartExit) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PlumStartExit) ProtoMessage() {}

func (x *PlumStartExit) ProtoReflect() protoreflect.Message {
	mi := &file_proto_types_action_proto_msgTypes[32]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PlumStartExit.ProtoReflect.Descriptor instead.
func (*PlumStartExit) Descriptor() ([]byte, []int) {
	return file_proto_types_action_proto_rawDescGZIP(), []int{32}
}

func (x *PlumStartExit) GetSubChainAddress() string {
	if x != nil {
		return x.SubChainAddress
	}
	return ""
}

func (x *PlumStartExit) GetPreviousTransfer() []byte {
	if x != nil {
		return x.PreviousTransfer
	}
	return nil
}

func (x *PlumStartExit) GetPreviousTransferBlockProof() []byte {
	if x != nil {
		return x.PreviousTransferBlockProof
	}
	return nil
}

func (x *PlumStartExit) GetPreviousTransferBlockHeight() uint64 {
	if x != nil {
		return x.PreviousTransferBlockHeight
	}
	return 0
}

func (x *PlumStartExit) GetExitTransfer() []byte {
	if x != nil {
		return x.ExitTransfer
	}
	return nil
}

func (x *PlumStartExit) GetExitTransferBlockProof() []byte {
	if x != nil {
		return x.ExitTransferBlockProof
	}
	return nil
}

func (x *PlumStartExit) GetExitTransferBlockHeight() uint64 {
	if x != nil {
		return x.ExitTransferBlockHeight
	}
	return 0
}

type PlumChallengeExit struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SubChainAddress              string `protobuf:"bytes,1,opt,name=subChainAddress,proto3" json:"subChainAddress,omitempty"`
	CoinID                       uint64 `protobuf:"varint,2,opt,name=coinID,proto3" json:"coinID,omitempty"`
	ChallengeTransfer            []byte `protobuf:"bytes,3,opt,name=challengeTransfer,proto3" json:"challengeTransfer,omitempty"`
	ChallengeTransferBlockProof  []byte `protobuf:"bytes,4,opt,name=challengeTransferBlockProof,proto3" json:"challengeTransferBlockProof,omitempty"`
	ChallengeTransferBlockHeight uint64 `protobuf:"varint,5,opt,name=challengeTransferBlockHeight,proto3" json:"challengeTransferBlockHeight,omitempty"`
}

func (x *PlumChallengeExit) Reset() {
	*x = PlumChallengeExit{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_types_action_proto_msgTypes[33]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PlumChallengeExit) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PlumChallengeExit) ProtoMessage() {}

func (x *PlumChallengeExit) ProtoReflect() protoreflect.Message {
	mi := &file_proto_types_action_proto_msgTypes[33]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PlumChallengeExit.ProtoReflect.Descriptor instead.
func (*PlumChallengeExit) Descriptor() ([]byte, []int) {
	return file_proto_types_action_proto_rawDescGZIP(), []int{33}
}

func (x *PlumChallengeExit) GetSubChainAddress() string {
	if x != nil {
		return x.SubChainAddress
	}
	return ""
}

func (x *PlumChallengeExit) GetCoinID() uint64 {
	if x != nil {
		return x.CoinID
	}
	return 0
}

func (x *PlumChallengeExit) GetChallengeTransfer() []byte {
	if x != nil {
		return x.ChallengeTransfer
	}
	return nil
}

func (x *PlumChallengeExit) GetChallengeTransferBlockProof() []byte {
	if x != nil {
		return x.ChallengeTransferBlockProof
	}
	return nil
}

func (x *PlumChallengeExit) GetChallengeTransferBlockHeight() uint64 {
	if x != nil {
		return x.ChallengeTransferBlockHeight
	}
	return 0
}

type PlumResponseChallengeExit struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SubChainAddress             string `protobuf:"bytes,1,opt,name=subChainAddress,proto3" json:"subChainAddress,omitempty"`
	CoinID                      uint64 `protobuf:"varint,2,opt,name=coinID,proto3" json:"coinID,omitempty"`
	ChallengeTransfer           []byte `protobuf:"bytes,3,opt,name=challengeTransfer,proto3" json:"challengeTransfer,omitempty"`
	ResponseTransfer            []byte `protobuf:"bytes,4,opt,name=responseTransfer,proto3" json:"responseTransfer,omitempty"`
	ResponseTransferBlockProof  []byte `protobuf:"bytes,5,opt,name=responseTransferBlockProof,proto3" json:"responseTransferBlockProof,omitempty"`
	PreviousTransferBlockHeight uint64 `protobuf:"varint,6,opt,name=previousTransferBlockHeight,proto3" json:"previousTransferBlockHeight,omitempty"`
}

func (x *PlumResponseChallengeExit) Reset() {
	*x = PlumResponseChallengeExit{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_types_action_proto_msgTypes[34]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PlumResponseChallengeExit) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PlumResponseChallengeExit) ProtoMessage() {}

func (x *PlumResponseChallengeExit) ProtoReflect() protoreflect.Message {
	mi := &file_proto_types_action_proto_msgTypes[34]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PlumResponseChallengeExit.ProtoReflect.Descriptor instead.
func (*PlumResponseChallengeExit) Descriptor() ([]byte, []int) {
	return file_proto_types_action_proto_rawDescGZIP(), []int{34}
}

func (x *PlumResponseChallengeExit) GetSubChainAddress() string {
	if x != nil {
		return x.SubChainAddress
	}
	return ""
}

func (x *PlumResponseChallengeExit) GetCoinID() uint64 {
	if x != nil {
		return x.CoinID
	}
	return 0
}

func (x *PlumResponseChallengeExit) GetChallengeTransfer() []byte {
	if x != nil {
		return x.ChallengeTransfer
	}
	return nil
}

func (x *PlumResponseChallengeExit) GetResponseTransfer() []byte {
	if x != nil {
		return x.ResponseTransfer
	}
	return nil
}

func (x *PlumResponseChallengeExit) GetResponseTransferBlockProof() []byte {
	if x != nil {
		return x.ResponseTransferBlockProof
	}
	return nil
}

func (x *PlumResponseChallengeExit) GetPreviousTransferBlockHeight() uint64 {
	if x != nil {
		return x.PreviousTransferBlockHeight
	}
	return 0
}

type PlumFinalizeExit struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SubChainAddress string `protobuf:"bytes,1,opt,name=subChainAddress,proto3" json:"subChainAddress,omitempty"`
	CoinID          uint64 `protobuf:"varint,2,opt,name=coinID,proto3" json:"coinID,omitempty"`
}

func (x *PlumFinalizeExit) Reset() {
	*x = PlumFinalizeExit{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_types_action_proto_msgTypes[35]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PlumFinalizeExit) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PlumFinalizeExit) ProtoMessage() {}

func (x *PlumFinalizeExit) ProtoReflect() protoreflect.Message {
	mi := &file_proto_types_action_proto_msgTypes[35]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PlumFinalizeExit.ProtoReflect.Descriptor instead.
func (*PlumFinalizeExit) Descriptor() ([]byte, []int) {
	return file_proto_types_action_proto_rawDescGZIP(), []int{35}
}

func (x *PlumFinalizeExit) GetSubChainAddress() string {
	if x != nil {
		return x.SubChainAddress
	}
	return ""
}

func (x *PlumFinalizeExit) GetCoinID() uint64 {
	if x != nil {
		return x.CoinID
	}
	return 0
}

// plum sub chain APIs
type PlumSettleDeposit struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CoinID uint64 `protobuf:"varint,1,opt,name=coinID,proto3" json:"coinID,omitempty"`
}

func (x *PlumSettleDeposit) Reset() {
	*x = PlumSettleDeposit{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_types_action_proto_msgTypes[36]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PlumSettleDeposit) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PlumSettleDeposit) ProtoMessage() {}

func (x *PlumSettleDeposit) ProtoReflect() protoreflect.Message {
	mi := &file_proto_types_action_proto_msgTypes[36]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PlumSettleDeposit.ProtoReflect.Descriptor instead.
func (*PlumSettleDeposit) Descriptor() ([]byte, []int) {
	return file_proto_types_action_proto_rawDescGZIP(), []int{36}
}

func (x *PlumSettleDeposit) GetCoinID() uint64 {
	if x != nil {
		return x.CoinID
	}
	return 0
}

type PlumTransfer struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CoinID       uint64 `protobuf:"varint,1,opt,name=coinID,proto3" json:"coinID,omitempty"`
	Denomination []byte `protobuf:"bytes,2,opt,name=denomination,proto3" json:"denomination,omitempty"`
	Owner        string `protobuf:"bytes,3,opt,name=owner,proto3" json:"owner,omitempty"`
	Recipient    string `protobuf:"bytes,4,opt,name=recipient,proto3" json:"recipient,omitempty"`
}

func (x *PlumTransfer) Reset() {
	*x = PlumTransfer{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_types_action_proto_msgTypes[37]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PlumTransfer) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PlumTransfer) ProtoMessage() {}

func (x *PlumTransfer) ProtoReflect() protoreflect.Message {
	mi := &file_proto_types_action_proto_msgTypes[37]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PlumTransfer.ProtoReflect.Descriptor instead.
func (*PlumTransfer) Descriptor() ([]byte, []int) {
	return file_proto_types_action_proto_rawDescGZIP(), []int{37}
}

func (x *PlumTransfer) GetCoinID() uint64 {
	if x != nil {
		return x.CoinID
	}
	return 0
}

func (x *PlumTransfer) GetDenomination() []byte {
	if x != nil {
		return x.Denomination
	}
	return nil
}

func (x *PlumTransfer) GetOwner() string {
	if x != nil {
		return x.Owner
	}
	return ""
}

func (x *PlumTransfer) GetRecipient() string {
	if x != nil {
		return x.Recipient
	}
	return ""
}

type ActionCore struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Version    uint32         `protobuf:"varint,1,opt,name=version,proto3" json:"version,omitempty"`
	Nonce      uint64         `protobuf:"varint,2,opt,name=nonce,proto3" json:"nonce,omitempty"`
	GasLimit   uint64         `protobuf:"varint,3,opt,name=gasLimit,proto3" json:"gasLimit,omitempty"`
	GasPrice   string         `protobuf:"bytes,4,opt,name=gasPrice,proto3" json:"gasPrice,omitempty"`
	ChainID    uint32         `protobuf:"varint,5,opt,name=chainID,proto3" json:"chainID,omitempty"`
	GasTipCap  string         `protobuf:"bytes,6,opt,name=gasTipCap,proto3" json:"gasTipCap,omitempty"`
	GasFeeCap  string         `protobuf:"bytes,7,opt,name=gasFeeCap,proto3" json:"gasFeeCap,omitempty"`
	BlobTxData *BlobTxData    `protobuf:"bytes,8,opt,name=blobTxData,proto3" json:"blobTxData,omitempty"`
	AccessList []*AccessTuple `protobuf:"bytes,9,rep,name=accessList,proto3" json:"accessList,omitempty"`
	TxType     uint32         `protobuf:"varint,28,opt,name=txType,proto3" json:"txType,omitempty"`
	// Types that are assignable to Action:
	//
	//	*ActionCore_Transfer
	//	*ActionCore_TxContainer
	//	*ActionCore_Execution
	//	*ActionCore_StartSubChain
	//	*ActionCore_StopSubChain
	//	*ActionCore_PutBlock
	//	*ActionCore_CreateDeposit
	//	*ActionCore_SettleDeposit
	//	*ActionCore_CreatePlumChain
	//	*ActionCore_TerminatePlumChain
	//	*ActionCore_PlumPutBlock
	//	*ActionCore_PlumCreateDeposit
	//	*ActionCore_PlumStartExit
	//	*ActionCore_PlumChallengeExit
	//	*ActionCore_PlumResponseChallengeExit
	//	*ActionCore_PlumFinalizeExit
	//	*ActionCore_PlumSettleDeposit
	//	*ActionCore_PlumTransfer
	//	*ActionCore_DepositToRewardingFund
	//	*ActionCore_ClaimFromRewardingFund
	//	*ActionCore_GrantReward
	//	*ActionCore_StakeCreate
	//	*ActionCore_StakeUnstake
	//	*ActionCore_StakeWithdraw
	//	*ActionCore_StakeAddDeposit
	//	*ActionCore_StakeRestake
	//	*ActionCore_StakeChangeCandidate
	//	*ActionCore_StakeTransferOwnership
	//	*ActionCore_CandidateRegister
	//	*ActionCore_CandidateUpdate
	//	*ActionCore_CandidateActivate
	//	*ActionCore_CandidateEndorsement
	//	*ActionCore_CandidateTransferOwnership
	//	*ActionCore_StakeMigrate
	//	*ActionCore_PutPollResult
	Action isActionCore_Action `protobuf_oneof:"action"`
}

func (x *ActionCore) Reset() {
	*x = ActionCore{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_types_action_proto_msgTypes[38]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ActionCore) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ActionCore) ProtoMessage() {}

func (x *ActionCore) ProtoReflect() protoreflect.Message {
	mi := &file_proto_types_action_proto_msgTypes[38]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ActionCore.ProtoReflect.Descriptor instead.
func (*ActionCore) Descriptor() ([]byte, []int) {
	return file_proto_types_action_proto_rawDescGZIP(), []int{38}
}

func (x *ActionCore) GetVersion() uint32 {
	if x != nil {
		return x.Version
	}
	return 0
}

func (x *ActionCore) GetNonce() uint64 {
	if x != nil {
		return x.Nonce
	}
	return 0
}

func (x *ActionCore) GetGasLimit() uint64 {
	if x != nil {
		return x.GasLimit
	}
	return 0
}

func (x *ActionCore) GetGasPrice() string {
	if x != nil {
		return x.GasPrice
	}
	return ""
}

func (x *ActionCore) GetChainID() uint32 {
	if x != nil {
		return x.ChainID
	}
	return 0
}

func (x *ActionCore) GetGasTipCap() string {
	if x != nil {
		return x.GasTipCap
	}
	return ""
}

func (x *ActionCore) GetGasFeeCap() string {
	if x != nil {
		return x.GasFeeCap
	}
	return ""
}

func (x *ActionCore) GetBlobTxData() *BlobTxData {
	if x != nil {
		return x.BlobTxData
	}
	return nil
}

func (x *ActionCore) GetAccessList() []*AccessTuple {
	if x != nil {
		return x.AccessList
	}
	return nil
}

func (x *ActionCore) GetTxType() uint32 {
	if x != nil {
		return x.TxType
	}
	return 0
}

func (m *ActionCore) GetAction() isActionCore_Action {
	if m != nil {
		return m.Action
	}
	return nil
}

func (x *ActionCore) GetTransfer() *Transfer {
	if x, ok := x.GetAction().(*ActionCore_Transfer); ok {
		return x.Transfer
	}
	return nil
}

func (x *ActionCore) GetTxContainer() *TxContainer {
	if x, ok := x.GetAction().(*ActionCore_TxContainer); ok {
		return x.TxContainer
	}
	return nil
}

func (x *ActionCore) GetExecution() *Execution {
	if x, ok := x.GetAction().(*ActionCore_Execution); ok {
		return x.Execution
	}
	return nil
}

func (x *ActionCore) GetStartSubChain() *StartSubChain {
	if x, ok := x.GetAction().(*ActionCore_StartSubChain); ok {
		return x.StartSubChain
	}
	return nil
}

func (x *ActionCore) GetStopSubChain() *StopSubChain {
	if x, ok := x.GetAction().(*ActionCore_StopSubChain); ok {
		return x.StopSubChain
	}
	return nil
}

func (x *ActionCore) GetPutBlock() *PutBlock {
	if x, ok := x.GetAction().(*ActionCore_PutBlock); ok {
		return x.PutBlock
	}
	return nil
}

func (x *ActionCore) GetCreateDeposit() *CreateDeposit {
	if x, ok := x.GetAction().(*ActionCore_CreateDeposit); ok {
		return x.CreateDeposit
	}
	return nil
}

func (x *ActionCore) GetSettleDeposit() *SettleDeposit {
	if x, ok := x.GetAction().(*ActionCore_SettleDeposit); ok {
		return x.SettleDeposit
	}
	return nil
}

func (x *ActionCore) GetCreatePlumChain() *CreatePlumChain {
	if x, ok := x.GetAction().(*ActionCore_CreatePlumChain); ok {
		return x.CreatePlumChain
	}
	return nil
}

func (x *ActionCore) GetTerminatePlumChain() *TerminatePlumChain {
	if x, ok := x.GetAction().(*ActionCore_TerminatePlumChain); ok {
		return x.TerminatePlumChain
	}
	return nil
}

func (x *ActionCore) GetPlumPutBlock() *PlumPutBlock {
	if x, ok := x.GetAction().(*ActionCore_PlumPutBlock); ok {
		return x.PlumPutBlock
	}
	return nil
}

func (x *ActionCore) GetPlumCreateDeposit() *PlumCreateDeposit {
	if x, ok := x.GetAction().(*ActionCore_PlumCreateDeposit); ok {
		return x.PlumCreateDeposit
	}
	return nil
}

func (x *ActionCore) GetPlumStartExit() *PlumStartExit {
	if x, ok := x.GetAction().(*ActionCore_PlumStartExit); ok {
		return x.PlumStartExit
	}
	return nil
}

func (x *ActionCore) GetPlumChallengeExit() *PlumChallengeExit {
	if x, ok := x.GetAction().(*ActionCore_PlumChallengeExit); ok {
		return x.PlumChallengeExit
	}
	return nil
}

func (x *ActionCore) GetPlumResponseChallengeExit() *PlumResponseChallengeExit {
	if x, ok := x.GetAction().(*ActionCore_PlumResponseChallengeExit); ok {
		return x.PlumResponseChallengeExit
	}
	return nil
}

func (x *ActionCore) GetPlumFinalizeExit() *PlumFinalizeExit {
	if x, ok := x.GetAction().(*ActionCore_PlumFinalizeExit); ok {
		return x.PlumFinalizeExit
	}
	return nil
}

func (x *ActionCore) GetPlumSettleDeposit() *PlumSettleDeposit {
	if x, ok := x.GetAction().(*ActionCore_PlumSettleDeposit); ok {
		return x.PlumSettleDeposit
	}
	return nil
}

func (x *ActionCore) GetPlumTransfer() *PlumTransfer {
	if x, ok := x.GetAction().(*ActionCore_PlumTransfer); ok {
		return x.PlumTransfer
	}
	return nil
}

func (x *ActionCore) GetDepositToRewardingFund() *DepositToRewardingFund {
	if x, ok := x.GetAction().(*ActionCore_DepositToRewardingFund); ok {
		return x.DepositToRewardingFund
	}
	return nil
}

func (x *ActionCore) GetClaimFromRewardingFund() *ClaimFromRewardingFund {
	if x, ok := x.GetAction().(*ActionCore_ClaimFromRewardingFund); ok {
		return x.ClaimFromRewardingFund
	}
	return nil
}

func (x *ActionCore) GetGrantReward() *GrantReward {
	if x, ok := x.GetAction().(*ActionCore_GrantReward); ok {
		return x.GrantReward
	}
	return nil
}

func (x *ActionCore) GetStakeCreate() *StakeCreate {
	if x, ok := x.GetAction().(*ActionCore_StakeCreate); ok {
		return x.StakeCreate
	}
	return nil
}

func (x *ActionCore) GetStakeUnstake() *StakeReclaim {
	if x, ok := x.GetAction().(*ActionCore_StakeUnstake); ok {
		return x.StakeUnstake
	}
	return nil
}

func (x *ActionCore) GetStakeWithdraw() *StakeReclaim {
	if x, ok := x.GetAction().(*ActionCore_StakeWithdraw); ok {
		return x.StakeWithdraw
	}
	return nil
}

func (x *ActionCore) GetStakeAddDeposit() *StakeAddDeposit {
	if x, ok := x.GetAction().(*ActionCore_StakeAddDeposit); ok {
		return x.StakeAddDeposit
	}
	return nil
}

func (x *ActionCore) GetStakeRestake() *StakeRestake {
	if x, ok := x.GetAction().(*ActionCore_StakeRestake); ok {
		return x.StakeRestake
	}
	return nil
}

func (x *ActionCore) GetStakeChangeCandidate() *StakeChangeCandidate {
	if x, ok := x.GetAction().(*ActionCore_StakeChangeCandidate); ok {
		return x.StakeChangeCandidate
	}
	return nil
}

func (x *ActionCore) GetStakeTransferOwnership() *StakeTransferOwnership {
	if x, ok := x.GetAction().(*ActionCore_StakeTransferOwnership); ok {
		return x.StakeTransferOwnership
	}
	return nil
}

func (x *ActionCore) GetCandidateRegister() *CandidateRegister {
	if x, ok := x.GetAction().(*ActionCore_CandidateRegister); ok {
		return x.CandidateRegister
	}
	return nil
}

func (x *ActionCore) GetCandidateUpdate() *CandidateBasicInfo {
	if x, ok := x.GetAction().(*ActionCore_CandidateUpdate); ok {
		return x.CandidateUpdate
	}
	return nil
}

func (x *ActionCore) GetCandidateActivate() *CandidateActivate {
	if x, ok := x.GetAction().(*ActionCore_CandidateActivate); ok {
		return x.CandidateActivate
	}
	return nil
}

func (x *ActionCore) GetCandidateEndorsement() *CandidateEndorsement {
	if x, ok := x.GetAction().(*ActionCore_CandidateEndorsement); ok {
		return x.CandidateEndorsement
	}
	return nil
}

func (x *ActionCore) GetCandidateTransferOwnership() *CandidateTransferOwnership {
	if x, ok := x.GetAction().(*ActionCore_CandidateTransferOwnership); ok {
		return x.CandidateTransferOwnership
	}
	return nil
}

func (x *ActionCore) GetStakeMigrate() *StakeMigrate {
	if x, ok := x.GetAction().(*ActionCore_StakeMigrate); ok {
		return x.StakeMigrate
	}
	return nil
}

func (x *ActionCore) GetPutPollResult() *PutPollResult {
	if x, ok := x.GetAction().(*ActionCore_PutPollResult); ok {
		return x.PutPollResult
	}
	return nil
}

type isActionCore_Action interface {
	isActionCore_Action()
}

type ActionCore_Transfer struct {
	Transfer *Transfer `protobuf:"bytes,10,opt,name=transfer,proto3,oneof"`
}

type ActionCore_TxContainer struct {
	TxContainer *TxContainer `protobuf:"bytes,11,opt,name=txContainer,proto3,oneof"`
}

type ActionCore_Execution struct {
	Execution *Execution `protobuf:"bytes,12,opt,name=execution,proto3,oneof"`
}

type ActionCore_StartSubChain struct {
	// FedChain
	StartSubChain *StartSubChain `protobuf:"bytes,13,opt,name=startSubChain,proto3,oneof"`
}

type ActionCore_StopSubChain struct {
	StopSubChain *StopSubChain `protobuf:"bytes,14,opt,name=stopSubChain,proto3,oneof"`
}

type ActionCore_PutBlock struct {
	PutBlock *PutBlock `protobuf:"bytes,15,opt,name=putBlock,proto3,oneof"`
}

type ActionCore_CreateDeposit struct {
	CreateDeposit *CreateDeposit `protobuf:"bytes,16,opt,name=createDeposit,proto3,oneof"`
}

type ActionCore_SettleDeposit struct {
	SettleDeposit *SettleDeposit `protobuf:"bytes,17,opt,name=settleDeposit,proto3,oneof"`
}

type ActionCore_CreatePlumChain struct {
	// PlumChain
	CreatePlumChain *CreatePlumChain `protobuf:"bytes,18,opt,name=createPlumChain,proto3,oneof"`
}

type ActionCore_TerminatePlumChain struct {
	TerminatePlumChain *TerminatePlumChain `protobuf:"bytes,19,opt,name=terminatePlumChain,proto3,oneof"`
}

type ActionCore_PlumPutBlock struct {
	PlumPutBlock *PlumPutBlock `protobuf:"bytes,20,opt,name=plumPutBlock,proto3,oneof"`
}

type ActionCore_PlumCreateDeposit struct {
	PlumCreateDeposit *PlumCreateDeposit `protobuf:"bytes,21,opt,name=plumCreateDeposit,proto3,oneof"`
}

type ActionCore_PlumStartExit struct {
	PlumStartExit *PlumStartExit `protobuf:"bytes,22,opt,name=plumStartExit,proto3,oneof"`
}

type ActionCore_PlumChallengeExit struct {
	PlumChallengeExit *PlumChallengeExit `protobuf:"bytes,23,opt,name=plumChallengeExit,proto3,oneof"`
}

type ActionCore_PlumResponseChallengeExit struct {
	PlumResponseChallengeExit *PlumResponseChallengeExit `protobuf:"bytes,24,opt,name=plumResponseChallengeExit,proto3,oneof"`
}

type ActionCore_PlumFinalizeExit struct {
	PlumFinalizeExit *PlumFinalizeExit `protobuf:"bytes,25,opt,name=plumFinalizeExit,proto3,oneof"`
}

type ActionCore_PlumSettleDeposit struct {
	PlumSettleDeposit *PlumSettleDeposit `protobuf:"bytes,26,opt,name=plumSettleDeposit,proto3,oneof"`
}

type ActionCore_PlumTransfer struct {
	PlumTransfer *PlumTransfer `protobuf:"bytes,27,opt,name=plumTransfer,proto3,oneof"`
}

type ActionCore_DepositToRewardingFund struct {
	// Rewarding protocol actions
	DepositToRewardingFund *DepositToRewardingFund `protobuf:"bytes,30,opt,name=depositToRewardingFund,proto3,oneof"`
}

type ActionCore_ClaimFromRewardingFund struct {
	ClaimFromRewardingFund *ClaimFromRewardingFund `protobuf:"bytes,31,opt,name=claimFromRewardingFund,proto3,oneof"`
}

type ActionCore_GrantReward struct {
	GrantReward *GrantReward `protobuf:"bytes,32,opt,name=grantReward,proto3,oneof"`
}

type ActionCore_StakeCreate struct {
	// Native staking
	StakeCreate *StakeCreate `protobuf:"bytes,40,opt,name=stakeCreate,proto3,oneof"`
}

type ActionCore_StakeUnstake struct {
	StakeUnstake *StakeReclaim `protobuf:"bytes,41,opt,name=stakeUnstake,proto3,oneof"`
}

type ActionCore_StakeWithdraw struct {
	StakeWithdraw *StakeReclaim `protobuf:"bytes,42,opt,name=stakeWithdraw,proto3,oneof"`
}

type ActionCore_StakeAddDeposit struct {
	StakeAddDeposit *StakeAddDeposit `protobuf:"bytes,43,opt,name=stakeAddDeposit,proto3,oneof"`
}

type ActionCore_StakeRestake struct {
	StakeRestake *StakeRestake `protobuf:"bytes,44,opt,name=stakeRestake,proto3,oneof"`
}

type ActionCore_StakeChangeCandidate struct {
	StakeChangeCandidate *StakeChangeCandidate `protobuf:"bytes,45,opt,name=stakeChangeCandidate,proto3,oneof"`
}

type ActionCore_StakeTransferOwnership struct {
	StakeTransferOwnership *StakeTransferOwnership `protobuf:"bytes,46,opt,name=stakeTransferOwnership,proto3,oneof"`
}

type ActionCore_CandidateRegister struct {
	CandidateRegister *CandidateRegister `protobuf:"bytes,47,opt,name=candidateRegister,proto3,oneof"`
}

type ActionCore_CandidateUpdate struct {
	CandidateUpdate *CandidateBasicInfo `protobuf:"bytes,48,opt,name=candidateUpdate,proto3,oneof"`
}

type ActionCore_CandidateActivate struct {
	CandidateActivate *CandidateActivate `protobuf:"bytes,49,opt,name=candidateActivate,proto3,oneof"`
}

type ActionCore_CandidateEndorsement struct {
	CandidateEndorsement *CandidateEndorsement `protobuf:"bytes,51,opt,name=candidateEndorsement,proto3,oneof"`
}

type ActionCore_CandidateTransferOwnership struct {
	CandidateTransferOwnership *CandidateTransferOwnership `protobuf:"bytes,52,opt,name=candidateTransferOwnership,proto3,oneof"`
}

type ActionCore_StakeMigrate struct {
	StakeMigrate *StakeMigrate `protobuf:"bytes,53,opt,name=stakeMigrate,proto3,oneof"`
}

type ActionCore_PutPollResult struct {
	PutPollResult *PutPollResult `protobuf:"bytes,50,opt,name=putPollResult,proto3,oneof"`
}

func (*ActionCore_Transfer) isActionCore_Action() {}

func (*ActionCore_TxContainer) isActionCore_Action() {}

func (*ActionCore_Execution) isActionCore_Action() {}

func (*ActionCore_StartSubChain) isActionCore_Action() {}

func (*ActionCore_StopSubChain) isActionCore_Action() {}

func (*ActionCore_PutBlock) isActionCore_Action() {}

func (*ActionCore_CreateDeposit) isActionCore_Action() {}

func (*ActionCore_SettleDeposit) isActionCore_Action() {}

func (*ActionCore_CreatePlumChain) isActionCore_Action() {}

func (*ActionCore_TerminatePlumChain) isActionCore_Action() {}

func (*ActionCore_PlumPutBlock) isActionCore_Action() {}

func (*ActionCore_PlumCreateDeposit) isActionCore_Action() {}

func (*ActionCore_PlumStartExit) isActionCore_Action() {}

func (*ActionCore_PlumChallengeExit) isActionCore_Action() {}

func (*ActionCore_PlumResponseChallengeExit) isActionCore_Action() {}

func (*ActionCore_PlumFinalizeExit) isActionCore_Action() {}

func (*ActionCore_PlumSettleDeposit) isActionCore_Action() {}

func (*ActionCore_PlumTransfer) isActionCore_Action() {}

func (*ActionCore_DepositToRewardingFund) isActionCore_Action() {}

func (*ActionCore_ClaimFromRewardingFund) isActionCore_Action() {}

func (*ActionCore_GrantReward) isActionCore_Action() {}

func (*ActionCore_StakeCreate) isActionCore_Action() {}

func (*ActionCore_StakeUnstake) isActionCore_Action() {}

func (*ActionCore_StakeWithdraw) isActionCore_Action() {}

func (*ActionCore_StakeAddDeposit) isActionCore_Action() {}

func (*ActionCore_StakeRestake) isActionCore_Action() {}

func (*ActionCore_StakeChangeCandidate) isActionCore_Action() {}

func (*ActionCore_StakeTransferOwnership) isActionCore_Action() {}

func (*ActionCore_CandidateRegister) isActionCore_Action() {}

func (*ActionCore_CandidateUpdate) isActionCore_Action() {}

func (*ActionCore_CandidateActivate) isActionCore_Action() {}

func (*ActionCore_CandidateEndorsement) isActionCore_Action() {}

func (*ActionCore_CandidateTransferOwnership) isActionCore_Action() {}

func (*ActionCore_StakeMigrate) isActionCore_Action() {}

func (*ActionCore_PutPollResult) isActionCore_Action() {}

type Action struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Core         *ActionCore `protobuf:"bytes,1,opt,name=core,proto3" json:"core,omitempty"`
	SenderPubKey []byte      `protobuf:"bytes,2,opt,name=senderPubKey,proto3" json:"senderPubKey,omitempty"`
	Signature    []byte      `protobuf:"bytes,3,opt,name=signature,proto3" json:"signature,omitempty"`
	Encoding     Encoding    `protobuf:"varint,4,opt,name=encoding,proto3,enum=iotextypes.Encoding" json:"encoding,omitempty"`
}

func (x *Action) Reset() {
	*x = Action{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_types_action_proto_msgTypes[39]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Action) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Action) ProtoMessage() {}

func (x *Action) ProtoReflect() protoreflect.Message {
	mi := &file_proto_types_action_proto_msgTypes[39]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Action.ProtoReflect.Descriptor instead.
func (*Action) Descriptor() ([]byte, []int) {
	return file_proto_types_action_proto_rawDescGZIP(), []int{39}
}

func (x *Action) GetCore() *ActionCore {
	if x != nil {
		return x.Core
	}
	return nil
}

func (x *Action) GetSenderPubKey() []byte {
	if x != nil {
		return x.SenderPubKey
	}
	return nil
}

func (x *Action) GetSignature() []byte {
	if x != nil {
		return x.Signature
	}
	return nil
}

func (x *Action) GetEncoding() Encoding {
	if x != nil {
		return x.Encoding
	}
	return Encoding_IOTEX_PROTOBUF
}

// a pack of actions
type Actions struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Actions []*Action `protobuf:"bytes,1,rep,name=actions,proto3" json:"actions,omitempty"`
}

func (x *Actions) Reset() {
	*x = Actions{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_types_action_proto_msgTypes[40]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Actions) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Actions) ProtoMessage() {}

func (x *Actions) ProtoReflect() protoreflect.Message {
	mi := &file_proto_types_action_proto_msgTypes[40]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Actions.ProtoReflect.Descriptor instead.
func (*Actions) Descriptor() ([]byte, []int) {
	return file_proto_types_action_proto_rawDescGZIP(), []int{40}
}

func (x *Actions) GetActions() []*Action {
	if x != nil {
		return x.Actions
	}
	return nil
}

type ActionHash struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Hash []byte `protobuf:"bytes,1,opt,name=hash,proto3" json:"hash,omitempty"`
}

func (x *ActionHash) Reset() {
	*x = ActionHash{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_types_action_proto_msgTypes[41]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ActionHash) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ActionHash) ProtoMessage() {}

func (x *ActionHash) ProtoReflect() protoreflect.Message {
	mi := &file_proto_types_action_proto_msgTypes[41]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ActionHash.ProtoReflect.Descriptor instead.
func (*ActionHash) Descriptor() ([]byte, []int) {
	return file_proto_types_action_proto_rawDescGZIP(), []int{41}
}

func (x *ActionHash) GetHash() []byte {
	if x != nil {
		return x.Hash
	}
	return nil
}

type Receipt struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Status             uint64 `protobuf:"varint,1,opt,name=status,proto3" json:"status,omitempty"`
	BlkHeight          uint64 `protobuf:"varint,2,opt,name=blkHeight,proto3" json:"blkHeight,omitempty"`
	ActHash            []byte `protobuf:"bytes,3,opt,name=actHash,proto3" json:"actHash,omitempty"`
	GasConsumed        uint64 `protobuf:"varint,4,opt,name=gasConsumed,proto3" json:"gasConsumed,omitempty"`
	ContractAddress    string `protobuf:"bytes,5,opt,name=contractAddress,proto3" json:"contractAddress,omitempty"`
	Logs               []*Log `protobuf:"bytes,6,rep,name=logs,proto3" json:"logs,omitempty"`
	ExecutionRevertMsg string `protobuf:"bytes,7,opt,name=executionRevertMsg,proto3" json:"executionRevertMsg,omitempty"`
	TxIndex            uint32 `protobuf:"varint,8,opt,name=txIndex,proto3" json:"txIndex,omitempty"`
	BlobGasUsed        uint64 `protobuf:"varint,9,opt,name=blobGasUsed,proto3" json:"blobGasUsed,omitempty"`
	BlobGasPrice       string `protobuf:"bytes,10,opt,name=blobGasPrice,proto3" json:"blobGasPrice,omitempty"`
	EffectiveGasPrice  string `protobuf:"bytes,11,opt,name=effectiveGasPrice,proto3" json:"effectiveGasPrice,omitempty"`
}

func (x *Receipt) Reset() {
	*x = Receipt{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_types_action_proto_msgTypes[42]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Receipt) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Receipt) ProtoMessage() {}

func (x *Receipt) ProtoReflect() protoreflect.Message {
	mi := &file_proto_types_action_proto_msgTypes[42]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Receipt.ProtoReflect.Descriptor instead.
func (*Receipt) Descriptor() ([]byte, []int) {
	return file_proto_types_action_proto_rawDescGZIP(), []int{42}
}

func (x *Receipt) GetStatus() uint64 {
	if x != nil {
		return x.Status
	}
	return 0
}

func (x *Receipt) GetBlkHeight() uint64 {
	if x != nil {
		return x.BlkHeight
	}
	return 0
}

func (x *Receipt) GetActHash() []byte {
	if x != nil {
		return x.ActHash
	}
	return nil
}

func (x *Receipt) GetGasConsumed() uint64 {
	if x != nil {
		return x.GasConsumed
	}
	return 0
}

func (x *Receipt) GetContractAddress() string {
	if x != nil {
		return x.ContractAddress
	}
	return ""
}

func (x *Receipt) GetLogs() []*Log {
	if x != nil {
		return x.Logs
	}
	return nil
}

func (x *Receipt) GetExecutionRevertMsg() string {
	if x != nil {
		return x.ExecutionRevertMsg
	}
	return ""
}

func (x *Receipt) GetTxIndex() uint32 {
	if x != nil {
		return x.TxIndex
	}
	return 0
}

func (x *Receipt) GetBlobGasUsed() uint64 {
	if x != nil {
		return x.BlobGasUsed
	}
	return 0
}

func (x *Receipt) GetBlobGasPrice() string {
	if x != nil {
		return x.BlobGasPrice
	}
	return ""
}

func (x *Receipt) GetEffectiveGasPrice() string {
	if x != nil {
		return x.EffectiveGasPrice
	}
	return ""
}

type Log struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ContractAddress string   `protobuf:"bytes,1,opt,name=contractAddress,proto3" json:"contractAddress,omitempty"`
	Topics          [][]byte `protobuf:"bytes,2,rep,name=topics,proto3" json:"topics,omitempty"`
	Data            []byte   `protobuf:"bytes,3,opt,name=data,proto3" json:"data,omitempty"`
	BlkHeight       uint64   `protobuf:"varint,4,opt,name=blkHeight,proto3" json:"blkHeight,omitempty"`
	ActHash         []byte   `protobuf:"bytes,5,opt,name=actHash,proto3" json:"actHash,omitempty"`
	Index           uint32   `protobuf:"varint,6,opt,name=index,proto3" json:"index,omitempty"`
	BlkHash         []byte   `protobuf:"bytes,7,opt,name=blkHash,proto3" json:"blkHash,omitempty"`
	TxIndex         uint32   `protobuf:"varint,8,opt,name=txIndex,proto3" json:"txIndex,omitempty"`
}

func (x *Log) Reset() {
	*x = Log{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_types_action_proto_msgTypes[43]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Log) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Log) ProtoMessage() {}

func (x *Log) ProtoReflect() protoreflect.Message {
	mi := &file_proto_types_action_proto_msgTypes[43]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Log.ProtoReflect.Descriptor instead.
func (*Log) Descriptor() ([]byte, []int) {
	return file_proto_types_action_proto_rawDescGZIP(), []int{43}
}

func (x *Log) GetContractAddress() string {
	if x != nil {
		return x.ContractAddress
	}
	return ""
}

func (x *Log) GetTopics() [][]byte {
	if x != nil {
		return x.Topics
	}
	return nil
}

func (x *Log) GetData() []byte {
	if x != nil {
		return x.Data
	}
	return nil
}

func (x *Log) GetBlkHeight() uint64 {
	if x != nil {
		return x.BlkHeight
	}
	return 0
}

func (x *Log) GetActHash() []byte {
	if x != nil {
		return x.ActHash
	}
	return nil
}

func (x *Log) GetIndex() uint32 {
	if x != nil {
		return x.Index
	}
	return 0
}

func (x *Log) GetBlkHash() []byte {
	if x != nil {
		return x.BlkHash
	}
	return nil
}

func (x *Log) GetTxIndex() uint32 {
	if x != nil {
		return x.TxIndex
	}
	return 0
}

type Logs struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Logs []*Log `protobuf:"bytes,1,rep,name=logs,proto3" json:"logs,omitempty"`
}

func (x *Logs) Reset() {
	*x = Logs{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_types_action_proto_msgTypes[44]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Logs) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Logs) ProtoMessage() {}

func (x *Logs) ProtoReflect() protoreflect.Message {
	mi := &file_proto_types_action_proto_msgTypes[44]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Logs.ProtoReflect.Descriptor instead.
func (*Logs) Descriptor() ([]byte, []int) {
	return file_proto_types_action_proto_rawDescGZIP(), []int{44}
}

func (x *Logs) GetLogs() []*Log {
	if x != nil {
		return x.Logs
	}
	return nil
}

// Deprecated
type EvmTransfer struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Amount []byte `protobuf:"bytes,1,opt,name=amount,proto3" json:"amount,omitempty"`
	From   string `protobuf:"bytes,2,opt,name=from,proto3" json:"from,omitempty"`
	To     string `protobuf:"bytes,3,opt,name=to,proto3" json:"to,omitempty"`
}

func (x *EvmTransfer) Reset() {
	*x = EvmTransfer{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_types_action_proto_msgTypes[45]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EvmTransfer) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EvmTransfer) ProtoMessage() {}

func (x *EvmTransfer) ProtoReflect() protoreflect.Message {
	mi := &file_proto_types_action_proto_msgTypes[45]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EvmTransfer.ProtoReflect.Descriptor instead.
func (*EvmTransfer) Descriptor() ([]byte, []int) {
	return file_proto_types_action_proto_rawDescGZIP(), []int{45}
}

func (x *EvmTransfer) GetAmount() []byte {
	if x != nil {
		return x.Amount
	}
	return nil
}

func (x *EvmTransfer) GetFrom() string {
	if x != nil {
		return x.From
	}
	return ""
}

func (x *EvmTransfer) GetTo() string {
	if x != nil {
		return x.To
	}
	return ""
}

// Deprecated
type EvmTransferList struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	EvmTransfers []*EvmTransfer `protobuf:"bytes,1,rep,name=evmTransfers,proto3" json:"evmTransfers,omitempty"`
}

func (x *EvmTransferList) Reset() {
	*x = EvmTransferList{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_types_action_proto_msgTypes[46]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EvmTransferList) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EvmTransferList) ProtoMessage() {}

func (x *EvmTransferList) ProtoReflect() protoreflect.Message {
	mi := &file_proto_types_action_proto_msgTypes[46]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EvmTransferList.ProtoReflect.Descriptor instead.
func (*EvmTransferList) Descriptor() ([]byte, []int) {
	return file_proto_types_action_proto_rawDescGZIP(), []int{46}
}

func (x *EvmTransferList) GetEvmTransfers() []*EvmTransfer {
	if x != nil {
		return x.EvmTransfers
	}
	return nil
}

// Deprecated
type ActionEvmTransfer struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ActionHash      []byte         `protobuf:"bytes,1,opt,name=actionHash,proto3" json:"actionHash,omitempty"`
	NumEvmTransfers uint64         `protobuf:"varint,2,opt,name=numEvmTransfers,proto3" json:"numEvmTransfers,omitempty"`
	EvmTransfers    []*EvmTransfer `protobuf:"bytes,3,rep,name=evmTransfers,proto3" json:"evmTransfers,omitempty"`
}

func (x *ActionEvmTransfer) Reset() {
	*x = ActionEvmTransfer{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_types_action_proto_msgTypes[47]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ActionEvmTransfer) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ActionEvmTransfer) ProtoMessage() {}

func (x *ActionEvmTransfer) ProtoReflect() protoreflect.Message {
	mi := &file_proto_types_action_proto_msgTypes[47]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ActionEvmTransfer.ProtoReflect.Descriptor instead.
func (*ActionEvmTransfer) Descriptor() ([]byte, []int) {
	return file_proto_types_action_proto_rawDescGZIP(), []int{47}
}

func (x *ActionEvmTransfer) GetActionHash() []byte {
	if x != nil {
		return x.ActionHash
	}
	return nil
}

func (x *ActionEvmTransfer) GetNumEvmTransfers() uint64 {
	if x != nil {
		return x.NumEvmTransfers
	}
	return 0
}

func (x *ActionEvmTransfer) GetEvmTransfers() []*EvmTransfer {
	if x != nil {
		return x.EvmTransfers
	}
	return nil
}

// Deprecated
type BlockEvmTransfer struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BlockHeight        uint64               `protobuf:"varint,1,opt,name=blockHeight,proto3" json:"blockHeight,omitempty"`
	NumEvmTransfers    uint64               `protobuf:"varint,2,opt,name=numEvmTransfers,proto3" json:"numEvmTransfers,omitempty"`
	ActionEvmTransfers []*ActionEvmTransfer `protobuf:"bytes,3,rep,name=actionEvmTransfers,proto3" json:"actionEvmTransfers,omitempty"`
}

func (x *BlockEvmTransfer) Reset() {
	*x = BlockEvmTransfer{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_types_action_proto_msgTypes[48]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BlockEvmTransfer) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BlockEvmTransfer) ProtoMessage() {}

func (x *BlockEvmTransfer) ProtoReflect() protoreflect.Message {
	mi := &file_proto_types_action_proto_msgTypes[48]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BlockEvmTransfer.ProtoReflect.Descriptor instead.
func (*BlockEvmTransfer) Descriptor() ([]byte, []int) {
	return file_proto_types_action_proto_rawDescGZIP(), []int{48}
}

func (x *BlockEvmTransfer) GetBlockHeight() uint64 {
	if x != nil {
		return x.BlockHeight
	}
	return 0
}

func (x *BlockEvmTransfer) GetNumEvmTransfers() uint64 {
	if x != nil {
		return x.NumEvmTransfers
	}
	return 0
}

func (x *BlockEvmTransfer) GetActionEvmTransfers() []*ActionEvmTransfer {
	if x != nil {
		return x.ActionEvmTransfers
	}
	return nil
}

type DepositToRewardingFund struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Amount string `protobuf:"bytes,1,opt,name=amount,proto3" json:"amount,omitempty"`
	Data   []byte `protobuf:"bytes,2,opt,name=data,proto3" json:"data,omitempty"`
}

func (x *DepositToRewardingFund) Reset() {
	*x = DepositToRewardingFund{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_types_action_proto_msgTypes[49]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DepositToRewardingFund) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DepositToRewardingFund) ProtoMessage() {}

func (x *DepositToRewardingFund) ProtoReflect() protoreflect.Message {
	mi := &file_proto_types_action_proto_msgTypes[49]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DepositToRewardingFund.ProtoReflect.Descriptor instead.
func (*DepositToRewardingFund) Descriptor() ([]byte, []int) {
	return file_proto_types_action_proto_rawDescGZIP(), []int{49}
}

func (x *DepositToRewardingFund) GetAmount() string {
	if x != nil {
		return x.Amount
	}
	return ""
}

func (x *DepositToRewardingFund) GetData() []byte {
	if x != nil {
		return x.Data
	}
	return nil
}

type ClaimFromRewardingFund struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Amount string `protobuf:"bytes,1,opt,name=amount,proto3" json:"amount,omitempty"`
	Data   []byte `protobuf:"bytes,2,opt,name=data,proto3" json:"data,omitempty"`
	// address the claim of rewards for, if empty denoting the sender's address
	// more information see iip27: https://iotex.larksuite.com/wiki/EtDewVEz6i5BeCkyj6vudtdHsCh
	Address string `protobuf:"bytes,3,opt,name=address,proto3" json:"address,omitempty"`
}

func (x *ClaimFromRewardingFund) Reset() {
	*x = ClaimFromRewardingFund{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_types_action_proto_msgTypes[50]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ClaimFromRewardingFund) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ClaimFromRewardingFund) ProtoMessage() {}

func (x *ClaimFromRewardingFund) ProtoReflect() protoreflect.Message {
	mi := &file_proto_types_action_proto_msgTypes[50]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ClaimFromRewardingFund.ProtoReflect.Descriptor instead.
func (*ClaimFromRewardingFund) Descriptor() ([]byte, []int) {
	return file_proto_types_action_proto_rawDescGZIP(), []int{50}
}

func (x *ClaimFromRewardingFund) GetAmount() string {
	if x != nil {
		return x.Amount
	}
	return ""
}

func (x *ClaimFromRewardingFund) GetData() []byte {
	if x != nil {
		return x.Data
	}
	return nil
}

func (x *ClaimFromRewardingFund) GetAddress() string {
	if x != nil {
		return x.Address
	}
	return ""
}

type GrantReward struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Type   RewardType `protobuf:"varint,1,opt,name=type,proto3,enum=iotextypes.RewardType" json:"type,omitempty"`
	Height uint64     `protobuf:"varint,2,opt,name=height,proto3" json:"height,omitempty"`
}

func (x *GrantReward) Reset() {
	*x = GrantReward{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_types_action_proto_msgTypes[51]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GrantReward) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GrantReward) ProtoMessage() {}

func (x *GrantReward) ProtoReflect() protoreflect.Message {
	mi := &file_proto_types_action_proto_msgTypes[51]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GrantReward.ProtoReflect.Descriptor instead.
func (*GrantReward) Descriptor() ([]byte, []int) {
	return file_proto_types_action_proto_rawDescGZIP(), []int{51}
}

func (x *GrantReward) GetType() RewardType {
	if x != nil {
		return x.Type
	}
	return RewardType_BlockReward
}

func (x *GrantReward) GetHeight() uint64 {
	if x != nil {
		return x.Height
	}
	return 0
}

var File_proto_types_action_proto protoreflect.FileDescriptor

var file_proto_types_action_proto_rawDesc = []byte{
	0x0a, 0x18, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2f, 0x61, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x0a, 0x69, 0x6f, 0x74, 0x65,
	0x78, 0x74, 0x79, 0x70, 0x65, 0x73, 0x22, 0x5a, 0x0a, 0x08, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66,
	0x65, 0x72, 0x12, 0x16, 0x0a, 0x06, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x06, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x1c, 0x0a, 0x09, 0x72, 0x65,
	0x63, 0x69, 0x70, 0x69, 0x65, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x72,
	0x65, 0x63, 0x69, 0x70, 0x69, 0x65, 0x6e, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x70, 0x61, 0x79, 0x6c,
	0x6f, 0x61, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x07, 0x70, 0x61, 0x79, 0x6c, 0x6f,
	0x61, 0x64, 0x22, 0x79, 0x0a, 0x09, 0x43, 0x61, 0x6e, 0x64, 0x69, 0x64, 0x61, 0x74, 0x65, 0x12,
	0x18, 0x0a, 0x07, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x07, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x6f, 0x74,
	0x65, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x05, 0x76, 0x6f, 0x74, 0x65, 0x73, 0x12,
	0x16, 0x0a, 0x06, 0x70, 0x75, 0x62, 0x4b, 0x65, 0x79, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0c, 0x52,
	0x06, 0x70, 0x75, 0x62, 0x4b, 0x65, 0x79, 0x12, 0x24, 0x0a, 0x0d, 0x72, 0x65, 0x77, 0x61, 0x72,
	0x64, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d,
	0x72, 0x65, 0x77, 0x61, 0x72, 0x64, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x22, 0x46, 0x0a,
	0x0d, 0x43, 0x61, 0x6e, 0x64, 0x69, 0x64, 0x61, 0x74, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x35,
	0x0a, 0x0a, 0x63, 0x61, 0x6e, 0x64, 0x69, 0x64, 0x61, 0x74, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x15, 0x2e, 0x69, 0x6f, 0x74, 0x65, 0x78, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e,
	0x43, 0x61, 0x6e, 0x64, 0x69, 0x64, 0x61, 0x74, 0x65, 0x52, 0x0a, 0x63, 0x61, 0x6e, 0x64, 0x69,
	0x64, 0x61, 0x74, 0x65, 0x73, 0x22, 0x62, 0x0a, 0x0d, 0x50, 0x75, 0x74, 0x50, 0x6f, 0x6c, 0x6c,
	0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x68, 0x65, 0x69, 0x67, 0x68, 0x74,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x06, 0x68, 0x65, 0x69, 0x67, 0x68, 0x74, 0x12, 0x39,
	0x0a, 0x0a, 0x63, 0x61, 0x6e, 0x64, 0x69, 0x64, 0x61, 0x74, 0x65, 0x73, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x19, 0x2e, 0x69, 0x6f, 0x74, 0x65, 0x78, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e,
	0x43, 0x61, 0x6e, 0x64, 0x69, 0x64, 0x61, 0x74, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x0a, 0x63,
	0x61, 0x6e, 0x64, 0x69, 0x64, 0x61, 0x74, 0x65, 0x73, 0x22, 0x1f, 0x0a, 0x0b, 0x54, 0x78, 0x43,
	0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x12, 0x10, 0x0a, 0x03, 0x72, 0x61, 0x77, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x03, 0x72, 0x61, 0x77, 0x22, 0x53, 0x0a, 0x09, 0x45, 0x78,
	0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x16, 0x0a, 0x06, 0x61, 0x6d, 0x6f, 0x75, 0x6e,
	0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12,
	0x1a, 0x0a, 0x08, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x08, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x64,
	0x61, 0x74, 0x61, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x22,
	0x49, 0x0a, 0x0b, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x54, 0x75, 0x70, 0x6c, 0x65, 0x12, 0x18,
	0x0a, 0x07, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x07, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x20, 0x0a, 0x0b, 0x73, 0x74, 0x6f, 0x72,
	0x61, 0x67, 0x65, 0x4b, 0x65, 0x79, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0b, 0x73,
	0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x4b, 0x65, 0x79, 0x73, 0x22, 0x5f, 0x0a, 0x0d, 0x42, 0x6c,
	0x6f, 0x62, 0x54, 0x78, 0x53, 0x69, 0x64, 0x65, 0x63, 0x61, 0x72, 0x12, 0x14, 0x0a, 0x05, 0x62,
	0x6c, 0x6f, 0x62, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0c, 0x52, 0x05, 0x62, 0x6c, 0x6f, 0x62,
	0x73, 0x12, 0x20, 0x0a, 0x0b, 0x63, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x6d, 0x65, 0x6e, 0x74, 0x73,
	0x18, 0x02, 0x20, 0x03, 0x28, 0x0c, 0x52, 0x0b, 0x63, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x6d, 0x65,
	0x6e, 0x74, 0x73, 0x12, 0x16, 0x0a, 0x06, 0x70, 0x72, 0x6f, 0x6f, 0x66, 0x73, 0x18, 0x03, 0x20,
	0x03, 0x28, 0x0c, 0x52, 0x06, 0x70, 0x72, 0x6f, 0x6f, 0x66, 0x73, 0x22, 0x8d, 0x01, 0x0a, 0x0a,
	0x42, 0x6c, 0x6f, 0x62, 0x54, 0x78, 0x44, 0x61, 0x74, 0x61, 0x12, 0x1e, 0x0a, 0x0a, 0x62, 0x6c,
	0x6f, 0x62, 0x46, 0x65, 0x65, 0x43, 0x61, 0x70, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a,
	0x62, 0x6c, 0x6f, 0x62, 0x46, 0x65, 0x65, 0x43, 0x61, 0x70, 0x12, 0x1e, 0x0a, 0x0a, 0x62, 0x6c,
	0x6f, 0x62, 0x48, 0x61, 0x73, 0x68, 0x65, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0c, 0x52, 0x0a,
	0x62, 0x6c, 0x6f, 0x62, 0x48, 0x61, 0x73, 0x68, 0x65, 0x73, 0x12, 0x3f, 0x0a, 0x0d, 0x62, 0x6c,
	0x6f, 0x62, 0x54, 0x78, 0x53, 0x69, 0x64, 0x65, 0x63, 0x61, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x19, 0x2e, 0x69, 0x6f, 0x74, 0x65, 0x78, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x42,
	0x6c, 0x6f, 0x62, 0x54, 0x78, 0x53, 0x69, 0x64, 0x65, 0x63, 0x61, 0x72, 0x52, 0x0d, 0x62, 0x6c,
	0x6f, 0x62, 0x54, 0x78, 0x53, 0x69, 0x64, 0x65, 0x63, 0x61, 0x72, 0x22, 0x5f, 0x0a, 0x0e, 0x42,
	0x6c, 0x6f, 0x62, 0x54, 0x78, 0x53, 0x69, 0x64, 0x65, 0x63, 0x61, 0x72, 0x73, 0x12, 0x16, 0x0a,
	0x06, 0x74, 0x78, 0x48, 0x61, 0x73, 0x68, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0c, 0x52, 0x06, 0x74,
	0x78, 0x48, 0x61, 0x73, 0x68, 0x12, 0x35, 0x0a, 0x08, 0x73, 0x69, 0x64, 0x65, 0x63, 0x61, 0x72,
	0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x69, 0x6f, 0x74, 0x65, 0x78, 0x74,
	0x79, 0x70, 0x65, 0x73, 0x2e, 0x42, 0x6c, 0x6f, 0x62, 0x54, 0x78, 0x53, 0x69, 0x64, 0x65, 0x63,
	0x61, 0x72, 0x52, 0x08, 0x73, 0x69, 0x64, 0x65, 0x63, 0x61, 0x72, 0x73, 0x22, 0xb7, 0x01, 0x0a,
	0x0b, 0x53, 0x74, 0x61, 0x6b, 0x65, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x12, 0x24, 0x0a, 0x0d,
	0x63, 0x61, 0x6e, 0x64, 0x69, 0x64, 0x61, 0x74, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0d, 0x63, 0x61, 0x6e, 0x64, 0x69, 0x64, 0x61, 0x74, 0x65, 0x4e, 0x61,
	0x6d, 0x65, 0x12, 0x22, 0x0a, 0x0c, 0x73, 0x74, 0x61, 0x6b, 0x65, 0x64, 0x41, 0x6d, 0x6f, 0x75,
	0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x73, 0x74, 0x61, 0x6b, 0x65, 0x64,
	0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x26, 0x0a, 0x0e, 0x73, 0x74, 0x61, 0x6b, 0x65, 0x64,
	0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0e,
	0x73, 0x74, 0x61, 0x6b, 0x65, 0x64, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1c,
	0x0a, 0x09, 0x61, 0x75, 0x74, 0x6f, 0x53, 0x74, 0x61, 0x6b, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x09, 0x61, 0x75, 0x74, 0x6f, 0x53, 0x74, 0x61, 0x6b, 0x65, 0x12, 0x18, 0x0a, 0x07,
	0x70, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x07, 0x70,
	0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x22, 0x30, 0x0a, 0x0c, 0x53, 0x74, 0x61, 0x6b, 0x65, 0x4d,
	0x69, 0x67, 0x72, 0x61, 0x74, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x62, 0x75, 0x63, 0x6b, 0x65, 0x74,
	0x49, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0b, 0x62, 0x75, 0x63,
	0x6b, 0x65, 0x74, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x22, 0x4a, 0x0a, 0x0c, 0x53, 0x74, 0x61, 0x6b,
	0x65, 0x52, 0x65, 0x63, 0x6c, 0x61, 0x69, 0x6d, 0x12, 0x20, 0x0a, 0x0b, 0x62, 0x75, 0x63, 0x6b,
	0x65, 0x74, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0b, 0x62,
	0x75, 0x63, 0x6b, 0x65, 0x74, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x12, 0x18, 0x0a, 0x07, 0x70, 0x61,
	0x79, 0x6c, 0x6f, 0x61, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x07, 0x70, 0x61, 0x79,
	0x6c, 0x6f, 0x61, 0x64, 0x22, 0x65, 0x0a, 0x0f, 0x53, 0x74, 0x61, 0x6b, 0x65, 0x41, 0x64, 0x64,
	0x44, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x12, 0x20, 0x0a, 0x0b, 0x62, 0x75, 0x63, 0x6b, 0x65,
	0x74, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0b, 0x62, 0x75,
	0x63, 0x6b, 0x65, 0x74, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x12, 0x16, 0x0a, 0x06, 0x61, 0x6d, 0x6f,
	0x75, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x61, 0x6d, 0x6f, 0x75, 0x6e,
	0x74, 0x12, 0x18, 0x0a, 0x07, 0x70, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x0c, 0x52, 0x07, 0x70, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x22, 0x90, 0x01, 0x0a, 0x0c,
	0x53, 0x74, 0x61, 0x6b, 0x65, 0x52, 0x65, 0x73, 0x74, 0x61, 0x6b, 0x65, 0x12, 0x20, 0x0a, 0x0b,
	0x62, 0x75, 0x63, 0x6b, 0x65, 0x74, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x04, 0x52, 0x0b, 0x62, 0x75, 0x63, 0x6b, 0x65, 0x74, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x12, 0x26,
	0x0a, 0x0e, 0x73, 0x74, 0x61, 0x6b, 0x65, 0x64, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0e, 0x73, 0x74, 0x61, 0x6b, 0x65, 0x64, 0x44, 0x75,
	0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1c, 0x0a, 0x09, 0x61, 0x75, 0x74, 0x6f, 0x53, 0x74,
	0x61, 0x6b, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x09, 0x61, 0x75, 0x74, 0x6f, 0x53,
	0x74, 0x61, 0x6b, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x70, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x07, 0x70, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x22, 0x78,
	0x0a, 0x14, 0x53, 0x74, 0x61, 0x6b, 0x65, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x43, 0x61, 0x6e,
	0x64, 0x69, 0x64, 0x61, 0x74, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x62, 0x75, 0x63, 0x6b, 0x65, 0x74,
	0x49, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0b, 0x62, 0x75, 0x63,
	0x6b, 0x65, 0x74, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x12, 0x24, 0x0a, 0x0d, 0x63, 0x61, 0x6e, 0x64,
	0x69, 0x64, 0x61, 0x74, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0d, 0x63, 0x61, 0x6e, 0x64, 0x69, 0x64, 0x61, 0x74, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x18,
	0x0a, 0x07, 0x70, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0c, 0x52,
	0x07, 0x70, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x22, 0x78, 0x0a, 0x16, 0x53, 0x74, 0x61, 0x6b,
	0x65, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x4f, 0x77, 0x6e, 0x65, 0x72, 0x73, 0x68,
	0x69, 0x70, 0x12, 0x20, 0x0a, 0x0b, 0x62, 0x75, 0x63, 0x6b, 0x65, 0x74, 0x49, 0x6e, 0x64, 0x65,
	0x78, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0b, 0x62, 0x75, 0x63, 0x6b, 0x65, 0x74, 0x49,
	0x6e, 0x64, 0x65, 0x78, 0x12, 0x22, 0x0a, 0x0c, 0x76, 0x6f, 0x74, 0x65, 0x72, 0x41, 0x64, 0x64,
	0x72, 0x65, 0x73, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x76, 0x6f, 0x74, 0x65,
	0x72, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x18, 0x0a, 0x07, 0x70, 0x61, 0x79, 0x6c,
	0x6f, 0x61, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x07, 0x70, 0x61, 0x79, 0x6c, 0x6f,
	0x61, 0x64, 0x22, 0x78, 0x0a, 0x12, 0x43, 0x61, 0x6e, 0x64, 0x69, 0x64, 0x61, 0x74, 0x65, 0x42,
	0x61, 0x73, 0x69, 0x63, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x28, 0x0a, 0x0f,
	0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x41,
	0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x24, 0x0a, 0x0d, 0x72, 0x65, 0x77, 0x61, 0x72, 0x64,
	0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x72,
	0x65, 0x77, 0x61, 0x72, 0x64, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x22, 0xf9, 0x01, 0x0a,
	0x11, 0x43, 0x61, 0x6e, 0x64, 0x69, 0x64, 0x61, 0x74, 0x65, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74,
	0x65, 0x72, 0x12, 0x3c, 0x0a, 0x09, 0x63, 0x61, 0x6e, 0x64, 0x69, 0x64, 0x61, 0x74, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x69, 0x6f, 0x74, 0x65, 0x78, 0x74, 0x79, 0x70,
	0x65, 0x73, 0x2e, 0x43, 0x61, 0x6e, 0x64, 0x69, 0x64, 0x61, 0x74, 0x65, 0x42, 0x61, 0x73, 0x69,
	0x63, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x09, 0x63, 0x61, 0x6e, 0x64, 0x69, 0x64, 0x61, 0x74, 0x65,
	0x12, 0x22, 0x0a, 0x0c, 0x73, 0x74, 0x61, 0x6b, 0x65, 0x64, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x73, 0x74, 0x61, 0x6b, 0x65, 0x64, 0x41, 0x6d,
	0x6f, 0x75, 0x6e, 0x74, 0x12, 0x26, 0x0a, 0x0e, 0x73, 0x74, 0x61, 0x6b, 0x65, 0x64, 0x44, 0x75,
	0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0e, 0x73, 0x74,
	0x61, 0x6b, 0x65, 0x64, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1c, 0x0a, 0x09,
	0x61, 0x75, 0x74, 0x6f, 0x53, 0x74, 0x61, 0x6b, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x09, 0x61, 0x75, 0x74, 0x6f, 0x53, 0x74, 0x61, 0x6b, 0x65, 0x12, 0x22, 0x0a, 0x0c, 0x6f, 0x77,
	0x6e, 0x65, 0x72, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0c, 0x6f, 0x77, 0x6e, 0x65, 0x72, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x18,
	0x0a, 0x07, 0x70, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0c, 0x52,
	0x07, 0x70, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x22, 0x60, 0x0a, 0x1a, 0x43, 0x61, 0x6e, 0x64,
	0x69, 0x64, 0x61, 0x74, 0x65, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x4f, 0x77, 0x6e,
	0x65, 0x72, 0x73, 0x68, 0x69, 0x70, 0x12, 0x28, 0x0a, 0x0f, 0x6e, 0x65, 0x77, 0x4f, 0x77, 0x6e,
	0x65, 0x72, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0f, 0x6e, 0x65, 0x77, 0x4f, 0x77, 0x6e, 0x65, 0x72, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73,
	0x12, 0x18, 0x0a, 0x07, 0x70, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0c, 0x52, 0x07, 0x70, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x22, 0x35, 0x0a, 0x11, 0x43, 0x61,
	0x6e, 0x64, 0x69, 0x64, 0x61, 0x74, 0x65, 0x41, 0x63, 0x74, 0x69, 0x76, 0x61, 0x74, 0x65, 0x12,
	0x20, 0x0a, 0x0b, 0x62, 0x75, 0x63, 0x6b, 0x65, 0x74, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x04, 0x52, 0x0b, 0x62, 0x75, 0x63, 0x6b, 0x65, 0x74, 0x49, 0x6e, 0x64, 0x65,
	0x78, 0x22, 0x62, 0x0a, 0x14, 0x43, 0x61, 0x6e, 0x64, 0x69, 0x64, 0x61, 0x74, 0x65, 0x45, 0x6e,
	0x64, 0x6f, 0x72, 0x73, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x20, 0x0a, 0x0b, 0x62, 0x75, 0x63,
	0x6b, 0x65, 0x74, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0b,
	0x62, 0x75, 0x63, 0x6b, 0x65, 0x74, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x12, 0x18, 0x0a, 0x07, 0x65,
	0x6e, 0x64, 0x6f, 0x72, 0x73, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x65, 0x6e,
	0x64, 0x6f, 0x72, 0x73, 0x65, 0x12, 0x0e, 0x0a, 0x02, 0x6f, 0x70, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x02, 0x6f, 0x70, 0x22, 0xd1, 0x01, 0x0a, 0x0d, 0x53, 0x74, 0x61, 0x72, 0x74, 0x53,
	0x75, 0x62, 0x43, 0x68, 0x61, 0x69, 0x6e, 0x12, 0x18, 0x0a, 0x07, 0x63, 0x68, 0x61, 0x69, 0x6e,
	0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x07, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x49,
	0x44, 0x12, 0x28, 0x0a, 0x0f, 0x73, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74, 0x79, 0x44, 0x65, 0x70,
	0x6f, 0x73, 0x69, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x73, 0x65, 0x63, 0x75,
	0x72, 0x69, 0x74, 0x79, 0x44, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x12, 0x2a, 0x0a, 0x10, 0x6f,
	0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x44, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x44, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x12, 0x20, 0x0a, 0x0b, 0x73, 0x74, 0x61, 0x72, 0x74,
	0x48, 0x65, 0x69, 0x67, 0x68, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0b, 0x73, 0x74,
	0x61, 0x72, 0x74, 0x48, 0x65, 0x69, 0x67, 0x68, 0x74, 0x12, 0x2e, 0x0a, 0x12, 0x70, 0x61, 0x72,
	0x65, 0x6e, 0x74, 0x48, 0x65, 0x69, 0x67, 0x68, 0x74, 0x4f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x04, 0x52, 0x12, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x48, 0x65, 0x69,
	0x67, 0x68, 0x74, 0x4f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x22, 0x72, 0x0a, 0x0c, 0x53, 0x74, 0x6f,
	0x70, 0x53, 0x75, 0x62, 0x43, 0x68, 0x61, 0x69, 0x6e, 0x12, 0x18, 0x0a, 0x07, 0x63, 0x68, 0x61,
	0x69, 0x6e, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x07, 0x63, 0x68, 0x61, 0x69,
	0x6e, 0x49, 0x44, 0x12, 0x1e, 0x0a, 0x0a, 0x73, 0x74, 0x6f, 0x70, 0x48, 0x65, 0x69, 0x67, 0x68,
	0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0a, 0x73, 0x74, 0x6f, 0x70, 0x48, 0x65, 0x69,
	0x67, 0x68, 0x74, 0x12, 0x28, 0x0a, 0x0f, 0x73, 0x75, 0x62, 0x43, 0x68, 0x61, 0x69, 0x6e, 0x41,
	0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x73, 0x75,
	0x62, 0x43, 0x68, 0x61, 0x69, 0x6e, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x22, 0x36, 0x0a,
	0x0a, 0x4d, 0x65, 0x72, 0x6b, 0x6c, 0x65, 0x52, 0x6f, 0x6f, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x6e,
	0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12,
	0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x05,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x22, 0x7a, 0x0a, 0x08, 0x50, 0x75, 0x74, 0x42, 0x6c, 0x6f, 0x63,
	0x6b, 0x12, 0x28, 0x0a, 0x0f, 0x73, 0x75, 0x62, 0x43, 0x68, 0x61, 0x69, 0x6e, 0x41, 0x64, 0x64,
	0x72, 0x65, 0x73, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x73, 0x75, 0x62, 0x43,
	0x68, 0x61, 0x69, 0x6e, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x16, 0x0a, 0x06, 0x68,
	0x65, 0x69, 0x67, 0x68, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x06, 0x68, 0x65, 0x69,
	0x67, 0x68, 0x74, 0x12, 0x2c, 0x0a, 0x05, 0x72, 0x6f, 0x6f, 0x74, 0x73, 0x18, 0x03, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x16, 0x2e, 0x69, 0x6f, 0x74, 0x65, 0x78, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e,
	0x4d, 0x65, 0x72, 0x6b, 0x6c, 0x65, 0x52, 0x6f, 0x6f, 0x74, 0x52, 0x05, 0x72, 0x6f, 0x6f, 0x74,
	0x73, 0x22, 0x5f, 0x0a, 0x0d, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x44, 0x65, 0x70, 0x6f, 0x73,
	0x69, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x49, 0x44, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x07, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x49, 0x44, 0x12, 0x16, 0x0a, 0x06,
	0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x61, 0x6d,
	0x6f, 0x75, 0x6e, 0x74, 0x12, 0x1c, 0x0a, 0x09, 0x72, 0x65, 0x63, 0x69, 0x70, 0x69, 0x65, 0x6e,
	0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x72, 0x65, 0x63, 0x69, 0x70, 0x69, 0x65,
	0x6e, 0x74, 0x22, 0x5b, 0x0a, 0x0d, 0x53, 0x65, 0x74, 0x74, 0x6c, 0x65, 0x44, 0x65, 0x70, 0x6f,
	0x73, 0x69, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x06, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x1c, 0x0a, 0x09, 0x72,
	0x65, 0x63, 0x69, 0x70, 0x69, 0x65, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09,
	0x72, 0x65, 0x63, 0x69, 0x70, 0x69, 0x65, 0x6e, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x69, 0x6e, 0x64,
	0x65, 0x78, 0x18, 0x03, 0x20, 0x01, 0x28, 0x04, 0x52, 0x05, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x22,
	0x11, 0x0a, 0x0f, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x50, 0x6c, 0x75, 0x6d, 0x43, 0x68, 0x61,
	0x69, 0x6e, 0x22, 0x3e, 0x0a, 0x12, 0x54, 0x65, 0x72, 0x6d, 0x69, 0x6e, 0x61, 0x74, 0x65, 0x50,
	0x6c, 0x75, 0x6d, 0x43, 0x68, 0x61, 0x69, 0x6e, 0x12, 0x28, 0x0a, 0x0f, 0x73, 0x75, 0x62, 0x43,
	0x68, 0x61, 0x69, 0x6e, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0f, 0x73, 0x75, 0x62, 0x43, 0x68, 0x61, 0x69, 0x6e, 0x41, 0x64, 0x64, 0x72, 0x65,
	0x73, 0x73, 0x22, 0xc5, 0x01, 0x0a, 0x0c, 0x50, 0x6c, 0x75, 0x6d, 0x50, 0x75, 0x74, 0x42, 0x6c,
	0x6f, 0x63, 0x6b, 0x12, 0x28, 0x0a, 0x0f, 0x73, 0x75, 0x62, 0x43, 0x68, 0x61, 0x69, 0x6e, 0x41,
	0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x73, 0x75,
	0x62, 0x43, 0x68, 0x61, 0x69, 0x6e, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x16, 0x0a,
	0x06, 0x68, 0x65, 0x69, 0x67, 0x68, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x06, 0x68,
	0x65, 0x69, 0x67, 0x68, 0x74, 0x12, 0x39, 0x0a, 0x05, 0x72, 0x6f, 0x6f, 0x74, 0x73, 0x18, 0x03,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x69, 0x6f, 0x74, 0x65, 0x78, 0x74, 0x79, 0x70, 0x65,
	0x73, 0x2e, 0x50, 0x6c, 0x75, 0x6d, 0x50, 0x75, 0x74, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x2e, 0x52,
	0x6f, 0x6f, 0x74, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x05, 0x72, 0x6f, 0x6f, 0x74, 0x73,
	0x1a, 0x38, 0x0a, 0x0a, 0x52, 0x6f, 0x6f, 0x74, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10,
	0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79,
	0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x52,
	0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0x73, 0x0a, 0x11, 0x50, 0x6c,
	0x75, 0x6d, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x44, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x12,
	0x28, 0x0a, 0x0f, 0x73, 0x75, 0x62, 0x43, 0x68, 0x61, 0x69, 0x6e, 0x41, 0x64, 0x64, 0x72, 0x65,
	0x73, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x73, 0x75, 0x62, 0x43, 0x68, 0x61,
	0x69, 0x6e, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x16, 0x0a, 0x06, 0x61, 0x6d, 0x6f,
	0x75, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x61, 0x6d, 0x6f, 0x75, 0x6e,
	0x74, 0x12, 0x1c, 0x0a, 0x09, 0x72, 0x65, 0x63, 0x69, 0x70, 0x69, 0x65, 0x6e, 0x74, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x72, 0x65, 0x63, 0x69, 0x70, 0x69, 0x65, 0x6e, 0x74, 0x22,
	0xfd, 0x02, 0x0a, 0x0d, 0x50, 0x6c, 0x75, 0x6d, 0x53, 0x74, 0x61, 0x72, 0x74, 0x45, 0x78, 0x69,
	0x74, 0x12, 0x28, 0x0a, 0x0f, 0x73, 0x75, 0x62, 0x43, 0x68, 0x61, 0x69, 0x6e, 0x41, 0x64, 0x64,
	0x72, 0x65, 0x73, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x73, 0x75, 0x62, 0x43,
	0x68, 0x61, 0x69, 0x6e, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x2a, 0x0a, 0x10, 0x70,
	0x72, 0x65, 0x76, 0x69, 0x6f, 0x75, 0x73, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x10, 0x70, 0x72, 0x65, 0x76, 0x69, 0x6f, 0x75, 0x73, 0x54,
	0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x12, 0x3e, 0x0a, 0x1a, 0x70, 0x72, 0x65, 0x76, 0x69,
	0x6f, 0x75, 0x73, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x42, 0x6c, 0x6f, 0x63, 0x6b,
	0x50, 0x72, 0x6f, 0x6f, 0x66, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x1a, 0x70, 0x72, 0x65,
	0x76, 0x69, 0x6f, 0x75, 0x73, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x42, 0x6c, 0x6f,
	0x63, 0x6b, 0x50, 0x72, 0x6f, 0x6f, 0x66, 0x12, 0x40, 0x0a, 0x1b, 0x70, 0x72, 0x65, 0x76, 0x69,
	0x6f, 0x75, 0x73, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x42, 0x6c, 0x6f, 0x63, 0x6b,
	0x48, 0x65, 0x69, 0x67, 0x68, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x04, 0x52, 0x1b, 0x70, 0x72,
	0x65, 0x76, 0x69, 0x6f, 0x75, 0x73, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x42, 0x6c,
	0x6f, 0x63, 0x6b, 0x48, 0x65, 0x69, 0x67, 0x68, 0x74, 0x12, 0x22, 0x0a, 0x0c, 0x65, 0x78, 0x69,
	0x74, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0c, 0x52,
	0x0c, 0x65, 0x78, 0x69, 0x74, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x12, 0x36, 0x0a,
	0x16, 0x65, 0x78, 0x69, 0x74, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x42, 0x6c, 0x6f,
	0x63, 0x6b, 0x50, 0x72, 0x6f, 0x6f, 0x66, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x16, 0x65,
	0x78, 0x69, 0x74, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x42, 0x6c, 0x6f, 0x63, 0x6b,
	0x50, 0x72, 0x6f, 0x6f, 0x66, 0x12, 0x38, 0x0a, 0x17, 0x65, 0x78, 0x69, 0x74, 0x54, 0x72, 0x61,
	0x6e, 0x73, 0x66, 0x65, 0x72, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x48, 0x65, 0x69, 0x67, 0x68, 0x74,
	0x18, 0x07, 0x20, 0x01, 0x28, 0x04, 0x52, 0x17, 0x65, 0x78, 0x69, 0x74, 0x54, 0x72, 0x61, 0x6e,
	0x73, 0x66, 0x65, 0x72, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x48, 0x65, 0x69, 0x67, 0x68, 0x74, 0x22,
	0x89, 0x02, 0x0a, 0x11, 0x50, 0x6c, 0x75, 0x6d, 0x43, 0x68, 0x61, 0x6c, 0x6c, 0x65, 0x6e, 0x67,
	0x65, 0x45, 0x78, 0x69, 0x74, 0x12, 0x28, 0x0a, 0x0f, 0x73, 0x75, 0x62, 0x43, 0x68, 0x61, 0x69,
	0x6e, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f,
	0x73, 0x75, 0x62, 0x43, 0x68, 0x61, 0x69, 0x6e, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12,
	0x16, 0x0a, 0x06, 0x63, 0x6f, 0x69, 0x6e, 0x49, 0x44, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52,
	0x06, 0x63, 0x6f, 0x69, 0x6e, 0x49, 0x44, 0x12, 0x2c, 0x0a, 0x11, 0x63, 0x68, 0x61, 0x6c, 0x6c,
	0x65, 0x6e, 0x67, 0x65, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x0c, 0x52, 0x11, 0x63, 0x68, 0x61, 0x6c, 0x6c, 0x65, 0x6e, 0x67, 0x65, 0x54, 0x72, 0x61,
	0x6e, 0x73, 0x66, 0x65, 0x72, 0x12, 0x40, 0x0a, 0x1b, 0x63, 0x68, 0x61, 0x6c, 0x6c, 0x65, 0x6e,
	0x67, 0x65, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x50,
	0x72, 0x6f, 0x6f, 0x66, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x1b, 0x63, 0x68, 0x61, 0x6c,
	0x6c, 0x65, 0x6e, 0x67, 0x65, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x42, 0x6c, 0x6f,
	0x63, 0x6b, 0x50, 0x72, 0x6f, 0x6f, 0x66, 0x12, 0x42, 0x0a, 0x1c, 0x63, 0x68, 0x61, 0x6c, 0x6c,
	0x65, 0x6e, 0x67, 0x65, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x42, 0x6c, 0x6f, 0x63,
	0x6b, 0x48, 0x65, 0x69, 0x67, 0x68, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x04, 0x52, 0x1c, 0x63,
	0x68, 0x61, 0x6c, 0x6c, 0x65, 0x6e, 0x67, 0x65, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72,
	0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x48, 0x65, 0x69, 0x67, 0x68, 0x74, 0x22, 0xb9, 0x02, 0x0a, 0x19,
	0x50, 0x6c, 0x75, 0x6d, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x43, 0x68, 0x61, 0x6c,
	0x6c, 0x65, 0x6e, 0x67, 0x65, 0x45, 0x78, 0x69, 0x74, 0x12, 0x28, 0x0a, 0x0f, 0x73, 0x75, 0x62,
	0x43, 0x68, 0x61, 0x69, 0x6e, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0f, 0x73, 0x75, 0x62, 0x43, 0x68, 0x61, 0x69, 0x6e, 0x41, 0x64, 0x64, 0x72,
	0x65, 0x73, 0x73, 0x12, 0x16, 0x0a, 0x06, 0x63, 0x6f, 0x69, 0x6e, 0x49, 0x44, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x04, 0x52, 0x06, 0x63, 0x6f, 0x69, 0x6e, 0x49, 0x44, 0x12, 0x2c, 0x0a, 0x11, 0x63,
	0x68, 0x61, 0x6c, 0x6c, 0x65, 0x6e, 0x67, 0x65, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x11, 0x63, 0x68, 0x61, 0x6c, 0x6c, 0x65, 0x6e, 0x67,
	0x65, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x12, 0x2a, 0x0a, 0x10, 0x72, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x0c, 0x52, 0x10, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x54, 0x72, 0x61,
	0x6e, 0x73, 0x66, 0x65, 0x72, 0x12, 0x3e, 0x0a, 0x1a, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x50, 0x72,
	0x6f, 0x6f, 0x66, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x1a, 0x72, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x42, 0x6c, 0x6f, 0x63, 0x6b,
	0x50, 0x72, 0x6f, 0x6f, 0x66, 0x12, 0x40, 0x0a, 0x1b, 0x70, 0x72, 0x65, 0x76, 0x69, 0x6f, 0x75,
	0x73, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x48, 0x65,
	0x69, 0x67, 0x68, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x04, 0x52, 0x1b, 0x70, 0x72, 0x65, 0x76,
	0x69, 0x6f, 0x75, 0x73, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x42, 0x6c, 0x6f, 0x63,
	0x6b, 0x48, 0x65, 0x69, 0x67, 0x68, 0x74, 0x22, 0x54, 0x0a, 0x10, 0x50, 0x6c, 0x75, 0x6d, 0x46,
	0x69, 0x6e, 0x61, 0x6c, 0x69, 0x7a, 0x65, 0x45, 0x78, 0x69, 0x74, 0x12, 0x28, 0x0a, 0x0f, 0x73,
	0x75, 0x62, 0x43, 0x68, 0x61, 0x69, 0x6e, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x73, 0x75, 0x62, 0x43, 0x68, 0x61, 0x69, 0x6e, 0x41, 0x64,
	0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x16, 0x0a, 0x06, 0x63, 0x6f, 0x69, 0x6e, 0x49, 0x44, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x06, 0x63, 0x6f, 0x69, 0x6e, 0x49, 0x44, 0x22, 0x2b, 0x0a,
	0x11, 0x50, 0x6c, 0x75, 0x6d, 0x53, 0x65, 0x74, 0x74, 0x6c, 0x65, 0x44, 0x65, 0x70, 0x6f, 0x73,
	0x69, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x63, 0x6f, 0x69, 0x6e, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x04, 0x52, 0x06, 0x63, 0x6f, 0x69, 0x6e, 0x49, 0x44, 0x22, 0x7e, 0x0a, 0x0c, 0x50, 0x6c,
	0x75, 0x6d, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x12, 0x16, 0x0a, 0x06, 0x63, 0x6f,
	0x69, 0x6e, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x06, 0x63, 0x6f, 0x69, 0x6e,
	0x49, 0x44, 0x12, 0x22, 0x0a, 0x0c, 0x64, 0x65, 0x6e, 0x6f, 0x6d, 0x69, 0x6e, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x0c, 0x64, 0x65, 0x6e, 0x6f, 0x6d, 0x69,
	0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x14, 0x0a, 0x05, 0x6f, 0x77, 0x6e, 0x65, 0x72, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x6f, 0x77, 0x6e, 0x65, 0x72, 0x12, 0x1c, 0x0a, 0x09,
	0x72, 0x65, 0x63, 0x69, 0x70, 0x69, 0x65, 0x6e, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x09, 0x72, 0x65, 0x63, 0x69, 0x70, 0x69, 0x65, 0x6e, 0x74, 0x22, 0xe6, 0x16, 0x0a, 0x0a, 0x41,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x72, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x76, 0x65, 0x72,
	0x73, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x07, 0x76, 0x65, 0x72, 0x73,
	0x69, 0x6f, 0x6e, 0x12, 0x14, 0x0a, 0x05, 0x6e, 0x6f, 0x6e, 0x63, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x04, 0x52, 0x05, 0x6e, 0x6f, 0x6e, 0x63, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x67, 0x61, 0x73,
	0x4c, 0x69, 0x6d, 0x69, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x04, 0x52, 0x08, 0x67, 0x61, 0x73,
	0x4c, 0x69, 0x6d, 0x69, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x67, 0x61, 0x73, 0x50, 0x72, 0x69, 0x63,
	0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x67, 0x61, 0x73, 0x50, 0x72, 0x69, 0x63,
	0x65, 0x12, 0x18, 0x0a, 0x07, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x49, 0x44, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x07, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x49, 0x44, 0x12, 0x1c, 0x0a, 0x09, 0x67,
	0x61, 0x73, 0x54, 0x69, 0x70, 0x43, 0x61, 0x70, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09,
	0x67, 0x61, 0x73, 0x54, 0x69, 0x70, 0x43, 0x61, 0x70, 0x12, 0x1c, 0x0a, 0x09, 0x67, 0x61, 0x73,
	0x46, 0x65, 0x65, 0x43, 0x61, 0x70, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x67, 0x61,
	0x73, 0x46, 0x65, 0x65, 0x43, 0x61, 0x70, 0x12, 0x36, 0x0a, 0x0a, 0x62, 0x6c, 0x6f, 0x62, 0x54,
	0x78, 0x44, 0x61, 0x74, 0x61, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x69, 0x6f,
	0x74, 0x65, 0x78, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x42, 0x6c, 0x6f, 0x62, 0x54, 0x78, 0x44,
	0x61, 0x74, 0x61, 0x52, 0x0a, 0x62, 0x6c, 0x6f, 0x62, 0x54, 0x78, 0x44, 0x61, 0x74, 0x61, 0x12,
	0x37, 0x0a, 0x0a, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x4c, 0x69, 0x73, 0x74, 0x18, 0x09, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x69, 0x6f, 0x74, 0x65, 0x78, 0x74, 0x79, 0x70, 0x65, 0x73,
	0x2e, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x54, 0x75, 0x70, 0x6c, 0x65, 0x52, 0x0a, 0x61, 0x63,
	0x63, 0x65, 0x73, 0x73, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x74, 0x78, 0x54, 0x79,
	0x70, 0x65, 0x18, 0x1c, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x06, 0x74, 0x78, 0x54, 0x79, 0x70, 0x65,
	0x12, 0x32, 0x0a, 0x08, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x18, 0x0a, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x14, 0x2e, 0x69, 0x6f, 0x74, 0x65, 0x78, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e,
	0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x48, 0x00, 0x52, 0x08, 0x74, 0x72, 0x61, 0x6e,
	0x73, 0x66, 0x65, 0x72, 0x12, 0x3b, 0x0a, 0x0b, 0x74, 0x78, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x69,
	0x6e, 0x65, 0x72, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x69, 0x6f, 0x74, 0x65,
	0x78, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x54, 0x78, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e,
	0x65, 0x72, 0x48, 0x00, 0x52, 0x0b, 0x74, 0x78, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65,
	0x72, 0x12, 0x35, 0x0a, 0x09, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x0c,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x69, 0x6f, 0x74, 0x65, 0x78, 0x74, 0x79, 0x70, 0x65,
	0x73, 0x2e, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x48, 0x00, 0x52, 0x09, 0x65,
	0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x41, 0x0a, 0x0d, 0x73, 0x74, 0x61, 0x72,
	0x74, 0x53, 0x75, 0x62, 0x43, 0x68, 0x61, 0x69, 0x6e, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x19, 0x2e, 0x69, 0x6f, 0x74, 0x65, 0x78, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x53, 0x74, 0x61,
	0x72, 0x74, 0x53, 0x75, 0x62, 0x43, 0x68, 0x61, 0x69, 0x6e, 0x48, 0x00, 0x52, 0x0d, 0x73, 0x74,
	0x61, 0x72, 0x74, 0x53, 0x75, 0x62, 0x43, 0x68, 0x61, 0x69, 0x6e, 0x12, 0x3e, 0x0a, 0x0c, 0x73,
	0x74, 0x6f, 0x70, 0x53, 0x75, 0x62, 0x43, 0x68, 0x61, 0x69, 0x6e, 0x18, 0x0e, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x18, 0x2e, 0x69, 0x6f, 0x74, 0x65, 0x78, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x53,
	0x74, 0x6f, 0x70, 0x53, 0x75, 0x62, 0x43, 0x68, 0x61, 0x69, 0x6e, 0x48, 0x00, 0x52, 0x0c, 0x73,
	0x74, 0x6f, 0x70, 0x53, 0x75, 0x62, 0x43, 0x68, 0x61, 0x69, 0x6e, 0x12, 0x32, 0x0a, 0x08, 0x70,
	0x75, 0x74, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e,
	0x69, 0x6f, 0x74, 0x65, 0x78, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x50, 0x75, 0x74, 0x42, 0x6c,
	0x6f, 0x63, 0x6b, 0x48, 0x00, 0x52, 0x08, 0x70, 0x75, 0x74, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x12,
	0x41, 0x0a, 0x0d, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x44, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74,
	0x18, 0x10, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x69, 0x6f, 0x74, 0x65, 0x78, 0x74, 0x79,
	0x70, 0x65, 0x73, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x44, 0x65, 0x70, 0x6f, 0x73, 0x69,
	0x74, 0x48, 0x00, 0x52, 0x0d, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x44, 0x65, 0x70, 0x6f, 0x73,
	0x69, 0x74, 0x12, 0x41, 0x0a, 0x0d, 0x73, 0x65, 0x74, 0x74, 0x6c, 0x65, 0x44, 0x65, 0x70, 0x6f,
	0x73, 0x69, 0x74, 0x18, 0x11, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x69, 0x6f, 0x74, 0x65,
	0x78, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x53, 0x65, 0x74, 0x74, 0x6c, 0x65, 0x44, 0x65, 0x70,
	0x6f, 0x73, 0x69, 0x74, 0x48, 0x00, 0x52, 0x0d, 0x73, 0x65, 0x74, 0x74, 0x6c, 0x65, 0x44, 0x65,
	0x70, 0x6f, 0x73, 0x69, 0x74, 0x12, 0x47, 0x0a, 0x0f, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x50,
	0x6c, 0x75, 0x6d, 0x43, 0x68, 0x61, 0x69, 0x6e, 0x18, 0x12, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b,
	0x2e, 0x69, 0x6f, 0x74, 0x65, 0x78, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x43, 0x72, 0x65, 0x61,
	0x74, 0x65, 0x50, 0x6c, 0x75, 0x6d, 0x43, 0x68, 0x61, 0x69, 0x6e, 0x48, 0x00, 0x52, 0x0f, 0x63,
	0x72, 0x65, 0x61, 0x74, 0x65, 0x50, 0x6c, 0x75, 0x6d, 0x43, 0x68, 0x61, 0x69, 0x6e, 0x12, 0x50,
	0x0a, 0x12, 0x74, 0x65, 0x72, 0x6d, 0x69, 0x6e, 0x61, 0x74, 0x65, 0x50, 0x6c, 0x75, 0x6d, 0x43,
	0x68, 0x61, 0x69, 0x6e, 0x18, 0x13, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x69, 0x6f, 0x74,
	0x65, 0x78, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x54, 0x65, 0x72, 0x6d, 0x69, 0x6e, 0x61, 0x74,
	0x65, 0x50, 0x6c, 0x75, 0x6d, 0x43, 0x68, 0x61, 0x69, 0x6e, 0x48, 0x00, 0x52, 0x12, 0x74, 0x65,
	0x72, 0x6d, 0x69, 0x6e, 0x61, 0x74, 0x65, 0x50, 0x6c, 0x75, 0x6d, 0x43, 0x68, 0x61, 0x69, 0x6e,
	0x12, 0x3e, 0x0a, 0x0c, 0x70, 0x6c, 0x75, 0x6d, 0x50, 0x75, 0x74, 0x42, 0x6c, 0x6f, 0x63, 0x6b,
	0x18, 0x14, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x69, 0x6f, 0x74, 0x65, 0x78, 0x74, 0x79,
	0x70, 0x65, 0x73, 0x2e, 0x50, 0x6c, 0x75, 0x6d, 0x50, 0x75, 0x74, 0x42, 0x6c, 0x6f, 0x63, 0x6b,
	0x48, 0x00, 0x52, 0x0c, 0x70, 0x6c, 0x75, 0x6d, 0x50, 0x75, 0x74, 0x42, 0x6c, 0x6f, 0x63, 0x6b,
	0x12, 0x4d, 0x0a, 0x11, 0x70, 0x6c, 0x75, 0x6d, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x44, 0x65,
	0x70, 0x6f, 0x73, 0x69, 0x74, 0x18, 0x15, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x69, 0x6f,
	0x74, 0x65, 0x78, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x50, 0x6c, 0x75, 0x6d, 0x43, 0x72, 0x65,
	0x61, 0x74, 0x65, 0x44, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x48, 0x00, 0x52, 0x11, 0x70, 0x6c,
	0x75, 0x6d, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x44, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x12,
	0x41, 0x0a, 0x0d, 0x70, 0x6c, 0x75, 0x6d, 0x53, 0x74, 0x61, 0x72, 0x74, 0x45, 0x78, 0x69, 0x74,
	0x18, 0x16, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x69, 0x6f, 0x74, 0x65, 0x78, 0x74, 0x79,
	0x70, 0x65, 0x73, 0x2e, 0x50, 0x6c, 0x75, 0x6d, 0x53, 0x74, 0x61, 0x72, 0x74, 0x45, 0x78, 0x69,
	0x74, 0x48, 0x00, 0x52, 0x0d, 0x70, 0x6c, 0x75, 0x6d, 0x53, 0x74, 0x61, 0x72, 0x74, 0x45, 0x78,
	0x69, 0x74, 0x12, 0x4d, 0x0a, 0x11, 0x70, 0x6c, 0x75, 0x6d, 0x43, 0x68, 0x61, 0x6c, 0x6c, 0x65,
	0x6e, 0x67, 0x65, 0x45, 0x78, 0x69, 0x74, 0x18, 0x17, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e,
	0x69, 0x6f, 0x74, 0x65, 0x78, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x50, 0x6c, 0x75, 0x6d, 0x43,
	0x68, 0x61, 0x6c, 0x6c, 0x65, 0x6e, 0x67, 0x65, 0x45, 0x78, 0x69, 0x74, 0x48, 0x00, 0x52, 0x11,
	0x70, 0x6c, 0x75, 0x6d, 0x43, 0x68, 0x61, 0x6c, 0x6c, 0x65, 0x6e, 0x67, 0x65, 0x45, 0x78, 0x69,
	0x74, 0x12, 0x65, 0x0a, 0x19, 0x70, 0x6c, 0x75, 0x6d, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x43, 0x68, 0x61, 0x6c, 0x6c, 0x65, 0x6e, 0x67, 0x65, 0x45, 0x78, 0x69, 0x74, 0x18, 0x18,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x69, 0x6f, 0x74, 0x65, 0x78, 0x74, 0x79, 0x70, 0x65,
	0x73, 0x2e, 0x50, 0x6c, 0x75, 0x6d, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x43, 0x68,
	0x61, 0x6c, 0x6c, 0x65, 0x6e, 0x67, 0x65, 0x45, 0x78, 0x69, 0x74, 0x48, 0x00, 0x52, 0x19, 0x70,
	0x6c, 0x75, 0x6d, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x43, 0x68, 0x61, 0x6c, 0x6c,
	0x65, 0x6e, 0x67, 0x65, 0x45, 0x78, 0x69, 0x74, 0x12, 0x4a, 0x0a, 0x10, 0x70, 0x6c, 0x75, 0x6d,
	0x46, 0x69, 0x6e, 0x61, 0x6c, 0x69, 0x7a, 0x65, 0x45, 0x78, 0x69, 0x74, 0x18, 0x19, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x69, 0x6f, 0x74, 0x65, 0x78, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e,
	0x50, 0x6c, 0x75, 0x6d, 0x46, 0x69, 0x6e, 0x61, 0x6c, 0x69, 0x7a, 0x65, 0x45, 0x78, 0x69, 0x74,
	0x48, 0x00, 0x52, 0x10, 0x70, 0x6c, 0x75, 0x6d, 0x46, 0x69, 0x6e, 0x61, 0x6c, 0x69, 0x7a, 0x65,
	0x45, 0x78, 0x69, 0x74, 0x12, 0x4d, 0x0a, 0x11, 0x70, 0x6c, 0x75, 0x6d, 0x53, 0x65, 0x74, 0x74,
	0x6c, 0x65, 0x44, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x18, 0x1a, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1d, 0x2e, 0x69, 0x6f, 0x74, 0x65, 0x78, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x50, 0x6c, 0x75,
	0x6d, 0x53, 0x65, 0x74, 0x74, 0x6c, 0x65, 0x44, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x48, 0x00,
	0x52, 0x11, 0x70, 0x6c, 0x75, 0x6d, 0x53, 0x65, 0x74, 0x74, 0x6c, 0x65, 0x44, 0x65, 0x70, 0x6f,
	0x73, 0x69, 0x74, 0x12, 0x3e, 0x0a, 0x0c, 0x70, 0x6c, 0x75, 0x6d, 0x54, 0x72, 0x61, 0x6e, 0x73,
	0x66, 0x65, 0x72, 0x18, 0x1b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x69, 0x6f, 0x74, 0x65,
	0x78, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x50, 0x6c, 0x75, 0x6d, 0x54, 0x72, 0x61, 0x6e, 0x73,
	0x66, 0x65, 0x72, 0x48, 0x00, 0x52, 0x0c, 0x70, 0x6c, 0x75, 0x6d, 0x54, 0x72, 0x61, 0x6e, 0x73,
	0x66, 0x65, 0x72, 0x12, 0x5c, 0x0a, 0x16, 0x64, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x54, 0x6f,
	0x52, 0x65, 0x77, 0x61, 0x72, 0x64, 0x69, 0x6e, 0x67, 0x46, 0x75, 0x6e, 0x64, 0x18, 0x1e, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x69, 0x6f, 0x74, 0x65, 0x78, 0x74, 0x79, 0x70, 0x65, 0x73,
	0x2e, 0x44, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x54, 0x6f, 0x52, 0x65, 0x77, 0x61, 0x72, 0x64,
	0x69, 0x6e, 0x67, 0x46, 0x75, 0x6e, 0x64, 0x48, 0x00, 0x52, 0x16, 0x64, 0x65, 0x70, 0x6f, 0x73,
	0x69, 0x74, 0x54, 0x6f, 0x52, 0x65, 0x77, 0x61, 0x72, 0x64, 0x69, 0x6e, 0x67, 0x46, 0x75, 0x6e,
	0x64, 0x12, 0x5c, 0x0a, 0x16, 0x63, 0x6c, 0x61, 0x69, 0x6d, 0x46, 0x72, 0x6f, 0x6d, 0x52, 0x65,
	0x77, 0x61, 0x72, 0x64, 0x69, 0x6e, 0x67, 0x46, 0x75, 0x6e, 0x64, 0x18, 0x1f, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x22, 0x2e, 0x69, 0x6f, 0x74, 0x65, 0x78, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x43,
	0x6c, 0x61, 0x69, 0x6d, 0x46, 0x72, 0x6f, 0x6d, 0x52, 0x65, 0x77, 0x61, 0x72, 0x64, 0x69, 0x6e,
	0x67, 0x46, 0x75, 0x6e, 0x64, 0x48, 0x00, 0x52, 0x16, 0x63, 0x6c, 0x61, 0x69, 0x6d, 0x46, 0x72,
	0x6f, 0x6d, 0x52, 0x65, 0x77, 0x61, 0x72, 0x64, 0x69, 0x6e, 0x67, 0x46, 0x75, 0x6e, 0x64, 0x12,
	0x3b, 0x0a, 0x0b, 0x67, 0x72, 0x61, 0x6e, 0x74, 0x52, 0x65, 0x77, 0x61, 0x72, 0x64, 0x18, 0x20,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x69, 0x6f, 0x74, 0x65, 0x78, 0x74, 0x79, 0x70, 0x65,
	0x73, 0x2e, 0x47, 0x72, 0x61, 0x6e, 0x74, 0x52, 0x65, 0x77, 0x61, 0x72, 0x64, 0x48, 0x00, 0x52,
	0x0b, 0x67, 0x72, 0x61, 0x6e, 0x74, 0x52, 0x65, 0x77, 0x61, 0x72, 0x64, 0x12, 0x3b, 0x0a, 0x0b,
	0x73, 0x74, 0x61, 0x6b, 0x65, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x18, 0x28, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x17, 0x2e, 0x69, 0x6f, 0x74, 0x65, 0x78, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x53,
	0x74, 0x61, 0x6b, 0x65, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x48, 0x00, 0x52, 0x0b, 0x73, 0x74,
	0x61, 0x6b, 0x65, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x12, 0x3e, 0x0a, 0x0c, 0x73, 0x74, 0x61,
	0x6b, 0x65, 0x55, 0x6e, 0x73, 0x74, 0x61, 0x6b, 0x65, 0x18, 0x29, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x18, 0x2e, 0x69, 0x6f, 0x74, 0x65, 0x78, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x53, 0x74, 0x61,
	0x6b, 0x65, 0x52, 0x65, 0x63, 0x6c, 0x61, 0x69, 0x6d, 0x48, 0x00, 0x52, 0x0c, 0x73, 0x74, 0x61,
	0x6b, 0x65, 0x55, 0x6e, 0x73, 0x74, 0x61, 0x6b, 0x65, 0x12, 0x40, 0x0a, 0x0d, 0x73, 0x74, 0x61,
	0x6b, 0x65, 0x57, 0x69, 0x74, 0x68, 0x64, 0x72, 0x61, 0x77, 0x18, 0x2a, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x18, 0x2e, 0x69, 0x6f, 0x74, 0x65, 0x78, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x53, 0x74,
	0x61, 0x6b, 0x65, 0x52, 0x65, 0x63, 0x6c, 0x61, 0x69, 0x6d, 0x48, 0x00, 0x52, 0x0d, 0x73, 0x74,
	0x61, 0x6b, 0x65, 0x57, 0x69, 0x74, 0x68, 0x64, 0x72, 0x61, 0x77, 0x12, 0x47, 0x0a, 0x0f, 0x73,
	0x74, 0x61, 0x6b, 0x65, 0x41, 0x64, 0x64, 0x44, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x18, 0x2b,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x69, 0x6f, 0x74, 0x65, 0x78, 0x74, 0x79, 0x70, 0x65,
	0x73, 0x2e, 0x53, 0x74, 0x61, 0x6b, 0x65, 0x41, 0x64, 0x64, 0x44, 0x65, 0x70, 0x6f, 0x73, 0x69,
	0x74, 0x48, 0x00, 0x52, 0x0f, 0x73, 0x74, 0x61, 0x6b, 0x65, 0x41, 0x64, 0x64, 0x44, 0x65, 0x70,
	0x6f, 0x73, 0x69, 0x74, 0x12, 0x3e, 0x0a, 0x0c, 0x73, 0x74, 0x61, 0x6b, 0x65, 0x52, 0x65, 0x73,
	0x74, 0x61, 0x6b, 0x65, 0x18, 0x2c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x69, 0x6f, 0x74,
	0x65, 0x78, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x53, 0x74, 0x61, 0x6b, 0x65, 0x52, 0x65, 0x73,
	0x74, 0x61, 0x6b, 0x65, 0x48, 0x00, 0x52, 0x0c, 0x73, 0x74, 0x61, 0x6b, 0x65, 0x52, 0x65, 0x73,
	0x74, 0x61, 0x6b, 0x65, 0x12, 0x56, 0x0a, 0x14, 0x73, 0x74, 0x61, 0x6b, 0x65, 0x43, 0x68, 0x61,
	0x6e, 0x67, 0x65, 0x43, 0x61, 0x6e, 0x64, 0x69, 0x64, 0x61, 0x74, 0x65, 0x18, 0x2d, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x20, 0x2e, 0x69, 0x6f, 0x74, 0x65, 0x78, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e,
	0x53, 0x74, 0x61, 0x6b, 0x65, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x43, 0x61, 0x6e, 0x64, 0x69,
	0x64, 0x61, 0x74, 0x65, 0x48, 0x00, 0x52, 0x14, 0x73, 0x74, 0x61, 0x6b, 0x65, 0x43, 0x68, 0x61,
	0x6e, 0x67, 0x65, 0x43, 0x61, 0x6e, 0x64, 0x69, 0x64, 0x61, 0x74, 0x65, 0x12, 0x5c, 0x0a, 0x16,
	0x73, 0x74, 0x61, 0x6b, 0x65, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x4f, 0x77, 0x6e,
	0x65, 0x72, 0x73, 0x68, 0x69, 0x70, 0x18, 0x2e, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x69,
	0x6f, 0x74, 0x65, 0x78, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x53, 0x74, 0x61, 0x6b, 0x65, 0x54,
	0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x4f, 0x77, 0x6e, 0x65, 0x72, 0x73, 0x68, 0x69, 0x70,
	0x48, 0x00, 0x52, 0x16, 0x73, 0x74, 0x61, 0x6b, 0x65, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65,
	0x72, 0x4f, 0x77, 0x6e, 0x65, 0x72, 0x73, 0x68, 0x69, 0x70, 0x12, 0x4d, 0x0a, 0x11, 0x63, 0x61,
	0x6e, 0x64, 0x69, 0x64, 0x61, 0x74, 0x65, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x65, 0x72, 0x18,
	0x2f, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x69, 0x6f, 0x74, 0x65, 0x78, 0x74, 0x79, 0x70,
	0x65, 0x73, 0x2e, 0x43, 0x61, 0x6e, 0x64, 0x69, 0x64, 0x61, 0x74, 0x65, 0x52, 0x65, 0x67, 0x69,
	0x73, 0x74, 0x65, 0x72, 0x48, 0x00, 0x52, 0x11, 0x63, 0x61, 0x6e, 0x64, 0x69, 0x64, 0x61, 0x74,
	0x65, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x65, 0x72, 0x12, 0x4a, 0x0a, 0x0f, 0x63, 0x61, 0x6e,
	0x64, 0x69, 0x64, 0x61, 0x74, 0x65, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x18, 0x30, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x69, 0x6f, 0x74, 0x65, 0x78, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e,
	0x43, 0x61, 0x6e, 0x64, 0x69, 0x64, 0x61, 0x74, 0x65, 0x42, 0x61, 0x73, 0x69, 0x63, 0x49, 0x6e,
	0x66, 0x6f, 0x48, 0x00, 0x52, 0x0f, 0x63, 0x61, 0x6e, 0x64, 0x69, 0x64, 0x61, 0x74, 0x65, 0x55,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x12, 0x4d, 0x0a, 0x11, 0x63, 0x61, 0x6e, 0x64, 0x69, 0x64, 0x61,
	0x74, 0x65, 0x41, 0x63, 0x74, 0x69, 0x76, 0x61, 0x74, 0x65, 0x18, 0x31, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1d, 0x2e, 0x69, 0x6f, 0x74, 0x65, 0x78, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x43, 0x61,
	0x6e, 0x64, 0x69, 0x64, 0x61, 0x74, 0x65, 0x41, 0x63, 0x74, 0x69, 0x76, 0x61, 0x74, 0x65, 0x48,
	0x00, 0x52, 0x11, 0x63, 0x61, 0x6e, 0x64, 0x69, 0x64, 0x61, 0x74, 0x65, 0x41, 0x63, 0x74, 0x69,
	0x76, 0x61, 0x74, 0x65, 0x12, 0x56, 0x0a, 0x14, 0x63, 0x61, 0x6e, 0x64, 0x69, 0x64, 0x61, 0x74,
	0x65, 0x45, 0x6e, 0x64, 0x6f, 0x72, 0x73, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x18, 0x33, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x20, 0x2e, 0x69, 0x6f, 0x74, 0x65, 0x78, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e,
	0x43, 0x61, 0x6e, 0x64, 0x69, 0x64, 0x61, 0x74, 0x65, 0x45, 0x6e, 0x64, 0x6f, 0x72, 0x73, 0x65,
	0x6d, 0x65, 0x6e, 0x74, 0x48, 0x00, 0x52, 0x14, 0x63, 0x61, 0x6e, 0x64, 0x69, 0x64, 0x61, 0x74,
	0x65, 0x45, 0x6e, 0x64, 0x6f, 0x72, 0x73, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x68, 0x0a, 0x1a,
	0x63, 0x61, 0x6e, 0x64, 0x69, 0x64, 0x61, 0x74, 0x65, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65,
	0x72, 0x4f, 0x77, 0x6e, 0x65, 0x72, 0x73, 0x68, 0x69, 0x70, 0x18, 0x34, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x26, 0x2e, 0x69, 0x6f, 0x74, 0x65, 0x78, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x43, 0x61,
	0x6e, 0x64, 0x69, 0x64, 0x61, 0x74, 0x65, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x4f,
	0x77, 0x6e, 0x65, 0x72, 0x73, 0x68, 0x69, 0x70, 0x48, 0x00, 0x52, 0x1a, 0x63, 0x61, 0x6e, 0x64,
	0x69, 0x64, 0x61, 0x74, 0x65, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x4f, 0x77, 0x6e,
	0x65, 0x72, 0x73, 0x68, 0x69, 0x70, 0x12, 0x3e, 0x0a, 0x0c, 0x73, 0x74, 0x61, 0x6b, 0x65, 0x4d,
	0x69, 0x67, 0x72, 0x61, 0x74, 0x65, 0x18, 0x35, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x69,
	0x6f, 0x74, 0x65, 0x78, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x53, 0x74, 0x61, 0x6b, 0x65, 0x4d,
	0x69, 0x67, 0x72, 0x61, 0x74, 0x65, 0x48, 0x00, 0x52, 0x0c, 0x73, 0x74, 0x61, 0x6b, 0x65, 0x4d,
	0x69, 0x67, 0x72, 0x61, 0x74, 0x65, 0x12, 0x41, 0x0a, 0x0d, 0x70, 0x75, 0x74, 0x50, 0x6f, 0x6c,
	0x6c, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x18, 0x32, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e,
	0x69, 0x6f, 0x74, 0x65, 0x78, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x50, 0x75, 0x74, 0x50, 0x6f,
	0x6c, 0x6c, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x48, 0x00, 0x52, 0x0d, 0x70, 0x75, 0x74, 0x50,
	0x6f, 0x6c, 0x6c, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x42, 0x08, 0x0a, 0x06, 0x61, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x22, 0xa8, 0x01, 0x0a, 0x06, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x2a,
	0x0a, 0x04, 0x63, 0x6f, 0x72, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x69,
	0x6f, 0x74, 0x65, 0x78, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x43, 0x6f, 0x72, 0x65, 0x52, 0x04, 0x63, 0x6f, 0x72, 0x65, 0x12, 0x22, 0x0a, 0x0c, 0x73, 0x65,
	0x6e, 0x64, 0x65, 0x72, 0x50, 0x75, 0x62, 0x4b, 0x65, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c,
	0x52, 0x0c, 0x73, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x50, 0x75, 0x62, 0x4b, 0x65, 0x79, 0x12, 0x1c,
	0x0a, 0x09, 0x73, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x0c, 0x52, 0x09, 0x73, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x12, 0x30, 0x0a, 0x08,
	0x65, 0x6e, 0x63, 0x6f, 0x64, 0x69, 0x6e, 0x67, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x14,
	0x2e, 0x69, 0x6f, 0x74, 0x65, 0x78, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x45, 0x6e, 0x63, 0x6f,
	0x64, 0x69, 0x6e, 0x67, 0x52, 0x08, 0x65, 0x6e, 0x63, 0x6f, 0x64, 0x69, 0x6e, 0x67, 0x22, 0x37,
	0x0a, 0x07, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x2c, 0x0a, 0x07, 0x61, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x69, 0x6f, 0x74,
	0x65, 0x78, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x07,
	0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x22, 0x20, 0x0a, 0x0a, 0x41, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x48, 0x61, 0x73, 0x68, 0x12, 0x12, 0x0a, 0x04, 0x68, 0x61, 0x73, 0x68, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0c, 0x52, 0x04, 0x68, 0x61, 0x73, 0x68, 0x22, 0x88, 0x03, 0x0a, 0x07, 0x52, 0x65,
	0x63, 0x65, 0x69, 0x70, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x1c, 0x0a,
	0x09, 0x62, 0x6c, 0x6b, 0x48, 0x65, 0x69, 0x67, 0x68, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04,
	0x52, 0x09, 0x62, 0x6c, 0x6b, 0x48, 0x65, 0x69, 0x67, 0x68, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x61,
	0x63, 0x74, 0x48, 0x61, 0x73, 0x68, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x07, 0x61, 0x63,
	0x74, 0x48, 0x61, 0x73, 0x68, 0x12, 0x20, 0x0a, 0x0b, 0x67, 0x61, 0x73, 0x43, 0x6f, 0x6e, 0x73,
	0x75, 0x6d, 0x65, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0b, 0x67, 0x61, 0x73, 0x43,
	0x6f, 0x6e, 0x73, 0x75, 0x6d, 0x65, 0x64, 0x12, 0x28, 0x0a, 0x0f, 0x63, 0x6f, 0x6e, 0x74, 0x72,
	0x61, 0x63, 0x74, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0f, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73,
	0x73, 0x12, 0x23, 0x0a, 0x04, 0x6c, 0x6f, 0x67, 0x73, 0x18, 0x06, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x0f, 0x2e, 0x69, 0x6f, 0x74, 0x65, 0x78, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x4c, 0x6f, 0x67,
	0x52, 0x04, 0x6c, 0x6f, 0x67, 0x73, 0x12, 0x2e, 0x0a, 0x12, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74,
	0x69, 0x6f, 0x6e, 0x52, 0x65, 0x76, 0x65, 0x72, 0x74, 0x4d, 0x73, 0x67, 0x18, 0x07, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x12, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x76,
	0x65, 0x72, 0x74, 0x4d, 0x73, 0x67, 0x12, 0x18, 0x0a, 0x07, 0x74, 0x78, 0x49, 0x6e, 0x64, 0x65,
	0x78, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x07, 0x74, 0x78, 0x49, 0x6e, 0x64, 0x65, 0x78,
	0x12, 0x20, 0x0a, 0x0b, 0x62, 0x6c, 0x6f, 0x62, 0x47, 0x61, 0x73, 0x55, 0x73, 0x65, 0x64, 0x18,
	0x09, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0b, 0x62, 0x6c, 0x6f, 0x62, 0x47, 0x61, 0x73, 0x55, 0x73,
	0x65, 0x64, 0x12, 0x22, 0x0a, 0x0c, 0x62, 0x6c, 0x6f, 0x62, 0x47, 0x61, 0x73, 0x50, 0x72, 0x69,
	0x63, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x62, 0x6c, 0x6f, 0x62, 0x47, 0x61,
	0x73, 0x50, 0x72, 0x69, 0x63, 0x65, 0x12, 0x2c, 0x0a, 0x11, 0x65, 0x66, 0x66, 0x65, 0x63, 0x74,
	0x69, 0x76, 0x65, 0x47, 0x61, 0x73, 0x50, 0x72, 0x69, 0x63, 0x65, 0x18, 0x0b, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x11, 0x65, 0x66, 0x66, 0x65, 0x63, 0x74, 0x69, 0x76, 0x65, 0x47, 0x61, 0x73, 0x50,
	0x72, 0x69, 0x63, 0x65, 0x22, 0xdd, 0x01, 0x0a, 0x03, 0x4c, 0x6f, 0x67, 0x12, 0x28, 0x0a, 0x0f,
	0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x41,
	0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x16, 0x0a, 0x06, 0x74, 0x6f, 0x70, 0x69, 0x63, 0x73,
	0x18, 0x02, 0x20, 0x03, 0x28, 0x0c, 0x52, 0x06, 0x74, 0x6f, 0x70, 0x69, 0x63, 0x73, 0x12, 0x12,
	0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x04, 0x64, 0x61,
	0x74, 0x61, 0x12, 0x1c, 0x0a, 0x09, 0x62, 0x6c, 0x6b, 0x48, 0x65, 0x69, 0x67, 0x68, 0x74, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x04, 0x52, 0x09, 0x62, 0x6c, 0x6b, 0x48, 0x65, 0x69, 0x67, 0x68, 0x74,
	0x12, 0x18, 0x0a, 0x07, 0x61, 0x63, 0x74, 0x48, 0x61, 0x73, 0x68, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x0c, 0x52, 0x07, 0x61, 0x63, 0x74, 0x48, 0x61, 0x73, 0x68, 0x12, 0x14, 0x0a, 0x05, 0x69, 0x6e,
	0x64, 0x65, 0x78, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x69, 0x6e, 0x64, 0x65, 0x78,
	0x12, 0x18, 0x0a, 0x07, 0x62, 0x6c, 0x6b, 0x48, 0x61, 0x73, 0x68, 0x18, 0x07, 0x20, 0x01, 0x28,
	0x0c, 0x52, 0x07, 0x62, 0x6c, 0x6b, 0x48, 0x61, 0x73, 0x68, 0x12, 0x18, 0x0a, 0x07, 0x74, 0x78,
	0x49, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x07, 0x74, 0x78, 0x49,
	0x6e, 0x64, 0x65, 0x78, 0x22, 0x2b, 0x0a, 0x04, 0x4c, 0x6f, 0x67, 0x73, 0x12, 0x23, 0x0a, 0x04,
	0x6c, 0x6f, 0x67, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x69, 0x6f, 0x74,
	0x65, 0x78, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x4c, 0x6f, 0x67, 0x52, 0x04, 0x6c, 0x6f, 0x67,
	0x73, 0x22, 0x49, 0x0a, 0x0b, 0x45, 0x76, 0x6d, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72,
	0x12, 0x16, 0x0a, 0x06, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c,
	0x52, 0x06, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x66, 0x72, 0x6f, 0x6d,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x66, 0x72, 0x6f, 0x6d, 0x12, 0x0e, 0x0a, 0x02,
	0x74, 0x6f, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x74, 0x6f, 0x22, 0x4e, 0x0a, 0x0f,
	0x45, 0x76, 0x6d, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x4c, 0x69, 0x73, 0x74, 0x12,
	0x3b, 0x0a, 0x0c, 0x65, 0x76, 0x6d, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x73, 0x18,
	0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x69, 0x6f, 0x74, 0x65, 0x78, 0x74, 0x79, 0x70,
	0x65, 0x73, 0x2e, 0x45, 0x76, 0x6d, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x52, 0x0c,
	0x65, 0x76, 0x6d, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x73, 0x22, 0x9a, 0x01, 0x0a,
	0x11, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x45, 0x76, 0x6d, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66,
	0x65, 0x72, 0x12, 0x1e, 0x0a, 0x0a, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x48, 0x61, 0x73, 0x68,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x0a, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x48, 0x61,
	0x73, 0x68, 0x12, 0x28, 0x0a, 0x0f, 0x6e, 0x75, 0x6d, 0x45, 0x76, 0x6d, 0x54, 0x72, 0x61, 0x6e,
	0x73, 0x66, 0x65, 0x72, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0f, 0x6e, 0x75, 0x6d,
	0x45, 0x76, 0x6d, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x73, 0x12, 0x3b, 0x0a, 0x0c,
	0x65, 0x76, 0x6d, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x73, 0x18, 0x03, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x17, 0x2e, 0x69, 0x6f, 0x74, 0x65, 0x78, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e,
	0x45, 0x76, 0x6d, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x52, 0x0c, 0x65, 0x76, 0x6d,
	0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x73, 0x22, 0xad, 0x01, 0x0a, 0x10, 0x42, 0x6c,
	0x6f, 0x63, 0x6b, 0x45, 0x76, 0x6d, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x12, 0x20,
	0x0a, 0x0b, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x48, 0x65, 0x69, 0x67, 0x68, 0x74, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x04, 0x52, 0x0b, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x48, 0x65, 0x69, 0x67, 0x68, 0x74,
	0x12, 0x28, 0x0a, 0x0f, 0x6e, 0x75, 0x6d, 0x45, 0x76, 0x6d, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66,
	0x65, 0x72, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0f, 0x6e, 0x75, 0x6d, 0x45, 0x76,
	0x6d, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x73, 0x12, 0x4d, 0x0a, 0x12, 0x61, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x45, 0x76, 0x6d, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x73,
	0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x69, 0x6f, 0x74, 0x65, 0x78, 0x74, 0x79,
	0x70, 0x65, 0x73, 0x2e, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x45, 0x76, 0x6d, 0x54, 0x72, 0x61,
	0x6e, 0x73, 0x66, 0x65, 0x72, 0x52, 0x12, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x45, 0x76, 0x6d,
	0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x73, 0x22, 0x44, 0x0a, 0x16, 0x44, 0x65, 0x70,
	0x6f, 0x73, 0x69, 0x74, 0x54, 0x6f, 0x52, 0x65, 0x77, 0x61, 0x72, 0x64, 0x69, 0x6e, 0x67, 0x46,
	0x75, 0x6e, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x06, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x64,
	0x61, 0x74, 0x61, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x22,
	0x5e, 0x0a, 0x16, 0x43, 0x6c, 0x61, 0x69, 0x6d, 0x46, 0x72, 0x6f, 0x6d, 0x52, 0x65, 0x77, 0x61,
	0x72, 0x64, 0x69, 0x6e, 0x67, 0x46, 0x75, 0x6e, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x61, 0x6d, 0x6f,
	0x75, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x61, 0x6d, 0x6f, 0x75, 0x6e,
	0x74, 0x12, 0x12, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x52,
	0x04, 0x64, 0x61, 0x74, 0x61, 0x12, 0x18, 0x0a, 0x07, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x22,
	0x51, 0x0a, 0x0b, 0x47, 0x72, 0x61, 0x6e, 0x74, 0x52, 0x65, 0x77, 0x61, 0x72, 0x64, 0x12, 0x2a,
	0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x16, 0x2e, 0x69,
	0x6f, 0x74, 0x65, 0x78, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x52, 0x65, 0x77, 0x61, 0x72, 0x64,
	0x54, 0x79, 0x70, 0x65, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x68, 0x65,
	0x69, 0x67, 0x68, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x06, 0x68, 0x65, 0x69, 0x67,
	0x68, 0x74, 0x2a, 0x76, 0x0a, 0x08, 0x45, 0x6e, 0x63, 0x6f, 0x64, 0x69, 0x6e, 0x67, 0x12, 0x12,
	0x0a, 0x0e, 0x49, 0x4f, 0x54, 0x45, 0x58, 0x5f, 0x50, 0x52, 0x4f, 0x54, 0x4f, 0x42, 0x55, 0x46,
	0x10, 0x00, 0x12, 0x13, 0x0a, 0x0f, 0x45, 0x54, 0x48, 0x45, 0x52, 0x45, 0x55, 0x4d, 0x5f, 0x45,
	0x49, 0x50, 0x31, 0x35, 0x35, 0x10, 0x01, 0x12, 0x10, 0x0a, 0x0c, 0x45, 0x54, 0x48, 0x45, 0x52,
	0x45, 0x55, 0x4d, 0x5f, 0x52, 0x4c, 0x50, 0x10, 0x01, 0x12, 0x18, 0x0a, 0x14, 0x45, 0x54, 0x48,
	0x45, 0x52, 0x45, 0x55, 0x4d, 0x5f, 0x55, 0x4e, 0x50, 0x52, 0x4f, 0x54, 0x45, 0x43, 0x54, 0x45,
	0x44, 0x10, 0x02, 0x12, 0x11, 0x0a, 0x0c, 0x54, 0x58, 0x5f, 0x43, 0x4f, 0x4e, 0x54, 0x41, 0x49,
	0x4e, 0x45, 0x52, 0x10, 0x80, 0x01, 0x1a, 0x02, 0x10, 0x01, 0x2a, 0x2e, 0x0a, 0x0a, 0x52, 0x65,
	0x77, 0x61, 0x72, 0x64, 0x54, 0x79, 0x70, 0x65, 0x12, 0x0f, 0x0a, 0x0b, 0x42, 0x6c, 0x6f, 0x63,
	0x6b, 0x52, 0x65, 0x77, 0x61, 0x72, 0x64, 0x10, 0x00, 0x12, 0x0f, 0x0a, 0x0b, 0x45, 0x70, 0x6f,
	0x63, 0x68, 0x52, 0x65, 0x77, 0x61, 0x72, 0x64, 0x10, 0x01, 0x42, 0x5d, 0x0a, 0x22, 0x63, 0x6f,
	0x6d, 0x2e, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x69, 0x6f, 0x74, 0x65, 0x78, 0x70, 0x72,
	0x6f, 0x6a, 0x65, 0x63, 0x74, 0x2e, 0x67, 0x72, 0x70, 0x63, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x73,
	0x50, 0x01, 0x5a, 0x35, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x69,
	0x6f, 0x74, 0x65, 0x78, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x2f, 0x69, 0x6f, 0x74, 0x65,
	0x78, 0x2d, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x67, 0x6f, 0x6c, 0x61, 0x6e, 0x67, 0x2f, 0x69,
	0x6f, 0x74, 0x65, 0x78, 0x74, 0x79, 0x70, 0x65, 0x73, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x33,
}

var (
	file_proto_types_action_proto_rawDescOnce sync.Once
	file_proto_types_action_proto_rawDescData = file_proto_types_action_proto_rawDesc
)

func file_proto_types_action_proto_rawDescGZIP() []byte {
	file_proto_types_action_proto_rawDescOnce.Do(func() {
		file_proto_types_action_proto_rawDescData = protoimpl.X.CompressGZIP(file_proto_types_action_proto_rawDescData)
	})
	return file_proto_types_action_proto_rawDescData
}

var file_proto_types_action_proto_enumTypes = make([]protoimpl.EnumInfo, 2)
var file_proto_types_action_proto_msgTypes = make([]protoimpl.MessageInfo, 53)
var file_proto_types_action_proto_goTypes = []any{
	(Encoding)(0),                      // 0: iotextypes.Encoding
	(RewardType)(0),                    // 1: iotextypes.RewardType
	(*Transfer)(nil),                   // 2: iotextypes.Transfer
	(*Candidate)(nil),                  // 3: iotextypes.Candidate
	(*CandidateList)(nil),              // 4: iotextypes.CandidateList
	(*PutPollResult)(nil),              // 5: iotextypes.PutPollResult
	(*TxContainer)(nil),                // 6: iotextypes.TxContainer
	(*Execution)(nil),                  // 7: iotextypes.Execution
	(*AccessTuple)(nil),                // 8: iotextypes.AccessTuple
	(*BlobTxSidecar)(nil),              // 9: iotextypes.BlobTxSidecar
	(*BlobTxData)(nil),                 // 10: iotextypes.BlobTxData
	(*BlobTxSidecars)(nil),             // 11: iotextypes.BlobTxSidecars
	(*StakeCreate)(nil),                // 12: iotextypes.StakeCreate
	(*StakeMigrate)(nil),               // 13: iotextypes.StakeMigrate
	(*StakeReclaim)(nil),               // 14: iotextypes.StakeReclaim
	(*StakeAddDeposit)(nil),            // 15: iotextypes.StakeAddDeposit
	(*StakeRestake)(nil),               // 16: iotextypes.StakeRestake
	(*StakeChangeCandidate)(nil),       // 17: iotextypes.StakeChangeCandidate
	(*StakeTransferOwnership)(nil),     // 18: iotextypes.StakeTransferOwnership
	(*CandidateBasicInfo)(nil),         // 19: iotextypes.CandidateBasicInfo
	(*CandidateRegister)(nil),          // 20: iotextypes.CandidateRegister
	(*CandidateTransferOwnership)(nil), // 21: iotextypes.CandidateTransferOwnership
	(*CandidateActivate)(nil),          // 22: iotextypes.CandidateActivate
	(*CandidateEndorsement)(nil),       // 23: iotextypes.CandidateEndorsement
	(*StartSubChain)(nil),              // 24: iotextypes.StartSubChain
	(*StopSubChain)(nil),               // 25: iotextypes.StopSubChain
	(*MerkleRoot)(nil),                 // 26: iotextypes.MerkleRoot
	(*PutBlock)(nil),                   // 27: iotextypes.PutBlock
	(*CreateDeposit)(nil),              // 28: iotextypes.CreateDeposit
	(*SettleDeposit)(nil),              // 29: iotextypes.SettleDeposit
	(*CreatePlumChain)(nil),            // 30: iotextypes.CreatePlumChain
	(*TerminatePlumChain)(nil),         // 31: iotextypes.TerminatePlumChain
	(*PlumPutBlock)(nil),               // 32: iotextypes.PlumPutBlock
	(*PlumCreateDeposit)(nil),          // 33: iotextypes.PlumCreateDeposit
	(*PlumStartExit)(nil),              // 34: iotextypes.PlumStartExit
	(*PlumChallengeExit)(nil),          // 35: iotextypes.PlumChallengeExit
	(*PlumResponseChallengeExit)(nil),  // 36: iotextypes.PlumResponseChallengeExit
	(*PlumFinalizeExit)(nil),           // 37: iotextypes.PlumFinalizeExit
	(*PlumSettleDeposit)(nil),          // 38: iotextypes.PlumSettleDeposit
	(*PlumTransfer)(nil),               // 39: iotextypes.PlumTransfer
	(*ActionCore)(nil),                 // 40: iotextypes.ActionCore
	(*Action)(nil),                     // 41: iotextypes.Action
	(*Actions)(nil),                    // 42: iotextypes.Actions
	(*ActionHash)(nil),                 // 43: iotextypes.ActionHash
	(*Receipt)(nil),                    // 44: iotextypes.Receipt
	(*Log)(nil),                        // 45: iotextypes.Log
	(*Logs)(nil),                       // 46: iotextypes.Logs
	(*EvmTransfer)(nil),                // 47: iotextypes.EvmTransfer
	(*EvmTransferList)(nil),            // 48: iotextypes.EvmTransferList
	(*ActionEvmTransfer)(nil),          // 49: iotextypes.ActionEvmTransfer
	(*BlockEvmTransfer)(nil),           // 50: iotextypes.BlockEvmTransfer
	(*DepositToRewardingFund)(nil),     // 51: iotextypes.DepositToRewardingFund
	(*ClaimFromRewardingFund)(nil),     // 52: iotextypes.ClaimFromRewardingFund
	(*GrantReward)(nil),                // 53: iotextypes.GrantReward
	nil,                                // 54: iotextypes.PlumPutBlock.RootsEntry
}
var file_proto_types_action_proto_depIdxs = []int32{
	3,  // 0: iotextypes.CandidateList.candidates:type_name -> iotextypes.Candidate
	4,  // 1: iotextypes.PutPollResult.candidates:type_name -> iotextypes.CandidateList
	9,  // 2: iotextypes.BlobTxData.blobTxSidecar:type_name -> iotextypes.BlobTxSidecar
	9,  // 3: iotextypes.BlobTxSidecars.sidecars:type_name -> iotextypes.BlobTxSidecar
	19, // 4: iotextypes.CandidateRegister.candidate:type_name -> iotextypes.CandidateBasicInfo
	26, // 5: iotextypes.PutBlock.roots:type_name -> iotextypes.MerkleRoot
	54, // 6: iotextypes.PlumPutBlock.roots:type_name -> iotextypes.PlumPutBlock.RootsEntry
	10, // 7: iotextypes.ActionCore.blobTxData:type_name -> iotextypes.BlobTxData
	8,  // 8: iotextypes.ActionCore.accessList:type_name -> iotextypes.AccessTuple
	2,  // 9: iotextypes.ActionCore.transfer:type_name -> iotextypes.Transfer
	6,  // 10: iotextypes.ActionCore.txContainer:type_name -> iotextypes.TxContainer
	7,  // 11: iotextypes.ActionCore.execution:type_name -> iotextypes.Execution
	24, // 12: iotextypes.ActionCore.startSubChain:type_name -> iotextypes.StartSubChain
	25, // 13: iotextypes.ActionCore.stopSubChain:type_name -> iotextypes.StopSubChain
	27, // 14: iotextypes.ActionCore.putBlock:type_name -> iotextypes.PutBlock
	28, // 15: iotextypes.ActionCore.createDeposit:type_name -> iotextypes.CreateDeposit
	29, // 16: iotextypes.ActionCore.settleDeposit:type_name -> iotextypes.SettleDeposit
	30, // 17: iotextypes.ActionCore.createPlumChain:type_name -> iotextypes.CreatePlumChain
	31, // 18: iotextypes.ActionCore.terminatePlumChain:type_name -> iotextypes.TerminatePlumChain
	32, // 19: iotextypes.ActionCore.plumPutBlock:type_name -> iotextypes.PlumPutBlock
	33, // 20: iotextypes.ActionCore.plumCreateDeposit:type_name -> iotextypes.PlumCreateDeposit
	34, // 21: iotextypes.ActionCore.plumStartExit:type_name -> iotextypes.PlumStartExit
	35, // 22: iotextypes.ActionCore.plumChallengeExit:type_name -> iotextypes.PlumChallengeExit
	36, // 23: iotextypes.ActionCore.plumResponseChallengeExit:type_name -> iotextypes.PlumResponseChallengeExit
	37, // 24: iotextypes.ActionCore.plumFinalizeExit:type_name -> iotextypes.PlumFinalizeExit
	38, // 25: iotextypes.ActionCore.plumSettleDeposit:type_name -> iotextypes.PlumSettleDeposit
	39, // 26: iotextypes.ActionCore.plumTransfer:type_name -> iotextypes.PlumTransfer
	51, // 27: iotextypes.ActionCore.depositToRewardingFund:type_name -> iotextypes.DepositToRewardingFund
	52, // 28: iotextypes.ActionCore.claimFromRewardingFund:type_name -> iotextypes.ClaimFromRewardingFund
	53, // 29: iotextypes.ActionCore.grantReward:type_name -> iotextypes.GrantReward
	12, // 30: iotextypes.ActionCore.stakeCreate:type_name -> iotextypes.StakeCreate
	14, // 31: iotextypes.ActionCore.stakeUnstake:type_name -> iotextypes.StakeReclaim
	14, // 32: iotextypes.ActionCore.stakeWithdraw:type_name -> iotextypes.StakeReclaim
	15, // 33: iotextypes.ActionCore.stakeAddDeposit:type_name -> iotextypes.StakeAddDeposit
	16, // 34: iotextypes.ActionCore.stakeRestake:type_name -> iotextypes.StakeRestake
	17, // 35: iotextypes.ActionCore.stakeChangeCandidate:type_name -> iotextypes.StakeChangeCandidate
	18, // 36: iotextypes.ActionCore.stakeTransferOwnership:type_name -> iotextypes.StakeTransferOwnership
	20, // 37: iotextypes.ActionCore.candidateRegister:type_name -> iotextypes.CandidateRegister
	19, // 38: iotextypes.ActionCore.candidateUpdate:type_name -> iotextypes.CandidateBasicInfo
	22, // 39: iotextypes.ActionCore.candidateActivate:type_name -> iotextypes.CandidateActivate
	23, // 40: iotextypes.ActionCore.candidateEndorsement:type_name -> iotextypes.CandidateEndorsement
	21, // 41: iotextypes.ActionCore.candidateTransferOwnership:type_name -> iotextypes.CandidateTransferOwnership
	13, // 42: iotextypes.ActionCore.stakeMigrate:type_name -> iotextypes.StakeMigrate
	5,  // 43: iotextypes.ActionCore.putPollResult:type_name -> iotextypes.PutPollResult
	40, // 44: iotextypes.Action.core:type_name -> iotextypes.ActionCore
	0,  // 45: iotextypes.Action.encoding:type_name -> iotextypes.Encoding
	41, // 46: iotextypes.Actions.actions:type_name -> iotextypes.Action
	45, // 47: iotextypes.Receipt.logs:type_name -> iotextypes.Log
	45, // 48: iotextypes.Logs.logs:type_name -> iotextypes.Log
	47, // 49: iotextypes.EvmTransferList.evmTransfers:type_name -> iotextypes.EvmTransfer
	47, // 50: iotextypes.ActionEvmTransfer.evmTransfers:type_name -> iotextypes.EvmTransfer
	49, // 51: iotextypes.BlockEvmTransfer.actionEvmTransfers:type_name -> iotextypes.ActionEvmTransfer
	1,  // 52: iotextypes.GrantReward.type:type_name -> iotextypes.RewardType
	53, // [53:53] is the sub-list for method output_type
	53, // [53:53] is the sub-list for method input_type
	53, // [53:53] is the sub-list for extension type_name
	53, // [53:53] is the sub-list for extension extendee
	0,  // [0:53] is the sub-list for field type_name
}

func init() { file_proto_types_action_proto_init() }
func file_proto_types_action_proto_init() {
	if File_proto_types_action_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_proto_types_action_proto_msgTypes[0].Exporter = func(v any, i int) any {
			switch v := v.(*Transfer); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_types_action_proto_msgTypes[1].Exporter = func(v any, i int) any {
			switch v := v.(*Candidate); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_types_action_proto_msgTypes[2].Exporter = func(v any, i int) any {
			switch v := v.(*CandidateList); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_types_action_proto_msgTypes[3].Exporter = func(v any, i int) any {
			switch v := v.(*PutPollResult); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_types_action_proto_msgTypes[4].Exporter = func(v any, i int) any {
			switch v := v.(*TxContainer); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_types_action_proto_msgTypes[5].Exporter = func(v any, i int) any {
			switch v := v.(*Execution); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_types_action_proto_msgTypes[6].Exporter = func(v any, i int) any {
			switch v := v.(*AccessTuple); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_types_action_proto_msgTypes[7].Exporter = func(v any, i int) any {
			switch v := v.(*BlobTxSidecar); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_types_action_proto_msgTypes[8].Exporter = func(v any, i int) any {
			switch v := v.(*BlobTxData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_types_action_proto_msgTypes[9].Exporter = func(v any, i int) any {
			switch v := v.(*BlobTxSidecars); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_types_action_proto_msgTypes[10].Exporter = func(v any, i int) any {
			switch v := v.(*StakeCreate); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_types_action_proto_msgTypes[11].Exporter = func(v any, i int) any {
			switch v := v.(*StakeMigrate); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_types_action_proto_msgTypes[12].Exporter = func(v any, i int) any {
			switch v := v.(*StakeReclaim); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_types_action_proto_msgTypes[13].Exporter = func(v any, i int) any {
			switch v := v.(*StakeAddDeposit); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_types_action_proto_msgTypes[14].Exporter = func(v any, i int) any {
			switch v := v.(*StakeRestake); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_types_action_proto_msgTypes[15].Exporter = func(v any, i int) any {
			switch v := v.(*StakeChangeCandidate); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_types_action_proto_msgTypes[16].Exporter = func(v any, i int) any {
			switch v := v.(*StakeTransferOwnership); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_types_action_proto_msgTypes[17].Exporter = func(v any, i int) any {
			switch v := v.(*CandidateBasicInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_types_action_proto_msgTypes[18].Exporter = func(v any, i int) any {
			switch v := v.(*CandidateRegister); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_types_action_proto_msgTypes[19].Exporter = func(v any, i int) any {
			switch v := v.(*CandidateTransferOwnership); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_types_action_proto_msgTypes[20].Exporter = func(v any, i int) any {
			switch v := v.(*CandidateActivate); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_types_action_proto_msgTypes[21].Exporter = func(v any, i int) any {
			switch v := v.(*CandidateEndorsement); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_types_action_proto_msgTypes[22].Exporter = func(v any, i int) any {
			switch v := v.(*StartSubChain); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_types_action_proto_msgTypes[23].Exporter = func(v any, i int) any {
			switch v := v.(*StopSubChain); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_types_action_proto_msgTypes[24].Exporter = func(v any, i int) any {
			switch v := v.(*MerkleRoot); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_types_action_proto_msgTypes[25].Exporter = func(v any, i int) any {
			switch v := v.(*PutBlock); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_types_action_proto_msgTypes[26].Exporter = func(v any, i int) any {
			switch v := v.(*CreateDeposit); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_types_action_proto_msgTypes[27].Exporter = func(v any, i int) any {
			switch v := v.(*SettleDeposit); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_types_action_proto_msgTypes[28].Exporter = func(v any, i int) any {
			switch v := v.(*CreatePlumChain); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_types_action_proto_msgTypes[29].Exporter = func(v any, i int) any {
			switch v := v.(*TerminatePlumChain); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_types_action_proto_msgTypes[30].Exporter = func(v any, i int) any {
			switch v := v.(*PlumPutBlock); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_types_action_proto_msgTypes[31].Exporter = func(v any, i int) any {
			switch v := v.(*PlumCreateDeposit); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_types_action_proto_msgTypes[32].Exporter = func(v any, i int) any {
			switch v := v.(*PlumStartExit); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_types_action_proto_msgTypes[33].Exporter = func(v any, i int) any {
			switch v := v.(*PlumChallengeExit); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_types_action_proto_msgTypes[34].Exporter = func(v any, i int) any {
			switch v := v.(*PlumResponseChallengeExit); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_types_action_proto_msgTypes[35].Exporter = func(v any, i int) any {
			switch v := v.(*PlumFinalizeExit); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_types_action_proto_msgTypes[36].Exporter = func(v any, i int) any {
			switch v := v.(*PlumSettleDeposit); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_types_action_proto_msgTypes[37].Exporter = func(v any, i int) any {
			switch v := v.(*PlumTransfer); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_types_action_proto_msgTypes[38].Exporter = func(v any, i int) any {
			switch v := v.(*ActionCore); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_types_action_proto_msgTypes[39].Exporter = func(v any, i int) any {
			switch v := v.(*Action); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_types_action_proto_msgTypes[40].Exporter = func(v any, i int) any {
			switch v := v.(*Actions); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_types_action_proto_msgTypes[41].Exporter = func(v any, i int) any {
			switch v := v.(*ActionHash); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_types_action_proto_msgTypes[42].Exporter = func(v any, i int) any {
			switch v := v.(*Receipt); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_types_action_proto_msgTypes[43].Exporter = func(v any, i int) any {
			switch v := v.(*Log); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_types_action_proto_msgTypes[44].Exporter = func(v any, i int) any {
			switch v := v.(*Logs); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_types_action_proto_msgTypes[45].Exporter = func(v any, i int) any {
			switch v := v.(*EvmTransfer); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_types_action_proto_msgTypes[46].Exporter = func(v any, i int) any {
			switch v := v.(*EvmTransferList); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_types_action_proto_msgTypes[47].Exporter = func(v any, i int) any {
			switch v := v.(*ActionEvmTransfer); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_types_action_proto_msgTypes[48].Exporter = func(v any, i int) any {
			switch v := v.(*BlockEvmTransfer); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_types_action_proto_msgTypes[49].Exporter = func(v any, i int) any {
			switch v := v.(*DepositToRewardingFund); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_types_action_proto_msgTypes[50].Exporter = func(v any, i int) any {
			switch v := v.(*ClaimFromRewardingFund); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_types_action_proto_msgTypes[51].Exporter = func(v any, i int) any {
			switch v := v.(*GrantReward); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_proto_types_action_proto_msgTypes[38].OneofWrappers = []any{
		(*ActionCore_Transfer)(nil),
		(*ActionCore_TxContainer)(nil),
		(*ActionCore_Execution)(nil),
		(*ActionCore_StartSubChain)(nil),
		(*ActionCore_StopSubChain)(nil),
		(*ActionCore_PutBlock)(nil),
		(*ActionCore_CreateDeposit)(nil),
		(*ActionCore_SettleDeposit)(nil),
		(*ActionCore_CreatePlumChain)(nil),
		(*ActionCore_TerminatePlumChain)(nil),
		(*ActionCore_PlumPutBlock)(nil),
		(*ActionCore_PlumCreateDeposit)(nil),
		(*ActionCore_PlumStartExit)(nil),
		(*ActionCore_PlumChallengeExit)(nil),
		(*ActionCore_PlumResponseChallengeExit)(nil),
		(*ActionCore_PlumFinalizeExit)(nil),
		(*ActionCore_PlumSettleDeposit)(nil),
		(*ActionCore_PlumTransfer)(nil),
		(*ActionCore_DepositToRewardingFund)(nil),
		(*ActionCore_ClaimFromRewardingFund)(nil),
		(*ActionCore_GrantReward)(nil),
		(*ActionCore_StakeCreate)(nil),
		(*ActionCore_StakeUnstake)(nil),
		(*ActionCore_StakeWithdraw)(nil),
		(*ActionCore_StakeAddDeposit)(nil),
		(*ActionCore_StakeRestake)(nil),
		(*ActionCore_StakeChangeCandidate)(nil),
		(*ActionCore_StakeTransferOwnership)(nil),
		(*ActionCore_CandidateRegister)(nil),
		(*ActionCore_CandidateUpdate)(nil),
		(*ActionCore_CandidateActivate)(nil),
		(*ActionCore_CandidateEndorsement)(nil),
		(*ActionCore_CandidateTransferOwnership)(nil),
		(*ActionCore_StakeMigrate)(nil),
		(*ActionCore_PutPollResult)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_proto_types_action_proto_rawDesc,
			NumEnums:      2,
			NumMessages:   53,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_proto_types_action_proto_goTypes,
		DependencyIndexes: file_proto_types_action_proto_depIdxs,
		EnumInfos:         file_proto_types_action_proto_enumTypes,
		MessageInfos:      file_proto_types_action_proto_msgTypes,
	}.Build()
	File_proto_types_action_proto = out.File
	file_proto_types_action_proto_rawDesc = nil
	file_proto_types_action_proto_goTypes = nil
	file_proto_types_action_proto_depIdxs = nil
}
